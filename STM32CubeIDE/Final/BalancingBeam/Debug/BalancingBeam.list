
BalancingBeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800e8b8  0800e8b8  0001e8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edfc  0800edfc  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800edfc  0800edfc  0001edfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee04  0800ee04  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee04  0800ee04  0001ee04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee08  0800ee08  0001ee08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800ee0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000244  0800f050  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800f050  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023259  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000498a  00000000  00000000  000434cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00047e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001578  00000000  00000000  000495f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8f2  00000000  00000000  0004ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff37  00000000  00000000  0007645a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc772  00000000  00000000  00096391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00192b03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000775c  00000000  00000000  00192bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e8a0 	.word	0x0800e8a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	0800e8a0 	.word	0x0800e8a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_ADC1_Init+0x98>)
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_ADC1_Init+0xa0>)
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_ADC1_Init+0x98>)
 800107a:	2201      	movs	r2, #1
 800107c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001088:	2201      	movs	r2, #1
 800108a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_ADC1_Init+0x98>)
 800108e:	f001 ff05 	bl	8002e9c <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001098:	f000 ff88 	bl	8001fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800109c:	2303      	movs	r3, #3
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010a4:	2307      	movs	r3, #7
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC1_Init+0x98>)
 80010ae:	f002 f9ff 	bl	80034b0 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010b8:	f000 ff78 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000294 	.word	0x20000294
 80010c8:	40012000 	.word	0x40012000
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a31      	ldr	r2, [pc, #196]	; (80011b4 <HAL_ADC_MspInit+0xe4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d15b      	bne.n	80011aa <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_ADC_MspInit+0xe8>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a30      	ldr	r2, [pc, #192]	; (80011b8 <HAL_ADC_MspInit+0xe8>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_ADC_MspInit+0xe8>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_ADC_MspInit+0xe8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a2a      	ldr	r2, [pc, #168]	; (80011b8 <HAL_ADC_MspInit+0xe8>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_ADC_MspInit+0xe8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001122:	2308      	movs	r3, #8
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4821      	ldr	r0, [pc, #132]	; (80011bc <HAL_ADC_MspInit+0xec>)
 8001136:	f003 f8a5 	bl	8004284 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_ADC_MspInit+0xf4>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 800115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 8001164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800117e:	4810      	ldr	r0, [pc, #64]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 8001180:	f002 fcf6 	bl	8003b70 <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800118a:	f000 ff0f 	bl	8001fac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_ADC_MspInit+0xf0>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2012      	movs	r0, #18
 80011a0:	f002 fcaf 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011a4:	2012      	movs	r0, #18
 80011a6:	f002 fcc8 	bl	8003b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012000 	.word	0x40012000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	200002dc 	.word	0x200002dc
 80011c4:	40026410 	.word	0x40026410

080011c8 <pid_control>:
 * @note calculation of duty cycle fed to servo
 * @param[in] htim2 :  servo timer handler
 * @param[in] htim3 :  pid timer handler
 * @return None
 */
int pid_control(float dist, int setp){
 80011c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80011d4:	6038      	str	r0, [r7, #0]

		error = (float32_t)(sp-d);
 80011d6:	4b72      	ldr	r3, [pc, #456]	; (80013a0 <pid_control+0x1d8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e2:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <pid_control+0x1dc>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	4b6e      	ldr	r3, [pc, #440]	; (80013a8 <pid_control+0x1e0>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]

		SWV_VAR = arm_pid_f32(&pid, error);
 80011f2:	4b6d      	ldr	r3, [pc, #436]	; (80013a8 <pid_control+0x1e0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6d      	ldr	r2, [pc, #436]	; (80013ac <pid_control+0x1e4>)
 80011f8:	617a      	str	r2, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	edd7 7a04 	vldr	s15, [r7, #16]
 8001206:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	edd3 7a03 	vldr	s15, [r3, #12]
 8001216:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800121a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	edd3 6a02 	vldr	s13, [r3, #8]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	edd3 7a04 	vldr	s15, [r3, #16]
 800122a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4a56      	ldr	r2, [pc, #344]	; (80013b0 <pid_control+0x1e8>)
 8001258:	6013      	str	r3, [r2, #0]

		duty_val = LINEAR_TRANSFORM(SWV_VAR, ANGLE_MIN, ANGLE_MAX, DUTY_MIN, DUTY_MAX);
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <pid_control+0x1e8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f992 	bl	8000588 <__aeabi_f2d>
 8001264:	a348      	add	r3, pc, #288	; (adr r3, 8001388 <pid_control+0x1c0>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f82f 	bl	80002cc <__adddf3>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	a346      	add	r3, pc, #280	; (adr r3, 8001390 <pid_control+0x1c8>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fb06 	bl	800088c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <pid_control+0x1ec>)
 800128e:	f7ff f9d3 	bl	8000638 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <pid_control+0x1f0>)
 80012a0:	f7ff f814 	bl	80002cc <__adddf3>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fc9c 	bl	8000be8 <__aeabi_d2uiz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a42      	ldr	r2, [pc, #264]	; (80013bc <pid_control+0x1f4>)
 80012b4:	6013      	str	r3, [r2, #0]

		if(duty_val <= DUTY_MIN){
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <pid_control+0x1f4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b37      	cmp	r3, #55	; 0x37
 80012bc:	d803      	bhi.n	80012c6 <pid_control+0xfe>
			duty_val = DUTY_MIN;
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <pid_control+0x1f4>)
 80012c0:	2237      	movs	r2, #55	; 0x37
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e006      	b.n	80012d4 <pid_control+0x10c>
		}
		else if(duty_val >= DUTY_MAX){
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <pid_control+0x1f4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b56      	cmp	r3, #86	; 0x56
 80012cc:	d902      	bls.n	80012d4 <pid_control+0x10c>
			duty_val = DUTY_MAX;
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <pid_control+0x1f4>)
 80012d0:	2257      	movs	r2, #87	; 0x57
 80012d2:	601a      	str	r2, [r3, #0]
		}
		if(d < sp + sp*0.01 && d > sp- sp*0.01 ){
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <pid_control+0x1dc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f955 	bl	8000588 <__aeabi_f2d>
 80012de:	4604      	mov	r4, r0
 80012e0:	460d      	mov	r5, r1
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <pid_control+0x1d8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f93c 	bl	8000564 <__aeabi_i2d>
 80012ec:	4680      	mov	r8, r0
 80012ee:	4689      	mov	r9, r1
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <pid_control+0x1d8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f935 	bl	8000564 <__aeabi_i2d>
 80012fa:	a327      	add	r3, pc, #156	; (adr r3, 8001398 <pid_control+0x1d0>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f99a 	bl	8000638 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4640      	mov	r0, r8
 800130a:	4649      	mov	r1, r9
 800130c:	f7fe ffde 	bl	80002cc <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7ff fc00 	bl	8000b1c <__aeabi_dcmplt>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d029      	beq.n	8001376 <pid_control+0x1ae>
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <pid_control+0x1dc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	4604      	mov	r4, r0
 800132e:	460d      	mov	r5, r1
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <pid_control+0x1d8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f915 	bl	8000564 <__aeabi_i2d>
 800133a:	4680      	mov	r8, r0
 800133c:	4689      	mov	r9, r1
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <pid_control+0x1d8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f90e 	bl	8000564 <__aeabi_i2d>
 8001348:	a313      	add	r3, pc, #76	; (adr r3, 8001398 <pid_control+0x1d0>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f973 	bl	8000638 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4640      	mov	r0, r8
 8001358:	4649      	mov	r1, r9
 800135a:	f7fe ffb5 	bl	80002c8 <__aeabi_dsub>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7ff fbf7 	bl	8000b58 <__aeabi_dcmpgt>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <pid_control+0x1ae>
			duty_val=HOME_POS;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <pid_control+0x1f4>)
 8001372:	2249      	movs	r2, #73	; 0x49
 8001374:	601a      	str	r2, [r3, #0]
		}
		return duty_val;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <pid_control+0x1f4>)
 8001378:	681b      	ldr	r3, [r3, #0]
	}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	9999999a 	.word	0x9999999a
 800138c:	401b9999 	.word	0x401b9999
 8001390:	cccccccd 	.word	0xcccccccd
 8001394:	402ccccc 	.word	0x402ccccc
 8001398:	47ae147b 	.word	0x47ae147b
 800139c:	3f847ae1 	.word	0x3f847ae1
 80013a0:	20000000 	.word	0x20000000
 80013a4:	2000026c 	.word	0x2000026c
 80013a8:	20000268 	.word	0x20000268
 80013ac:	20000004 	.word	0x20000004
 80013b0:	20000264 	.word	0x20000264
 80013b4:	40400000 	.word	0x40400000
 80013b8:	404b8000 	.word	0x404b8000
 80013bc:	20000260 	.word	0x20000260

080013c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_DMA_Init+0x38>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <MX_DMA_Init+0x38>)
 80013cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_DMA_Init+0x38>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2038      	movs	r0, #56	; 0x38
 80013e4:	f002 fb8d 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013e8:	2038      	movs	r0, #56	; 0x38
 80013ea:	f002 fba6 	bl	8003b3a <HAL_NVIC_EnableIRQ>

}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	4bad      	ldr	r3, [pc, #692]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4aac      	ldr	r2, [pc, #688]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4baa      	ldr	r3, [pc, #680]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4ba7      	ldr	r3, [pc, #668]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4aa6      	ldr	r2, [pc, #664]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4ba4      	ldr	r3, [pc, #656]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001442:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4aa0      	ldr	r2, [pc, #640]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b9e      	ldr	r3, [pc, #632]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	4b9b      	ldr	r3, [pc, #620]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a9a      	ldr	r2, [pc, #616]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b98      	ldr	r3, [pc, #608]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b95      	ldr	r3, [pc, #596]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a94      	ldr	r2, [pc, #592]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b92      	ldr	r3, [pc, #584]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b8f      	ldr	r3, [pc, #572]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a8e      	ldr	r2, [pc, #568]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b8c      	ldr	r3, [pc, #560]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	4b89      	ldr	r3, [pc, #548]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a88      	ldr	r2, [pc, #544]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b86      	ldr	r3, [pc, #536]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ba:	4b83      	ldr	r3, [pc, #524]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a82      	ldr	r2, [pc, #520]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 80014c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b80      	ldr	r3, [pc, #512]	; (80016c8 <MX_GPIO_Init+0x2cc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2119      	movs	r1, #25
 80014d6:	487d      	ldr	r0, [pc, #500]	; (80016cc <MX_GPIO_Init+0x2d0>)
 80014d8:	f003 f880 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2128      	movs	r1, #40	; 0x28
 80014e0:	487b      	ldr	r0, [pc, #492]	; (80016d0 <MX_GPIO_Init+0x2d4>)
 80014e2:	f003 f87b 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RED_LED_Pin|BLUE_LED_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2189      	movs	r1, #137	; 0x89
 80014ea:	487a      	ldr	r0, [pc, #488]	; (80016d4 <MX_GPIO_Init+0x2d8>)
 80014ec:	f003 f876 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f244 0181 	movw	r1, #16513	; 0x4081
 80014f6:	4878      	ldr	r0, [pc, #480]	; (80016d8 <MX_GPIO_Init+0x2dc>)
 80014f8:	f003 f870 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 8001502:	4876      	ldr	r0, [pc, #472]	; (80016dc <MX_GPIO_Init+0x2e0>)
 8001504:	f003 f86a 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2140      	movs	r1, #64	; 0x40
 800150c:	4874      	ldr	r0, [pc, #464]	; (80016e0 <MX_GPIO_Init+0x2e4>)
 800150e:	f003 f865 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin|LCD_D7_Pin;
 8001512:	2319      	movs	r3, #25
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4868      	ldr	r0, [pc, #416]	; (80016cc <MX_GPIO_Init+0x2d0>)
 800152a:	f002 feab 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800152e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001534:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <MX_GPIO_Init+0x2e8>)
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	4864      	ldr	r0, [pc, #400]	; (80016d4 <MX_GPIO_Init+0x2d8>)
 8001544:	f002 fe9e 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin;
 8001548:	2328      	movs	r3, #40	; 0x28
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	485c      	ldr	r0, [pc, #368]	; (80016d0 <MX_GPIO_Init+0x2d4>)
 8001560:	f002 fe90 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PC7 */
  GPIO_InitStruct.Pin = RED_LED_Pin|BLUE_LED_Pin|GPIO_PIN_7;
 8001564:	2389      	movs	r3, #137	; 0x89
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	4856      	ldr	r0, [pc, #344]	; (80016d4 <MX_GPIO_Init+0x2d8>)
 800157c:	f002 fe82 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001580:	2332      	movs	r3, #50	; 0x32
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001590:	230b      	movs	r3, #11
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	484e      	ldr	r0, [pc, #312]	; (80016d4 <MX_GPIO_Init+0x2d8>)
 800159c:	f002 fe72 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015a0:	2386      	movs	r3, #134	; 0x86
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b0:	230b      	movs	r3, #11
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	484b      	ldr	r0, [pc, #300]	; (80016e8 <MX_GPIO_Init+0x2ec>)
 80015bc:	f002 fe62 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	483f      	ldr	r0, [pc, #252]	; (80016d8 <MX_GPIO_Init+0x2dc>)
 80015da:	f002 fe53 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f0:	230b      	movs	r3, #11
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4837      	ldr	r0, [pc, #220]	; (80016d8 <MX_GPIO_Init+0x2dc>)
 80015fc:	f002 fe42 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|GREEN_LED_Pin;
 8001600:	f44f 5362 	mov.w	r3, #14464	; 0x3880
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4830      	ldr	r0, [pc, #192]	; (80016dc <MX_GPIO_Init+0x2e0>)
 800161a:	f002 fe33 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800161e:	2340      	movs	r3, #64	; 0x40
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	482a      	ldr	r0, [pc, #168]	; (80016e0 <MX_GPIO_Init+0x2e4>)
 8001636:	f002 fe25 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4824      	ldr	r0, [pc, #144]	; (80016e0 <MX_GPIO_Init+0x2e4>)
 800164e:	f002 fe19 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001652:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001664:	230a      	movs	r3, #10
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	481e      	ldr	r0, [pc, #120]	; (80016e8 <MX_GPIO_Init+0x2ec>)
 8001670:	f002 fe08 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	4817      	ldr	r0, [pc, #92]	; (80016e8 <MX_GPIO_Init+0x2ec>)
 800168a:	f002 fdfb 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800168e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a0:	230b      	movs	r3, #11
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_GPIO_Init+0x2e4>)
 80016ac:	f002 fdea 	bl	8004284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2028      	movs	r0, #40	; 0x28
 80016b6:	f002 fa24 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ba:	2028      	movs	r0, #40	; 0x28
 80016bc:	f002 fa3d 	bl	8003b3a <HAL_NVIC_EnableIRQ>

}
 80016c0:	bf00      	nop
 80016c2:	3738      	adds	r7, #56	; 0x38
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021800 	.word	0x40021800
 80016e4:	10110000 	.word	0x10110000
 80016e8:	40020000 	.word	0x40020000

080016ec <delay_us>:
 * @param[in] htim8 :  Input Capture timer handler
 * @return None
 */

void delay_us(uint16_t time, TIM_HandleTypeDef *htim8)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim8, 0);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (htim8) < time);
 8001700:	bf00      	nop
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3f9      	bcc.n	8001702 <delay_us+0x16>

}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	0000      	movs	r0, r0
	...

08001720 <HAL_TIM_IC_CaptureCallback>:
 * @return None
 */


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim8)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if (htim8->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7f1b      	ldrb	r3, [r3, #28]
 800172c:	2b01      	cmp	r3, #1
 800172e:	f040 808f 	bne.w	8001850 <HAL_TIM_IC_CaptureCallback+0x130>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001732:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d11a      	bne.n	8001770 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim8, TIM_CHANNEL_1); // read the first value
 800173a:	2100      	movs	r1, #0
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f006 f92b 	bl	8007998 <HAL_TIM_ReadCapturedValue>
 8001742:	4603      	mov	r3, r0
 8001744:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001746:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001748:	4b45      	ldr	r3, [pc, #276]	; (8001860 <HAL_TIM_IC_CaptureCallback+0x140>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim8, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6a1a      	ldr	r2, [r3, #32]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 020a 	bic.w	r2, r2, #10
 800175c:	621a      	str	r2, [r3, #32]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 0202 	orr.w	r2, r2, #2
 800176c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim8, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim8, TIM_IT_CC1);
		}
	}
}
 800176e:	e06f      	b.n	8001850 <HAL_TIM_IC_CaptureCallback+0x130>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001770:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d16b      	bne.n	8001850 <HAL_TIM_IC_CaptureCallback+0x130>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim8, TIM_CHANNEL_1);  // read second value
 8001778:	2100      	movs	r1, #0
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f006 f90c 	bl	8007998 <HAL_TIM_ReadCapturedValue>
 8001780:	4603      	mov	r3, r0
 8001782:	4a39      	ldr	r2, [pc, #228]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001784:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim8, 0);  // reset the counter
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d907      	bls.n	80017aa <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x148>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_TIM_IC_CaptureCallback+0x144>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4a31      	ldr	r2, [pc, #196]	; (800186c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e00f      	b.n	80017ca <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_TIM_IC_CaptureCallback+0x144>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x148>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d909      	bls.n	80017ca <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_TIM_IC_CaptureCallback+0x148>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_TIM_IC_CaptureCallback+0x144>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1ad2      	subs	r2, r2, r3
 80017c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c4:	4413      	add	r3, r2
 80017c6:	4a29      	ldr	r2, [pc, #164]	; (800186c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80017c8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb8 	bl	8000544 <__aeabi_ui2d>
 80017d4:	a320      	add	r3, pc, #128	; (adr r3, 8001858 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff2d 	bl	8000638 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ee:	f7ff f84d 	bl	800088c <__aeabi_ddiv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f7ff fa15 	bl	8000c28 <__aeabi_d2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001802:	6013      	str	r3, [r2, #0]
			if((Distance>40)){
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001874 <HAL_TIM_IC_CaptureCallback+0x154>
 800180e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	dd02      	ble.n	800181e <HAL_TIM_IC_CaptureCallback+0xfe>
				Distance = 40;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_TIM_IC_CaptureCallback+0x150>)
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_TIM_IC_CaptureCallback+0x158>)
 800181c:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim8, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a1a      	ldr	r2, [r3, #32]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 020a 	bic.w	r2, r2, #10
 8001832:	621a      	str	r2, [r3, #32]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a12      	ldr	r2, [r2, #32]
 800183e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim8, TIM_IT_CC1);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0202 	bic.w	r2, r2, #2
 800184e:	60da      	str	r2, [r3, #12]
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	b020c49c 	.word	0xb020c49c
 800185c:	3fa16872 	.word	0x3fa16872
 8001860:	2000027c 	.word	0x2000027c
 8001864:	20000270 	.word	0x20000270
 8001868:	20000274 	.word	0x20000274
 800186c:	20000278 	.word	0x20000278
 8001870:	20000280 	.word	0x20000280
 8001874:	42200000 	.word	0x42200000
 8001878:	42200000 	.word	0x42200000

0800187c <HCSRO4_Read>:
 */



void HCSRO4_Read (TIM_HandleTypeDef *htim8)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001884:	2201      	movs	r2, #1
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	480b      	ldr	r0, [pc, #44]	; (80018b8 <HCSRO4_Read+0x3c>)
 800188a:	f002 fea7 	bl	80045dc <HAL_GPIO_WritePin>
	delay_us(10, htim8);  // wait for 10 us
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	200a      	movs	r0, #10
 8001892:	f7ff ff2b 	bl	80016ec <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001896:	2200      	movs	r2, #0
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <HCSRO4_Read+0x3c>)
 800189c:	f002 fe9e 	bl	80045dc <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim8, TIM_IT_CC1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0202 	orr.w	r2, r2, #2
 80018ae:	60da      	str	r2, [r3, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020800 	.word	0x40020800

080018bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_I2C1_Init+0x74>)
 80018c2:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <MX_I2C1_Init+0x78>)
 80018c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_I2C1_Init+0x74>)
 80018c8:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <MX_I2C1_Init+0x7c>)
 80018ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_I2C1_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_I2C1_Init+0x74>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <MX_I2C1_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_I2C1_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_I2C1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_I2C1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_I2C1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f6:	480e      	ldr	r0, [pc, #56]	; (8001930 <MX_I2C1_Init+0x74>)
 80018f8:	f002 febc 	bl	8004674 <HAL_I2C_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001902:	f000 fb53 	bl	8001fac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <MX_I2C1_Init+0x74>)
 800190a:	f003 fcda 	bl	80052c2 <HAL_I2CEx_ConfigAnalogFilter>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001914:	f000 fb4a 	bl	8001fac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001918:	2100      	movs	r1, #0
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_I2C1_Init+0x74>)
 800191c:	f003 fd1c 	bl	8005358 <HAL_I2CEx_ConfigDigitalFilter>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001926:	f000 fb41 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000033c 	.word	0x2000033c
 8001934:	40005400 	.word	0x40005400
 8001938:	20404768 	.word	0x20404768

0800193c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_I2C_MspInit+0x9c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d138      	bne.n	80019d0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <HAL_I2C_MspInit+0xa0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <HAL_I2C_MspInit+0xa0>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_I2C_MspInit+0xa0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197c:	2312      	movs	r3, #18
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001988:	2304      	movs	r3, #4
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4813      	ldr	r0, [pc, #76]	; (80019e0 <HAL_I2C_MspInit+0xa4>)
 8001994:	f002 fc76 	bl	8004284 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_I2C_MspInit+0xa0>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_I2C_MspInit+0xa0>)
 800199e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_I2C_MspInit+0xa0>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	201f      	movs	r0, #31
 80019b6:	f002 f8a4 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019ba:	201f      	movs	r0, #31
 80019bc:	f002 f8bd 	bl	8003b3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2020      	movs	r0, #32
 80019c6:	f002 f89c 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019ca:	2020      	movs	r0, #32
 80019cc:	f002 f8b5 	bl	8003b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40005400 	.word	0x40005400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020400 	.word	0x40020400

080019e4 <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6898      	ldr	r0, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	899b      	ldrh	r3, [r3, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	f002 fdee 	bl	80045dc <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7d9b      	ldrb	r3, [r3, #22]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d115      	bne.n	8001a34 <lcd_write_command+0x50>
  {
    if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7f1b      	ldrb	r3, [r3, #28]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <lcd_write_command+0x3c>
    {
      lcd_write(hlcd, (command >> 4), LCD_NIB);
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2204      	movs	r2, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f842 	bl	8001aa4 <lcd_write>
    }
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2204      	movs	r2, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f839 	bl	8001aa4 <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 8001a32:	e005      	b.n	8001a40 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	2208      	movs	r2, #8
 8001a38:	4619      	mov	r1, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f832 	bl	8001aa4 <lcd_write>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6898      	ldr	r0, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	899b      	ldrh	r3, [r3, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f002 fdbc 	bl	80045dc <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7d9b      	ldrb	r3, [r3, #22]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d111      	bne.n	8001a90 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2204      	movs	r2, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f814 	bl	8001aa4 <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2204      	movs	r2, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f80b 	bl	8001aa4 <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001a8e:	e005      	b.n	8001a9c <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	2208      	movs	r2, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f804 	bl	8001aa4 <lcd_write>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6918      	ldr	r0, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	8a9b      	ldrh	r3, [r3, #20]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f002 fd8c 	bl	80045dc <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e019      	b.n	8001afe <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	8819      	ldrh	r1, [r3, #0]
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	fa42 f303 	asr.w	r3, r2, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	f002 fd72 	bl	80045dc <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	3301      	adds	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	78bb      	ldrb	r3, [r7, #2]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3e1      	bcc.n	8001aca <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6918      	ldr	r0, [r3, #16]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	8a9b      	ldrh	r3, [r3, #20]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4619      	mov	r1, r3
 8001b12:	f002 fd63 	bl	80045dc <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 8001b16:	2132      	movs	r1, #50	; 0x32
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f804 	bl	8001b26 <lcd_delay_us>
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 ff6e 	bl	8006a20 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 8001b44:	bf00      	nop
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f8      	bhi.n	8001b46 <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 ffd1 	bl	8006b00 <HAL_TIM_Base_Stop>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 8001b74:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ffd4 	bl	8001b26 <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7d9b      	ldrb	r3, [r3, #22]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d120      	bne.n	8001bc8 <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 8001b86:	2103      	movs	r1, #3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff2b 	bl	80019e4 <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001b8e:	f241 0167 	movw	r1, #4199	; 0x1067
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffc7 	bl	8001b26 <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001b98:	2103      	movs	r1, #3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff22 	bl	80019e4 <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001ba0:	21c8      	movs	r1, #200	; 0xc8
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffbf 	bl	8001b26 <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001ba8:	2103      	movs	r1, #3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff1a 	bl	80019e4 <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff16 	bl	80019e4 <lcd_write_command>

    hlcd->IsInitialized = 1;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8001bbe:	2128      	movs	r1, #40	; 0x28
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff0f 	bl	80019e4 <lcd_write_command>
 8001bc6:	e01f      	b.n	8001c08 <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7d9b      	ldrb	r3, [r3, #22]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d11b      	bne.n	8001c08 <LCD_Init+0xa2>
  {
  lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001bd0:	2130      	movs	r1, #48	; 0x30
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff06 	bl	80019e4 <lcd_write_command>
  __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001bd8:	f241 0167 	movw	r1, #4199	; 0x1067
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffa2 	bl	8001b26 <lcd_delay_us>
  lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001be2:	2130      	movs	r1, #48	; 0x30
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff fefd 	bl	80019e4 <lcd_write_command>
  __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001bea:	21c8      	movs	r1, #200	; 0xc8
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff9a 	bl	8001b26 <lcd_delay_us>
  lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001bf2:	2130      	movs	r1, #48	; 0x30
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fef5 	bl	80019e4 <lcd_write_command>

  hlcd->IsInitialized = 1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 8001c00:	2138      	movs	r1, #56	; 0x38
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff feee 	bl	80019e4 <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 8001c08:	2101      	movs	r1, #1
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff feea 	bl	80019e4 <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 8001c10:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff86 	bl	8001b26 <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001c1a:	210c      	movs	r1, #12
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fee1 	bl	80019e4 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 8001c22:	2106      	movs	r1, #6
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fedd 	bl	80019e4 <lcd_write_command>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 8001c32:	b590      	push	{r4, r7, lr}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e00a      	b.n	8001c58 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fefb 	bl	8001a48 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	3301      	adds	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	7bfc      	ldrb	r4, [r7, #15]
 8001c5a:	6838      	ldr	r0, [r7, #0]
 8001c5c:	f7fe fad8 	bl	8000210 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	429c      	cmp	r4, r3
 8001c64:	d3ed      	bcc.n	8001c42 <LCD_printStr+0x10>
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}

08001c70 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <LCD_SetCursor+0x30>)
 8001c84:	5cd2      	ldrb	r2, [r2, r3]
 8001c86:	78bb      	ldrb	r3, [r7, #2]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3b80      	subs	r3, #128	; 0x80
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fea6 	bl	80019e4 <lcd_write_command>
  #endif
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	0800e90c 	.word	0x0800e90c

08001ca4 <HAL_UART_RxCpltCallback>:
/**
 * @brief setting set point through UART
 * @param[in] huart :  uart handler
 * @return None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3){
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d120      	bne.n	8001cf8 <HAL_UART_RxCpltCallback+0x54>
	  HAL_UART_Receive_IT(&huart3, (uint8_t *) msg_str, strlen("SP:10"));
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	4912      	ldr	r1, [pc, #72]	; (8001d04 <HAL_UART_RxCpltCallback+0x60>)
 8001cba:	4813      	ldr	r0, [pc, #76]	; (8001d08 <HAL_UART_RxCpltCallback+0x64>)
 8001cbc:	f006 fd0c 	bl	80086d8 <HAL_UART_Receive_IT>
	  sscanf(msg_str, "SP:%d", &sp_temp);
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <HAL_UART_RxCpltCallback+0x68>)
 8001cc2:	4913      	ldr	r1, [pc, #76]	; (8001d10 <HAL_UART_RxCpltCallback+0x6c>)
 8001cc4:	480f      	ldr	r0, [pc, #60]	; (8001d04 <HAL_UART_RxCpltCallback+0x60>)
 8001cc6:	f008 fc27 	bl	800a518 <siscanf>
	  if(sp_temp == 0)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_UART_RxCpltCallback+0x68>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <HAL_UART_RxCpltCallback+0x36>
	  {
		  sp_adc = 1;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_UART_RxCpltCallback+0x70>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
		  if(sp_temp >10 && sp_temp < 20)
		      sp = sp_temp;
		  	  sp_adc = 0;
	  }
	}
}
 8001cd8:	e00e      	b.n	8001cf8 <HAL_UART_RxCpltCallback+0x54>
		  if(sp_temp >10 && sp_temp < 20)
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_UART_RxCpltCallback+0x68>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	dd07      	ble.n	8001cf2 <HAL_UART_RxCpltCallback+0x4e>
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_UART_RxCpltCallback+0x68>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b13      	cmp	r3, #19
 8001ce8:	dc03      	bgt.n	8001cf2 <HAL_UART_RxCpltCallback+0x4e>
		      sp = sp_temp;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_UART_RxCpltCallback+0x68>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_UART_RxCpltCallback+0x74>)
 8001cf0:	6013      	str	r3, [r2, #0]
		  	  sp_adc = 0;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_UART_RxCpltCallback+0x70>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40004800 	.word	0x40004800
 8001d04:	20000284 	.word	0x20000284
 8001d08:	200005c4 	.word	0x200005c4
 8001d0c:	20000398 	.word	0x20000398
 8001d10:	0800e8b8 	.word	0x0800e8b8
 8001d14:	20000060 	.word	0x20000060
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001d1c:	b5b0      	push	{r4, r5, r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d111      	bne.n	8001d52 <HAL_TIM_PeriodElapsedCallback+0x36>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pid_control(d, sp));
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fc28 	bl	8000588 <__aeabi_f2d>
 8001d38:	4604      	mov	r4, r0
 8001d3a:	460d      	mov	r5, r1
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	ec45 4b10 	vmov	d0, r4, r5
 8001d46:	f7ff fa3f 	bl	80011c8 <pid_control>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34


	if(htim->Instance == TIM4)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d102      	bne.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x46>
		uart_tx(&huart3);
 8001d5c:	4808      	ldr	r0, [pc, #32]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d5e:	f000 fe07 	bl	8002970 <uart_tx>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	2000026c 	.word	0x2000026c
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000578 	.word	0x20000578
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	200005c4 	.word	0x200005c4

08001d84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d94:	d103      	bne.n	8001d9e <HAL_GPIO_EXTI_Callback+0x1a>
	reset_beam_position(&htim2, &htim3);
 8001d96:	4904      	ldr	r1, [pc, #16]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x24>)
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <HAL_GPIO_EXTI_Callback+0x28>)
 8001d9a:	f000 febf 	bl	8002b1c <reset_beam_position>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000052c 	.word	0x2000052c
 8001dac:	20000578 	.word	0x20000578

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db4:	f000 fff1 	bl	8002d9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db8:	f000 f864 	bl	8001e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001dbc:	f000 fb18 	bl	80023f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001dc0:	f7ff fd7c 	bl	80018bc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001dc4:	f000 ff44 	bl	8002c50 <MX_USART3_UART_Init>
  MX_GPIO_Init();
 8001dc8:	f7ff fb18 	bl	80013fc <MX_GPIO_Init>
  MX_SPI4_Init();
 8001dcc:	f000 f8f4 	bl	8001fb8 <MX_SPI4_Init>
  MX_DMA_Init();
 8001dd0:	f7ff faf6 	bl	80013c0 <MX_DMA_Init>
  MX_TIM8_Init();
 8001dd4:	f000 fc58 	bl	8002688 <MX_TIM8_Init>
  MX_ADC1_Init();
 8001dd8:	f7ff f928 	bl	800102c <MX_ADC1_Init>
  MX_TIM5_Init();
 8001ddc:	f000 fc00 	bl	80025e0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001de0:	f000 fb60 	bl	80024a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001de4:	f000 fbac 	bl	8002540 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1); 	// captures pulses
 8001de8:	2100      	movs	r1, #0
 8001dea:	4819      	ldr	r0, [pc, #100]	; (8001e50 <main+0xa0>)
 8001dec:	f005 f900 	bl	8006ff0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); 	// servo control
 8001df0:	2100      	movs	r1, #0
 8001df2:	4818      	ldr	r0, [pc, #96]	; (8001e54 <main+0xa4>)
 8001df4:	f004 ffaa 	bl	8006d4c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3); 		// PID control
 8001df8:	4817      	ldr	r0, [pc, #92]	; (8001e58 <main+0xa8>)
 8001dfa:	f004 fea9 	bl	8006b50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); 	//UART
 8001dfe:	4817      	ldr	r0, [pc, #92]	; (8001e5c <main+0xac>)
 8001e00:	f004 fea6 	bl	8006b50 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) msg_str, strlen("SP:10"));
 8001e04:	2205      	movs	r2, #5
 8001e06:	4916      	ldr	r1, [pc, #88]	; (8001e60 <main+0xb0>)
 8001e08:	4816      	ldr	r0, [pc, #88]	; (8001e64 <main+0xb4>)
 8001e0a:	f006 fc65 	bl	80086d8 <HAL_UART_Receive_IT>


  LCD_Init(&hlcd1); 	// initialize LCD
 8001e0e:	4816      	ldr	r0, [pc, #88]	; (8001e68 <main+0xb8>)
 8001e10:	f7ff fea9 	bl	8001b66 <LCD_Init>
  arm_pid_init_f32(&pid,1);		//initialize PID
 8001e14:	2101      	movs	r1, #1
 8001e16:	4815      	ldr	r0, [pc, #84]	; (8001e6c <main+0xbc>)
 8001e18:	f007 fc8e 	bl	8009738 <arm_pid_init_f32>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Sensor - distance reading
	  HCSRO4_Read(&htim8);
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <main+0xa0>)
 8001e1e:	f7ff fd2d 	bl	800187c <HCSRO4_Read>
	  HAL_Delay(30);
 8001e22:	201e      	movs	r0, #30
 8001e24:	f001 f816 	bl	8002e54 <HAL_Delay>
	  d = Distance;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <main+0xc0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <main+0xc4>)
 8001e2e:	6013      	str	r3, [r2, #0]

	  //LEDs - indication of error
	  led_routine();
 8001e30:	f000 fdea 	bl	8002a08 <led_routine>

	  //LCD - printing data
	  lcd_routine(&hlcd1);
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <main+0xb8>)
 8001e36:	f000 fe87 	bl	8002b48 <lcd_routine>

	  //ADC - setting a setpoint
	  if(sp_adc == 1)
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <main+0xc8>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ec      	beq.n	8001e1c <main+0x6c>
	  sp = ADC_SETPOINT(&hadc1);
 8001e42:	480e      	ldr	r0, [pc, #56]	; (8001e7c <main+0xcc>)
 8001e44:	f000 fed2 	bl	8002bec <ADC_SETPOINT>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <main+0xd0>)
 8001e4c:	6013      	str	r3, [r2, #0]
  {
 8001e4e:	e7e5      	b.n	8001e1c <main+0x6c>
 8001e50:	20000448 	.word	0x20000448
 8001e54:	20000578 	.word	0x20000578
 8001e58:	2000052c 	.word	0x2000052c
 8001e5c:	20000494 	.word	0x20000494
 8001e60:	20000284 	.word	0x20000284
 8001e64:	200005c4 	.word	0x200005c4
 8001e68:	20000040 	.word	0x20000040
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	20000280 	.word	0x20000280
 8001e74:	2000026c 	.word	0x2000026c
 8001e78:	20000060 	.word	0x20000060
 8001e7c:	20000294 	.word	0x20000294
 8001e80:	20000000 	.word	0x20000000

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0b4      	sub	sp, #208	; 0xd0
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e8e:	2230      	movs	r2, #48	; 0x30
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f007 fc98 	bl	80097c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	2284      	movs	r2, #132	; 0x84
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f007 fc89 	bl	80097c8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001eb6:	f003 fa9b 	bl	80053f0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <SystemClock_Config+0x120>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <SystemClock_Config+0x120>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <SystemClock_Config+0x120>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed2:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <SystemClock_Config+0x124>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <SystemClock_Config+0x124>)
 8001ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <SystemClock_Config+0x124>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ef0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001efe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f06:	2304      	movs	r3, #4
 8001f08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001f0c:	23d8      	movs	r3, #216	; 0xd8
 8001f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fac4 	bl	80054b0 <HAL_RCC_OscConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f2e:	f000 f83d 	bl	8001fac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f32:	f003 fa6d 	bl	8005410 <HAL_PWREx_EnableOverDrive>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001f3c:	f000 f836 	bl	8001fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f40:	230f      	movs	r3, #15
 8001f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f66:	2107      	movs	r1, #7
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fd45 	bl	80059f8 <HAL_RCC_ClockConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001f74:	f000 f81a 	bl	8001fac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001f78:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001f7c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 ff36 	bl	8005dfc <HAL_RCCEx_PeriphCLKConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001f96:	f000 f809 	bl	8001fac <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	37d0      	adds	r7, #208	; 0xd0
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <Error_Handler+0x8>
	...

08001fb8 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <MX_SPI4_Init+0x74>)
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <MX_SPI4_Init+0x78>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <MX_SPI4_Init+0x74>)
 8001fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fc8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <MX_SPI4_Init+0x74>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_SPI4_Init+0x74>)
 8001fd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fd6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_SPI4_Init+0x74>)
 8001fda:	2202      	movs	r2, #2
 8001fdc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <MX_SPI4_Init+0x74>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_SPI4_Init+0x74>)
 8001fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fea:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <MX_SPI4_Init+0x74>)
 8001fee:	2210      	movs	r2, #16
 8001ff0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_SPI4_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_SPI4_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <MX_SPI4_Init+0x74>)
 8002000:	2200      	movs	r2, #0
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_SPI4_Init+0x74>)
 8002006:	2207      	movs	r2, #7
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_SPI4_Init+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_SPI4_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_SPI4_Init+0x74>)
 8002018:	f004 fae0 	bl	80065dc <HAL_SPI_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002022:	f7ff ffc3 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200003e4 	.word	0x200003e4
 8002030:	40013400 	.word	0x40013400

08002034 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_SPI_MspInit+0x8c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d12f      	bne.n	80020b6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_SPI_MspInit+0x90>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a1a      	ldr	r2, [pc, #104]	; (80020c4 <HAL_SPI_MspInit+0x90>)
 800205c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_SPI_MspInit+0x90>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_SPI_MspInit+0x90>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_SPI_MspInit+0x90>)
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_SPI_MspInit+0x90>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002096:	2305      	movs	r3, #5
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4809      	ldr	r0, [pc, #36]	; (80020c8 <HAL_SPI_MspInit+0x94>)
 80020a2:	f002 f8ef 	bl	8004284 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2054      	movs	r0, #84	; 0x54
 80020ac:	f001 fd29 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80020b0:	2054      	movs	r0, #84	; 0x54
 80020b2:	f001 fd42 	bl	8003b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40013400 	.word	0x40013400
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_MspInit+0x44>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_MspInit+0x44>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <HAL_MspInit+0x44>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_MspInit+0x44>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_MspInit+0x44>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_MspInit+0x44>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <NMI_Handler+0x4>

0800211a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <MemManage_Handler+0x4>

08002126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler+0x4>

08002132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002160:	f000 fe58 	bl	8002e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}

08002168 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <ADC_IRQHandler+0x10>)
 800216e:	f001 f832 	bl	80031d6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000294 	.word	0x20000294

0800217c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM2_IRQHandler+0x10>)
 8002182:	f005 f87f 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000578 	.word	0x20000578

08002190 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM3_IRQHandler+0x10>)
 8002196:	f005 f875 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000052c 	.word	0x2000052c

080021a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM4_IRQHandler+0x10>)
 80021aa:	f005 f86b 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000494 	.word	0x20000494

080021b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <I2C1_EV_IRQHandler+0x10>)
 80021be:	f002 fae9 	bl	8004794 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000033c 	.word	0x2000033c

080021cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <I2C1_ER_IRQHandler+0x10>)
 80021d2:	f002 faf9 	bl	80047c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000033c 	.word	0x2000033c

080021e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <USART3_IRQHandler+0x10>)
 80021e6:	f006 fab5 	bl	8008754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200005c4 	.word	0x200005c4

080021f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021fc:	f002 fa22 	bl	8004644 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <TIM8_CC_IRQHandler+0x10>)
 800220a:	f005 f83b 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000448 	.word	0x20000448

08002218 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <DMA2_Stream0_IRQHandler+0x10>)
 800221e:	f001 fde7 	bl	8003df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002dc 	.word	0x200002dc

0800222c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <SPI4_IRQHandler+0x10>)
 8002232:	f004 fa7f 	bl	8006734 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200003e4 	.word	0x200003e4

08002240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	return 1;
 8002244:	2301      	movs	r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_kill>:

int _kill(int pid, int sig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800225a:	f007 fa8b 	bl	8009774 <__errno>
 800225e:	4603      	mov	r3, r0
 8002260:	2216      	movs	r2, #22
 8002262:	601a      	str	r2, [r3, #0]
	return -1;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <_exit>:

void _exit (int status)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ffe7 	bl	8002250 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002282:	e7fe      	b.n	8002282 <_exit+0x12>

08002284 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e00a      	b.n	80022ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002296:	f3af 8000 	nop.w
 800229a:	4601      	mov	r1, r0
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60ba      	str	r2, [r7, #8]
 80022a2:	b2ca      	uxtb	r2, r1
 80022a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	dbf0      	blt.n	8002296 <_read+0x12>
	}

return len;
 80022b4:	687b      	ldr	r3, [r7, #4]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e009      	b.n	80022e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	60ba      	str	r2, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbf1      	blt.n	80022d0 <_write+0x12>
	}
	return len;
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_close>:

int _close(int file)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
	return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231e:	605a      	str	r2, [r3, #4]
	return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_isatty>:

int _isatty(int file)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
	return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
	return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f007 f9f0 	bl	8009774 <__errno>
 8002394:	4603      	mov	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20050000 	.word	0x20050000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	20000288 	.word	0x20000288
 80023c8:	20000660 	.word	0x20000660

080023cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002402:	463b      	mov	r3, r7
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	615a      	str	r2, [r3, #20]
 8002412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <MX_TIM2_Init+0xb0>)
 8002416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800241a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2160 - 1;
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <MX_TIM2_Init+0xb0>)
 800241e:	f640 026f 	movw	r2, #2159	; 0x86f
 8002422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <MX_TIM2_Init+0xb0>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 -1;
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_TIM2_Init+0xb0>)
 800242c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002430:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <MX_TIM2_Init+0xb0>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <MX_TIM2_Init+0xb0>)
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800243e:	4818      	ldr	r0, [pc, #96]	; (80024a0 <MX_TIM2_Init+0xb0>)
 8002440:	f004 fc2d 	bl	8006c9e <HAL_TIM_PWM_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800244a:	f7ff fdaf 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4619      	mov	r1, r3
 800245c:	4810      	ldr	r0, [pc, #64]	; (80024a0 <MX_TIM2_Init+0xb0>)
 800245e:	f005 ffe5 	bl	800842c <HAL_TIMEx_MasterConfigSynchronization>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002468:	f7ff fda0 	bl	8001fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800246c:	2360      	movs	r3, #96	; 0x60
 800246e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	2200      	movs	r2, #0
 8002480:	4619      	mov	r1, r3
 8002482:	4807      	ldr	r0, [pc, #28]	; (80024a0 <MX_TIM2_Init+0xb0>)
 8002484:	f005 f8b2 	bl	80075ec <HAL_TIM_PWM_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800248e:	f7ff fd8d 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM2_Init+0xb0>)
 8002494:	f000 fa36 	bl	8002904 <HAL_TIM_MspPostInit>

}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000578 	.word	0x20000578

080024a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c2:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <MX_TIM3_Init+0x94>)
 80024c4:	4a1d      	ldr	r2, [pc, #116]	; (800253c <MX_TIM3_Init+0x98>)
 80024c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108 - 1;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <MX_TIM3_Init+0x94>)
 80024ca:	226b      	movs	r2, #107	; 0x6b
 80024cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <MX_TIM3_Init+0x94>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <MX_TIM3_Init+0x94>)
 80024d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <MX_TIM3_Init+0x94>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <MX_TIM3_Init+0x94>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024e8:	4813      	ldr	r0, [pc, #76]	; (8002538 <MX_TIM3_Init+0x94>)
 80024ea:	f004 fa42 	bl	8006972 <HAL_TIM_Base_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80024f4:	f7ff fd5a 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4619      	mov	r1, r3
 8002504:	480c      	ldr	r0, [pc, #48]	; (8002538 <MX_TIM3_Init+0x94>)
 8002506:	f005 f981 	bl	800780c <HAL_TIM_ConfigClockSource>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002510:	f7ff fd4c 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_TIM3_Init+0x94>)
 8002522:	f005 ff83 	bl	800842c <HAL_TIMEx_MasterConfigSynchronization>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800252c:	f7ff fd3e 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000052c 	.word	0x2000052c
 800253c:	40000400 	.word	0x40000400

08002540 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <MX_TIM4_Init+0x98>)
 8002560:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <MX_TIM4_Init+0x9c>)
 8002562:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 432-1;
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <MX_TIM4_Init+0x98>)
 8002566:	f240 12af 	movw	r2, #431	; 0x1af
 800256a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <MX_TIM4_Init+0x98>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <MX_TIM4_Init+0x98>)
 8002574:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002578:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <MX_TIM4_Init+0x98>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <MX_TIM4_Init+0x98>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <MX_TIM4_Init+0x98>)
 8002588:	f004 f9f3 	bl	8006972 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002592:	f7ff fd0b 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	480d      	ldr	r0, [pc, #52]	; (80025d8 <MX_TIM4_Init+0x98>)
 80025a4:	f005 f932 	bl	800780c <HAL_TIM_ConfigClockSource>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80025ae:	f7ff fcfd 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <MX_TIM4_Init+0x98>)
 80025c0:	f005 ff34 	bl	800842c <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80025ca:	f7ff fcef 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025ce:	bf00      	nop
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000494 	.word	0x20000494
 80025dc:	40000800 	.word	0x40000800

080025e0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <MX_TIM5_Init+0xa0>)
 8002600:	4a20      	ldr	r2, [pc, #128]	; (8002684 <MX_TIM5_Init+0xa4>)
 8002602:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <MX_TIM5_Init+0xa0>)
 8002606:	226c      	movs	r2, #108	; 0x6c
 8002608:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <MX_TIM5_Init+0xa0>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff - 1;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_TIM5_Init+0xa0>)
 8002612:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002616:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <MX_TIM5_Init+0xa0>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <MX_TIM5_Init+0xa0>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002624:	4816      	ldr	r0, [pc, #88]	; (8002680 <MX_TIM5_Init+0xa0>)
 8002626:	f004 fc8b 	bl	8006f40 <HAL_TIM_IC_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002630:	f7ff fcbc 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	480f      	ldr	r0, [pc, #60]	; (8002680 <MX_TIM5_Init+0xa0>)
 8002644:	f005 fef2 	bl	800842c <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800264e:	f7ff fcad 	bl	8001fac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002656:	2301      	movs	r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2200      	movs	r2, #0
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <MX_TIM5_Init+0xa0>)
 800266a:	f004 ff2a 	bl	80074c2 <HAL_TIM_IC_ConfigChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002674:	f7ff fc9a 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200004e0 	.word	0x200004e0
 8002684:	40000c00 	.word	0x40000c00

08002688 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <MX_TIM8_Init+0xac>)
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <MX_TIM8_Init+0xb0>)
 80026aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 216-1;
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <MX_TIM8_Init+0xac>)
 80026ae:	22d7      	movs	r2, #215	; 0xd7
 80026b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <MX_TIM8_Init+0xac>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <MX_TIM8_Init+0xac>)
 80026ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c0:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <MX_TIM8_Init+0xac>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <MX_TIM8_Init+0xac>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <MX_TIM8_Init+0xac>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80026d2:	4818      	ldr	r0, [pc, #96]	; (8002734 <MX_TIM8_Init+0xac>)
 80026d4:	f004 fc34 	bl	8006f40 <HAL_TIM_IC_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80026de:	f7ff fc65 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	480f      	ldr	r0, [pc, #60]	; (8002734 <MX_TIM8_Init+0xac>)
 80026f6:	f005 fe99 	bl	800842c <HAL_TIMEx_MasterConfigSynchronization>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002700:	f7ff fc54 	bl	8001fac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002708:	2301      	movs	r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	2200      	movs	r2, #0
 8002718:	4619      	mov	r1, r3
 800271a:	4806      	ldr	r0, [pc, #24]	; (8002734 <MX_TIM8_Init+0xac>)
 800271c:	f004 fed1 	bl	80074c2 <HAL_TIM_IC_ConfigChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8002726:	f7ff fc41 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000448 	.word	0x20000448
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274c:	d113      	bne.n	8002776 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_TIM_PWM_MspInit+0x44>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <HAL_TIM_PWM_MspInit+0x44>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_TIM_PWM_MspInit+0x44>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	201c      	movs	r0, #28
 800276c:	f001 f9c9 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002770:	201c      	movs	r0, #28
 8002772:	f001 f9e2 	bl	8003b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <HAL_TIM_Base_MspInit+0x78>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d114      	bne.n	80027c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_TIM_Base_MspInit+0x7c>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_TIM_Base_MspInit+0x7c>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_TIM_Base_MspInit+0x7c>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	201d      	movs	r0, #29
 80027b4:	f001 f9a5 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027b8:	201d      	movs	r0, #29
 80027ba:	f001 f9be 	bl	8003b3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027be:	e018      	b.n	80027f2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <HAL_TIM_Base_MspInit+0x80>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d113      	bne.n	80027f2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_TIM_Base_MspInit+0x7c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_TIM_Base_MspInit+0x7c>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_TIM_Base_MspInit+0x7c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	201e      	movs	r0, #30
 80027e8:	f001 f98b 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027ec:	201e      	movs	r0, #30
 80027ee:	f001 f9a4 	bl	8003b3a <HAL_NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40000400 	.word	0x40000400
 8002800:	40023800 	.word	0x40023800
 8002804:	40000800 	.word	0x40000800

08002808 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a32      	ldr	r2, [pc, #200]	; (80028f0 <HAL_TIM_IC_MspInit+0xe8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d128      	bne.n	800287c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800282a:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800285a:	2301      	movs	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800286a:	2302      	movs	r3, #2
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	f107 031c 	add.w	r3, r7, #28
 8002872:	4619      	mov	r1, r3
 8002874:	4820      	ldr	r0, [pc, #128]	; (80028f8 <HAL_TIM_IC_MspInit+0xf0>)
 8002876:	f001 fd05 	bl	8004284 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800287a:	e034      	b.n	80028e6 <HAL_TIM_IC_MspInit+0xde>
  else if(tim_icHandle->Instance==TIM8)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_TIM_IC_MspInit+0xf4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d12f      	bne.n	80028e6 <HAL_TIM_IC_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_TIM_IC_MspInit+0xec>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028b6:	2340      	movs	r3, #64	; 0x40
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80028c6:	2303      	movs	r3, #3
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	4619      	mov	r1, r3
 80028d0:	480b      	ldr	r0, [pc, #44]	; (8002900 <HAL_TIM_IC_MspInit+0xf8>)
 80028d2:	f001 fcd7 	bl	8004284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	202e      	movs	r0, #46	; 0x2e
 80028dc:	f001 f911 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80028e0:	202e      	movs	r0, #46	; 0x2e
 80028e2:	f001 f92a 	bl	8003b3a <HAL_NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3730      	adds	r7, #48	; 0x30
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40010400 	.word	0x40010400
 8002900:	40020800 	.word	0x40020800

08002904 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d11b      	bne.n	800295e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_TIM_MspPostInit+0x64>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_TIM_MspPostInit+0x64>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_TIM_MspPostInit+0x64>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_Pin;
 800293e:	2320      	movs	r3, #32
 8002940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	4619      	mov	r1, r3
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <HAL_TIM_MspPostInit+0x68>)
 800295a:	f001 fc93 	bl	8004284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800295e:	bf00      	nop
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40020000 	.word	0x40020000

08002970 <uart_tx>:
/**
 * @brief Transmitting data through UART to dedicated app.
 * @param[in] huart3 : UART3 handler
 * @return None
 */
void uart_tx(UART_HandleTypeDef *huart3){
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af02      	add	r7, sp, #8
 8002976:	6078      	str	r0, [r7, #4]
	if(d >= 10.0){
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <uart_tx+0x80>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298a:	db16      	blt.n	80029ba <uart_tx+0x4a>
		 int n = sprintf(msg, "%.02f, %d", d, sp);
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <uart_tx+0x80>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fdf9 	bl	8000588 <__aeabi_f2d>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4916      	ldr	r1, [pc, #88]	; (80029f4 <uart_tx+0x84>)
 800299c:	6809      	ldr	r1, [r1, #0]
 800299e:	9100      	str	r1, [sp, #0]
 80029a0:	4915      	ldr	r1, [pc, #84]	; (80029f8 <uart_tx+0x88>)
 80029a2:	4816      	ldr	r0, [pc, #88]	; (80029fc <uart_tx+0x8c>)
 80029a4:	f007 fd98 	bl	800a4d8 <siprintf>
 80029a8:	60b8      	str	r0, [r7, #8]
		 HAL_UART_Transmit_IT(huart3, (uint8_t*)msg,n);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	4912      	ldr	r1, [pc, #72]	; (80029fc <uart_tx+0x8c>)
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f005 fe34 	bl	8008620 <HAL_UART_Transmit_IT>
		else{
			 int n = sprintf(msg, "0%.02f, %d", d, sp);
			 HAL_UART_Transmit_IT(huart3, (uint8_t*)msg,n);

		}
}
 80029b8:	e015      	b.n	80029e6 <uart_tx+0x76>
			 int n = sprintf(msg, "0%.02f, %d", d, sp);
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <uart_tx+0x80>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fde2 	bl	8000588 <__aeabi_f2d>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	490a      	ldr	r1, [pc, #40]	; (80029f4 <uart_tx+0x84>)
 80029ca:	6809      	ldr	r1, [r1, #0]
 80029cc:	9100      	str	r1, [sp, #0]
 80029ce:	490c      	ldr	r1, [pc, #48]	; (8002a00 <uart_tx+0x90>)
 80029d0:	480a      	ldr	r0, [pc, #40]	; (80029fc <uart_tx+0x8c>)
 80029d2:	f007 fd81 	bl	800a4d8 <siprintf>
 80029d6:	60f8      	str	r0, [r7, #12]
			 HAL_UART_Transmit_IT(huart3, (uint8_t*)msg,n);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4907      	ldr	r1, [pc, #28]	; (80029fc <uart_tx+0x8c>)
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f005 fe1d 	bl	8008620 <HAL_UART_Transmit_IT>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000026c 	.word	0x2000026c
 80029f4:	20000000 	.word	0x20000000
 80029f8:	0800e8c0 	.word	0x0800e8c0
 80029fc:	2000039c 	.word	0x2000039c
 8002a00:	0800e8cc 	.word	0x0800e8cc
 8002a04:	00000000 	.word	0x00000000

08002a08 <led_routine>:
 * @brief LED control
 * @note green (<0.1% error) blue (0.3 - 0.5% error) red (>0.5% error)
 * @param[in] none
 * @return None
 */
void led_routine(){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0

	  if(fabs(error) <= 0.3){
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <led_routine+0x108>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	eef0 7ae7 	vabs.f32	s15, s15
 8002a16:	ee17 0a90 	vmov	r0, s15
 8002a1a:	f7fd fdb5 	bl	8000588 <__aeabi_f2d>
 8002a1e:	a336      	add	r3, pc, #216	; (adr r3, 8002af8 <led_routine+0xf0>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fe f884 	bl	8000b30 <__aeabi_dcmple>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00f      	beq.n	8002a4e <led_routine+0x46>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2101      	movs	r1, #1
 8002a32:	4838      	ldr	r0, [pc, #224]	; (8002b14 <led_routine+0x10c>)
 8002a34:	f001 fdd2 	bl	80045dc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2108      	movs	r1, #8
 8002a3c:	4835      	ldr	r0, [pc, #212]	; (8002b14 <led_routine+0x10c>)
 8002a3e:	f001 fdcd 	bl	80045dc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8002a42:	2201      	movs	r2, #1
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	4834      	ldr	r0, [pc, #208]	; (8002b18 <led_routine+0x110>)
 8002a48:	f001 fdc8 	bl	80045dc <HAL_GPIO_WritePin>
	  else	  if( fabs(error) > 0.6){
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
	  	}
}
 8002a4c:	e052      	b.n	8002af4 <led_routine+0xec>
	  else if( fabs(error) > 0.31 && fabs(error) < 0.6){
 8002a4e:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <led_routine+0x108>)
 8002a50:	edd3 7a00 	vldr	s15, [r3]
 8002a54:	eef0 7ae7 	vabs.f32	s15, s15
 8002a58:	ee17 0a90 	vmov	r0, s15
 8002a5c:	f7fd fd94 	bl	8000588 <__aeabi_f2d>
 8002a60:	a327      	add	r3, pc, #156	; (adr r3, 8002b00 <led_routine+0xf8>)
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	f7fe f877 	bl	8000b58 <__aeabi_dcmpgt>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <led_routine+0xaa>
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <led_routine+0x108>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	eef0 7ae7 	vabs.f32	s15, s15
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd83 	bl	8000588 <__aeabi_f2d>
 8002a82:	a321      	add	r3, pc, #132	; (adr r3, 8002b08 <led_routine+0x100>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fe f848 	bl	8000b1c <__aeabi_dcmplt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00f      	beq.n	8002ab2 <led_routine+0xaa>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2101      	movs	r1, #1
 8002a96:	481f      	ldr	r0, [pc, #124]	; (8002b14 <led_routine+0x10c>)
 8002a98:	f001 fda0 	bl	80045dc <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2108      	movs	r1, #8
 8002aa0:	481c      	ldr	r0, [pc, #112]	; (8002b14 <led_routine+0x10c>)
 8002aa2:	f001 fd9b 	bl	80045dc <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	481b      	ldr	r0, [pc, #108]	; (8002b18 <led_routine+0x110>)
 8002aac:	f001 fd96 	bl	80045dc <HAL_GPIO_WritePin>
}
 8002ab0:	e020      	b.n	8002af4 <led_routine+0xec>
	  else	  if( fabs(error) > 0.6){
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <led_routine+0x108>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	eef0 7ae7 	vabs.f32	s15, s15
 8002abc:	ee17 0a90 	vmov	r0, s15
 8002ac0:	f7fd fd62 	bl	8000588 <__aeabi_f2d>
 8002ac4:	a310      	add	r3, pc, #64	; (adr r3, 8002b08 <led_routine+0x100>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fe f845 	bl	8000b58 <__aeabi_dcmpgt>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d100      	bne.n	8002ad6 <led_routine+0xce>
}
 8002ad4:	e00e      	b.n	8002af4 <led_routine+0xec>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2101      	movs	r1, #1
 8002ada:	480e      	ldr	r0, [pc, #56]	; (8002b14 <led_routine+0x10c>)
 8002adc:	f001 fd7e 	bl	80045dc <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2108      	movs	r1, #8
 8002ae4:	480b      	ldr	r0, [pc, #44]	; (8002b14 <led_routine+0x10c>)
 8002ae6:	f001 fd79 	bl	80045dc <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	480a      	ldr	r0, [pc, #40]	; (8002b18 <led_routine+0x110>)
 8002af0:	f001 fd74 	bl	80045dc <HAL_GPIO_WritePin>
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	33333333 	.word	0x33333333
 8002afc:	3fd33333 	.word	0x3fd33333
 8002b00:	3d70a3d7 	.word	0x3d70a3d7
 8002b04:	3fd3d70a 	.word	0x3fd3d70a
 8002b08:	33333333 	.word	0x33333333
 8002b0c:	3fe33333 	.word	0x3fe33333
 8002b10:	20000268 	.word	0x20000268
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00

08002b1c <reset_beam_position>:
 * @note Sets angle of servo to 0 degrees - default position
 * @param[in] htim2 : timer handler for servo
 * @param[in] htim3 : timer handler for PID control algorithm
 * @return None
 */
void reset_beam_position(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim3);
 8002b26:	6838      	ldr	r0, [r7, #0]
 8002b28:	f004 f88a 	bl	8006c40 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <reset_beam_position+0x28>)
 8002b30:	f001 fd6d 	bl	800460e <HAL_GPIO_TogglePin>
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 73);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2249      	movs	r2, #73	; 0x49
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40020400 	.word	0x40020400

08002b48 <lcd_routine>:
 * @brief Prints data on LCD display
 * @note printing real-time position and current setpoint
 * @param[in] hlcd1 : lcd handler
 * @return None
 */
void lcd_routine(LCD_HandleTypeDef* hlcd1){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	  sprintf(pos_dist, "%.02f", d);
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <lcd_routine+0x78>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fd17 	bl	8000588 <__aeabi_f2d>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4919      	ldr	r1, [pc, #100]	; (8002bc4 <lcd_routine+0x7c>)
 8002b60:	4819      	ldr	r0, [pc, #100]	; (8002bc8 <lcd_routine+0x80>)
 8002b62:	f007 fcb9 	bl	800a4d8 <siprintf>
	  sprintf(duty_print, "%lu", duty_val);
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <lcd_routine+0x84>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4918      	ldr	r1, [pc, #96]	; (8002bd0 <lcd_routine+0x88>)
 8002b6e:	4819      	ldr	r0, [pc, #100]	; (8002bd4 <lcd_routine+0x8c>)
 8002b70:	f007 fcb2 	bl	800a4d8 <siprintf>
	  sprintf(sp_str, "%d", sp);
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <lcd_routine+0x90>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4918      	ldr	r1, [pc, #96]	; (8002bdc <lcd_routine+0x94>)
 8002b7c:	4818      	ldr	r0, [pc, #96]	; (8002be0 <lcd_routine+0x98>)
 8002b7e:	f007 fcab 	bl	800a4d8 <siprintf>
	  LCD_SetCursor(hlcd1, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff f872 	bl	8001c70 <LCD_SetCursor>
	  LCD_printStr(hlcd1, "DISTANCE: ");
 8002b8c:	4915      	ldr	r1, [pc, #84]	; (8002be4 <lcd_routine+0x9c>)
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff f84f 	bl	8001c32 <LCD_printStr>
	  LCD_printStr(hlcd1, pos_dist);
 8002b94:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <lcd_routine+0x80>)
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff f84b 	bl	8001c32 <LCD_printStr>
	  //LCD_printStr(hlcd1, "cm");
	  LCD_SetCursor(hlcd1, 1, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff f865 	bl	8001c70 <LCD_SetCursor>
	  LCD_printStr(hlcd1, "SETPOINT: ");
 8002ba6:	4910      	ldr	r1, [pc, #64]	; (8002be8 <lcd_routine+0xa0>)
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff f842 	bl	8001c32 <LCD_printStr>
	  LCD_printStr(hlcd1, sp_str);
 8002bae:	490c      	ldr	r1, [pc, #48]	; (8002be0 <lcd_routine+0x98>)
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff f83e 	bl	8001c32 <LCD_printStr>

}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000026c 	.word	0x2000026c
 8002bc4:	0800e8d8 	.word	0x0800e8d8
 8002bc8:	20000388 	.word	0x20000388
 8002bcc:	20000260 	.word	0x20000260
 8002bd0:	0800e8e0 	.word	0x0800e8e0
 8002bd4:	200003d0 	.word	0x200003d0
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	0800e8e4 	.word	0x0800e8e4
 8002be0:	200003e0 	.word	0x200003e0
 8002be4:	0800e8e8 	.word	0x0800e8e8
 8002be8:	0800e8f4 	.word	0x0800e8f4

08002bec <ADC_SETPOINT>:
 * @brief Reading ADC register value
 * @note reading ADC register value and converting it into setpoint value
 * @param[in] hadc : adc handler
 * @return setpoint value in [cm]
 */
int ADC_SETPOINT(ADC_HandleTypeDef* hadc){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC1){
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a11      	ldr	r2, [pc, #68]	; (8002c40 <ADC_SETPOINT+0x54>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d110      	bne.n	8002c20 <ADC_SETPOINT+0x34>

	 HAL_ADC_Start(&hadc1);
 8002bfe:	4811      	ldr	r0, [pc, #68]	; (8002c44 <ADC_SETPOINT+0x58>)
 8002c00:	f000 f990 	bl	8002f24 <HAL_ADC_Start>

	 if(HAL_ADC_PollForConversion(&hadc1, 500) == HAL_OK){
 8002c04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c08:	480e      	ldr	r0, [pc, #56]	; (8002c44 <ADC_SETPOINT+0x58>)
 8002c0a:	f000 fa59 	bl	80030c0 <HAL_ADC_PollForConversion>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <ADC_SETPOINT+0x34>
			sample_in = HAL_ADC_GetValue(&hadc1);
 8002c14:	480b      	ldr	r0, [pc, #44]	; (8002c44 <ADC_SETPOINT+0x58>)
 8002c16:	f000 fc1f 	bl	8003458 <HAL_ADC_GetValue>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <ADC_SETPOINT+0x5c>)
 8002c1e:	6013      	str	r3, [r2, #0]
	  }
	}

	return abs((sample_in/100) - 20)+10;
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <ADC_SETPOINT+0x5c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <ADC_SETPOINT+0x60>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	3b14      	subs	r3, #20
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bfb8      	it	lt
 8002c32:	425b      	neglt	r3, r3
 8002c34:	330a      	adds	r3, #10
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40012000 	.word	0x40012000
 8002c44:	20000294 	.word	0x20000294
 8002c48:	20000394 	.word	0x20000394
 8002c4c:	51eb851f 	.word	0x51eb851f

08002c50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c56:	4a15      	ldr	r2, [pc, #84]	; (8002cac <MX_USART3_UART_Init+0x5c>)
 8002c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c76:	220c      	movs	r2, #12
 8002c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_USART3_UART_Init+0x58>)
 8002c94:	f005 fc76 	bl	8008584 <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002c9e:	f7ff f985 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200005c4 	.word	0x200005c4
 8002cac:	40004800 	.word	0x40004800

08002cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_UART_MspInit+0x8c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d130      	bne.n	8002d34 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_UART_MspInit+0x90>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_UART_MspInit+0x90>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_UART_MspInit+0x90>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_UART_MspInit+0x90>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <HAL_UART_MspInit+0x90>)
 8002cf0:	f043 0308 	orr.w	r3, r3, #8
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_UART_MspInit+0x90>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d14:	2307      	movs	r3, #7
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4809      	ldr	r0, [pc, #36]	; (8002d44 <HAL_UART_MspInit+0x94>)
 8002d20:	f001 fab0 	bl	8004284 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	2027      	movs	r0, #39	; 0x27
 8002d2a:	f000 feea 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d2e:	2027      	movs	r0, #39	; 0x27
 8002d30:	f000 ff03 	bl	8003b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40004800 	.word	0x40004800
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020c00 	.word	0x40020c00

08002d48 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d4e:	490e      	ldr	r1, [pc, #56]	; (8002d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d50:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d54:	e002      	b.n	8002d5c <LoopCopyDataInit>

08002d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5a:	3304      	adds	r3, #4

08002d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d60:	d3f9      	bcc.n	8002d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d64:	4c0b      	ldr	r4, [pc, #44]	; (8002d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d68:	e001      	b.n	8002d6e <LoopFillZerobss>

08002d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d6c:	3204      	adds	r2, #4

08002d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d72:	f7ff fb2b 	bl	80023cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d76:	f006 fd03 	bl	8009780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7a:	f7ff f819 	bl	8001db0 <main>
  bx  lr    
 8002d7e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002d80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d88:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8002d8c:	0800ee0c 	.word	0x0800ee0c
  ldr r2, =_sbss
 8002d90:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8002d94:	2000065c 	.word	0x2000065c

08002d98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d98:	e7fe      	b.n	8002d98 <CAN1_RX0_IRQHandler>

08002d9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f000 fea4 	bl	8003aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f000 f805 	bl	8002db4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002daa:	f7ff f98f 	bl	80020cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_InitTick+0x54>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_InitTick+0x58>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 febf 	bl	8003b56 <HAL_SYSTICK_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00e      	b.n	8002e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d80a      	bhi.n	8002dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de8:	2200      	movs	r2, #0
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f000 fe87 	bl	8003b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df4:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <HAL_InitTick+0x5c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000064 	.word	0x20000064
 8002e0c:	2000006c 	.word	0x2000006c
 8002e10:	20000068 	.word	0x20000068

08002e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_IncTick+0x20>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_IncTick+0x24>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <HAL_IncTick+0x24>)
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	2000006c 	.word	0x2000006c
 8002e38:	20000648 	.word	0x20000648

08002e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_GetTick+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000648 	.word	0x20000648

08002e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff ffee 	bl	8002e3c <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d005      	beq.n	8002e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_Delay+0x44>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e7a:	bf00      	nop
 8002e7c:	f7ff ffde 	bl	8002e3c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d8f7      	bhi.n	8002e7c <HAL_Delay+0x28>
  {
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000006c 	.word	0x2000006c

08002e9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e031      	b.n	8002f16 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe f908 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_ADC_Init+0x84>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fc2a 	bl	8003744 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
 8002f06:	e001      	b.n	8002f0c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	ffffeefd 	.word	0xffffeefd

08002f24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_Start+0x1a>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0ad      	b.n	800309a <HAL_ADC_Start+0x176>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d018      	beq.n	8002f86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f64:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <HAL_ADC_Start+0x184>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a50      	ldr	r2, [pc, #320]	; (80030ac <HAL_ADC_Start+0x188>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9a      	lsrs	r2, r3, #18
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f78:	e002      	b.n	8002f80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f9      	bne.n	8002f7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d175      	bne.n	8003080 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f98:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <HAL_ADC_Start+0x18c>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fce:	d106      	bne.n	8002fde <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f023 0206 	bic.w	r2, r3, #6
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
 8002fdc:	e002      	b.n	8002fe4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ff4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ff6:	4b2f      	ldr	r3, [pc, #188]	; (80030b4 <HAL_ADC_Start+0x190>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10f      	bne.n	8003022 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d143      	bne.n	8003098 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	e03a      	b.n	8003098 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <HAL_ADC_Start+0x194>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10e      	bne.n	800304a <HAL_ADC_Start+0x126>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003048:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_ADC_Start+0x190>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d120      	bne.n	8003098 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_ADC_Start+0x198>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d11b      	bne.n	8003098 <HAL_ADC_Start+0x174>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d114      	bne.n	8003098 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	e00b      	b.n	8003098 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000064 	.word	0x20000064
 80030ac:	431bde83 	.word	0x431bde83
 80030b0:	fffff8fe 	.word	0xfffff8fe
 80030b4:	40012300 	.word	0x40012300
 80030b8:	40012000 	.word	0x40012000
 80030bc:	40012200 	.word	0x40012200

080030c0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d113      	bne.n	8003106 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ec:	d10b      	bne.n	8003106 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e063      	b.n	80031ce <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003106:	f7ff fe99 	bl	8002e3c <HAL_GetTick>
 800310a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800310c:	e021      	b.n	8003152 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d01d      	beq.n	8003152 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_ADC_PollForConversion+0x6c>
 800311c:	f7ff fe8e 	bl	8002e3c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d212      	bcs.n	8003152 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d00b      	beq.n	8003152 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e03d      	b.n	80031ce <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d1d6      	bne.n	800310e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0212 	mvn.w	r2, #18
 8003168:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d123      	bne.n	80031cc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d11f      	bne.n	80031cc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b20      	cmp	r3, #32
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d049      	beq.n	80032ac <HAL_ADC_IRQHandler+0xd6>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d046      	beq.n	80032ac <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d12b      	bne.n	800329c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d127      	bne.n	800329c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003264:	2b00      	cmp	r3, #0
 8003266:	d119      	bne.n	800329c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0220 	bic.w	r2, r2, #32
 8003276:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8e8 	bl	8003472 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0212 	mvn.w	r2, #18
 80032aa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	bf0c      	ite	eq
 80032ba:	2301      	moveq	r3, #1
 80032bc:	2300      	movne	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d057      	beq.n	800338e <HAL_ADC_IRQHandler+0x1b8>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d054      	beq.n	800338e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d139      	bne.n	800337e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	d006      	beq.n	8003326 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003322:	2b00      	cmp	r3, #0
 8003324:	d12b      	bne.n	800337e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003330:	2b00      	cmp	r3, #0
 8003332:	d124      	bne.n	800337e <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11d      	bne.n	800337e <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003346:	2b00      	cmp	r3, #0
 8003348:	d119      	bne.n	800337e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003358:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fada 	bl	8003938 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 020c 	mvn.w	r2, #12
 800338c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d017      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x21a>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d014      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10d      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f850 	bl	8003486 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0201 	mvn.w	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d015      	beq.n	8003450 <HAL_ADC_IRQHandler+0x27a>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0202 	orr.w	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f06f 0220 	mvn.w	r2, #32
 800343e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f82a 	bl	800349a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f06f 0220 	mvn.w	r2, #32
 800344e:	601a      	str	r2, [r3, #0]
  }
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x1c>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e12a      	b.n	8003722 <HAL_ADC_ConfigChannel+0x272>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b09      	cmp	r3, #9
 80034da:	d93a      	bls.n	8003552 <HAL_ADC_ConfigChannel+0xa2>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e4:	d035      	beq.n	8003552 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68d9      	ldr	r1, [r3, #12]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	3b1e      	subs	r3, #30
 80034fc:	2207      	movs	r2, #7
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	400a      	ands	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a87      	ldr	r2, [pc, #540]	; (8003730 <HAL_ADC_ConfigChannel+0x280>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10a      	bne.n	800352c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68d9      	ldr	r1, [r3, #12]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	061a      	lsls	r2, r3, #24
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800352a:	e035      	b.n	8003598 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68d9      	ldr	r1, [r3, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	4603      	mov	r3, r0
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4403      	add	r3, r0
 8003544:	3b1e      	subs	r3, #30
 8003546:	409a      	lsls	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003550:	e022      	b.n	8003598 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6919      	ldr	r1, [r3, #16]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	2207      	movs	r2, #7
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43da      	mvns	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	400a      	ands	r2, r1
 8003574:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6919      	ldr	r1, [r3, #16]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	4603      	mov	r3, r0
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4403      	add	r3, r0
 800358e:	409a      	lsls	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d824      	bhi.n	80035ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	3b05      	subs	r3, #5
 80035b2:	221f      	movs	r2, #31
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43da      	mvns	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	400a      	ands	r2, r1
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4618      	mov	r0, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	3b05      	subs	r3, #5
 80035dc:	fa00 f203 	lsl.w	r2, r0, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34
 80035e8:	e04c      	b.n	8003684 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d824      	bhi.n	800363c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b23      	subs	r3, #35	; 0x23
 8003604:	221f      	movs	r2, #31
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	400a      	ands	r2, r1
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	4618      	mov	r0, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	3b23      	subs	r3, #35	; 0x23
 800362e:	fa00 f203 	lsl.w	r2, r0, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
 800363a:	e023      	b.n	8003684 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3b41      	subs	r3, #65	; 0x41
 800364e:	221f      	movs	r2, #31
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43da      	mvns	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	400a      	ands	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	4618      	mov	r0, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	3b41      	subs	r3, #65	; 0x41
 8003678:	fa00 f203 	lsl.w	r2, r0, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2a      	ldr	r2, [pc, #168]	; (8003734 <HAL_ADC_ConfigChannel+0x284>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10a      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x1f4>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003696:	d105      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <HAL_ADC_ConfigChannel+0x288>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4a26      	ldr	r2, [pc, #152]	; (8003738 <HAL_ADC_ConfigChannel+0x288>)
 800369e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a22      	ldr	r2, [pc, #136]	; (8003734 <HAL_ADC_ConfigChannel+0x284>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d109      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x212>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b12      	cmp	r3, #18
 80036b4:	d105      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_ADC_ConfigChannel+0x288>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_ADC_ConfigChannel+0x288>)
 80036bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_ADC_ConfigChannel+0x284>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d125      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x268>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <HAL_ADC_ConfigChannel+0x280>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <HAL_ADC_ConfigChannel+0x22e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b11      	cmp	r3, #17
 80036dc:	d11c      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036de:	4b16      	ldr	r3, [pc, #88]	; (8003738 <HAL_ADC_ConfigChannel+0x288>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a15      	ldr	r2, [pc, #84]	; (8003738 <HAL_ADC_ConfigChannel+0x288>)
 80036e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a10      	ldr	r2, [pc, #64]	; (8003730 <HAL_ADC_ConfigChannel+0x280>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d111      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_ADC_ConfigChannel+0x28c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_ADC_ConfigChannel+0x290>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9a      	lsrs	r2, r3, #18
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800370a:	e002      	b.n	8003712 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3b01      	subs	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f9      	bne.n	800370c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	10000012 	.word	0x10000012
 8003734:	40012000 	.word	0x40012000
 8003738:	40012300 	.word	0x40012300
 800373c:	20000064 	.word	0x20000064
 8003740:	431bde83 	.word	0x431bde83

08003744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800374c:	4b78      	ldr	r3, [pc, #480]	; (8003930 <ADC_Init+0x1ec>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a77      	ldr	r2, [pc, #476]	; (8003930 <ADC_Init+0x1ec>)
 8003752:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003756:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003758:	4b75      	ldr	r3, [pc, #468]	; (8003930 <ADC_Init+0x1ec>)
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4973      	ldr	r1, [pc, #460]	; (8003930 <ADC_Init+0x1ec>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003774:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	021a      	lsls	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003798:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6899      	ldr	r1, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	4a58      	ldr	r2, [pc, #352]	; (8003934 <ADC_Init+0x1f0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003808:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	e00f      	b.n	800383e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800382c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800383c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0202 	bic.w	r2, r2, #2
 800384c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6899      	ldr	r1, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	005a      	lsls	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01b      	beq.n	80038a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800388a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	3b01      	subs	r3, #1
 8003898:	035a      	lsls	r2, r3, #13
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	e007      	b.n	80038b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	051a      	lsls	r2, r3, #20
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6899      	ldr	r1, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038f6:	025a      	lsls	r2, r3, #9
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6899      	ldr	r1, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	029a      	lsls	r2, r3, #10
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40012300 	.word	0x40012300
 8003934:	0f000001 	.word	0x0f000001

08003938 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <__NVIC_SetPriorityGrouping+0x40>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003968:	4013      	ands	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397a:	4a04      	ldr	r2, [pc, #16]	; (800398c <__NVIC_SetPriorityGrouping+0x40>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	60d3      	str	r3, [r2, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000ed00 	.word	0xe000ed00
 8003990:	05fa0000 	.word	0x05fa0000

08003994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <__NVIC_GetPriorityGrouping+0x18>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	f003 0307 	and.w	r3, r3, #7
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	db0b      	blt.n	80039da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	4907      	ldr	r1, [pc, #28]	; (80039e8 <__NVIC_EnableIRQ+0x38>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2001      	movs	r0, #1
 80039d2:	fa00 f202 	lsl.w	r2, r0, r2
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000e100 	.word	0xe000e100

080039ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db0a      	blt.n	8003a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	490c      	ldr	r1, [pc, #48]	; (8003a38 <__NVIC_SetPriority+0x4c>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	0112      	lsls	r2, r2, #4
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a14:	e00a      	b.n	8003a2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4908      	ldr	r1, [pc, #32]	; (8003a3c <__NVIC_SetPriority+0x50>)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3b04      	subs	r3, #4
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	440b      	add	r3, r1
 8003a2a:	761a      	strb	r2, [r3, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f1c3 0307 	rsb	r3, r3, #7
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf28      	it	cs
 8003a5e:	2304      	movcs	r3, #4
 8003a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d902      	bls.n	8003a70 <NVIC_EncodePriority+0x30>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3b03      	subs	r3, #3
 8003a6e:	e000      	b.n	8003a72 <NVIC_EncodePriority+0x32>
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	401a      	ands	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a88:	f04f 31ff 	mov.w	r1, #4294967295
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43d9      	mvns	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	4313      	orrs	r3, r2
         );
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	; 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab8:	d301      	bcc.n	8003abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00f      	b.n	8003ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <SysTick_Config+0x40>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac6:	210f      	movs	r1, #15
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	f7ff ff8e 	bl	80039ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad8:	2207      	movs	r2, #7
 8003ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	e000e010 	.word	0xe000e010

08003aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff29 	bl	800394c <__NVIC_SetPriorityGrouping>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b14:	f7ff ff3e 	bl	8003994 <__NVIC_GetPriorityGrouping>
 8003b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	6978      	ldr	r0, [r7, #20]
 8003b20:	f7ff ff8e 	bl	8003a40 <NVIC_EncodePriority>
 8003b24:	4602      	mov	r2, r0
 8003b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff5d 	bl	80039ec <__NVIC_SetPriority>
}
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4603      	mov	r3, r0
 8003b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff31 	bl	80039b0 <__NVIC_EnableIRQ>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ffa2 	bl	8003aa8 <SysTick_Config>
 8003b64:	4603      	mov	r3, r0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b7c:	f7ff f95e 	bl	8002e3c <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e099      	b.n	8003cc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bac:	e00f      	b.n	8003bce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bae:	f7ff f945 	bl	8002e3c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	d908      	bls.n	8003bce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e078      	b.n	8003cc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e8      	bne.n	8003bae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4b38      	ldr	r3, [pc, #224]	; (8003cc8 <HAL_DMA_Init+0x158>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d107      	bne.n	8003c38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	4313      	orrs	r3, r2
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0307 	bic.w	r3, r3, #7
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d117      	bne.n	8003c92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fa89 	bl	800418c <DMA_CheckFifoParam>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e016      	b.n	8003cc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa40 	bl	8004120 <DMA_CalcBaseAndBitshift>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	223f      	movs	r2, #63	; 0x3f
 8003caa:	409a      	lsls	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	f010803f 	.word	0xf010803f

08003ccc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cda:	f7ff f8af 	bl	8002e3c <HAL_GetTick>
 8003cde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d008      	beq.n	8003cfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e052      	b.n	8003da4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0216 	bic.w	r2, r2, #22
 8003d0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <HAL_DMA_Abort+0x62>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0208 	bic.w	r2, r2, #8
 8003d3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d4e:	e013      	b.n	8003d78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d50:	f7ff f874 	bl	8002e3c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d90c      	bls.n	8003d78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2203      	movs	r2, #3
 8003d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e015      	b.n	8003da4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e4      	bne.n	8003d50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8a:	223f      	movs	r2, #63	; 0x3f
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d004      	beq.n	8003dca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e00c      	b.n	8003de4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2205      	movs	r2, #5
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003dfc:	4b92      	ldr	r3, [pc, #584]	; (8004048 <HAL_DMA_IRQHandler+0x258>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a92      	ldr	r2, [pc, #584]	; (800404c <HAL_DMA_IRQHandler+0x25c>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0a9b      	lsrs	r3, r3, #10
 8003e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01a      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	2208      	movs	r2, #8
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	2201      	movs	r2, #1
 8003e80:	409a      	lsls	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f043 0202 	orr.w	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	2204      	movs	r2, #4
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d012      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f043 0204 	orr.w	r2, r3, #4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	2210      	movs	r2, #16
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d043      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03c      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	2210      	movs	r2, #16
 8003eec:	409a      	lsls	r2, r3
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d018      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d108      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d024      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
 8003f1e:	e01f      	b.n	8003f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01b      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
 8003f30:	e016      	b.n	8003f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d107      	bne.n	8003f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0208 	bic.w	r2, r2, #8
 8003f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	2220      	movs	r2, #32
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 808e 	beq.w	800408e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8086 	beq.w	800408e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	2220      	movs	r2, #32
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d136      	bne.n	8004008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0216 	bic.w	r2, r2, #22
 8003fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_DMA_IRQHandler+0x1da>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0208 	bic.w	r2, r2, #8
 8003fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	223f      	movs	r2, #63	; 0x3f
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d07d      	beq.n	80040fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
        }
        return;
 8004006:	e078      	b.n	80040fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01c      	beq.n	8004050 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d108      	bne.n	8004036 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	2b00      	cmp	r3, #0
 800402a:	d030      	beq.n	800408e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
 8004034:	e02b      	b.n	800408e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d027      	beq.n	800408e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
 8004046:	e022      	b.n	800408e <HAL_DMA_IRQHandler+0x29e>
 8004048:	20000064 	.word	0x20000064
 800404c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0210 	bic.w	r2, r2, #16
 800406c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	2b00      	cmp	r3, #0
 8004094:	d032      	beq.n	80040fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2205      	movs	r2, #5
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3301      	adds	r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d307      	bcc.n	80040d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f2      	bne.n	80040ba <HAL_DMA_IRQHandler+0x2ca>
 80040d4:	e000      	b.n	80040d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
 80040f8:	e000      	b.n	80040fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80040fa:	bf00      	nop
    }
  }
}
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop

08004104 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004112:	b2db      	uxtb	r3, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	3b10      	subs	r3, #16
 8004130:	4a13      	ldr	r2, [pc, #76]	; (8004180 <DMA_CalcBaseAndBitshift+0x60>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	091b      	lsrs	r3, r3, #4
 8004138:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <DMA_CalcBaseAndBitshift+0x64>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d908      	bls.n	8004160 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <DMA_CalcBaseAndBitshift+0x68>)
 8004156:	4013      	ands	r3, r2
 8004158:	1d1a      	adds	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	659a      	str	r2, [r3, #88]	; 0x58
 800415e:	e006      	b.n	800416e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <DMA_CalcBaseAndBitshift+0x68>)
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	aaaaaaab 	.word	0xaaaaaaab
 8004184:	0800e928 	.word	0x0800e928
 8004188:	fffffc00 	.word	0xfffffc00

0800418c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11f      	bne.n	80041e6 <DMA_CheckFifoParam+0x5a>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d856      	bhi.n	800425a <DMA_CheckFifoParam+0xce>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <DMA_CheckFifoParam+0x28>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d7 	.word	0x080041d7
 80041bc:	080041c5 	.word	0x080041c5
 80041c0:	0800425b 	.word	0x0800425b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d046      	beq.n	800425e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d4:	e043      	b.n	800425e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041de:	d140      	bne.n	8004262 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e4:	e03d      	b.n	8004262 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ee:	d121      	bne.n	8004234 <DMA_CheckFifoParam+0xa8>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d837      	bhi.n	8004266 <DMA_CheckFifoParam+0xda>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <DMA_CheckFifoParam+0x70>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	08004213 	.word	0x08004213
 8004204:	0800420d 	.word	0x0800420d
 8004208:	08004225 	.word	0x08004225
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      break;
 8004210:	e030      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d025      	beq.n	800426a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004222:	e022      	b.n	800426a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800422c:	d11f      	bne.n	800426e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004232:	e01c      	b.n	800426e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d903      	bls.n	8004242 <DMA_CheckFifoParam+0xb6>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d003      	beq.n	8004248 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004240:	e018      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
      break;
 8004246:	e015      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      break;
 8004258:	e00b      	b.n	8004272 <DMA_CheckFifoParam+0xe6>
      break;
 800425a:	bf00      	nop
 800425c:	e00a      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
      break;
 800425e:	bf00      	nop
 8004260:	e008      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
      break;
 8004262:	bf00      	nop
 8004264:	e006      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
      break;
 8004266:	bf00      	nop
 8004268:	e004      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
      break;
 800426a:	bf00      	nop
 800426c:	e002      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
      break;   
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <DMA_CheckFifoParam+0xe8>
      break;
 8004272:	bf00      	nop
    }
  } 
  
  return status; 
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop

08004284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e175      	b.n	8004590 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80042a4:	2201      	movs	r2, #1
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	429a      	cmp	r2, r3
 80042be:	f040 8164 	bne.w	800458a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d00b      	beq.n	80042e2 <HAL_GPIO_Init+0x5e>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d007      	beq.n	80042e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d6:	2b11      	cmp	r3, #17
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b12      	cmp	r3, #18
 80042e0:	d130      	bne.n	8004344 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	2203      	movs	r2, #3
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004318:	2201      	movs	r2, #1
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 0201 	and.w	r2, r3, #1
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	2203      	movs	r2, #3
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x100>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b12      	cmp	r3, #18
 8004382:	d123      	bne.n	80043cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	08da      	lsrs	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3208      	adds	r2, #8
 800438c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	220f      	movs	r2, #15
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	08da      	lsrs	r2, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3208      	adds	r2, #8
 80043c6:	69b9      	ldr	r1, [r7, #24]
 80043c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0203 	and.w	r2, r3, #3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80be 	beq.w	800458a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440e:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_GPIO_Init+0x324>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	4a65      	ldr	r2, [pc, #404]	; (80045a8 <HAL_GPIO_Init+0x324>)
 8004414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004418:	6453      	str	r3, [r2, #68]	; 0x44
 800441a:	4b63      	ldr	r3, [pc, #396]	; (80045a8 <HAL_GPIO_Init+0x324>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004426:	4a61      	ldr	r2, [pc, #388]	; (80045ac <HAL_GPIO_Init+0x328>)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	3302      	adds	r3, #2
 800442e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a58      	ldr	r2, [pc, #352]	; (80045b0 <HAL_GPIO_Init+0x32c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d037      	beq.n	80044c2 <HAL_GPIO_Init+0x23e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a57      	ldr	r2, [pc, #348]	; (80045b4 <HAL_GPIO_Init+0x330>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d031      	beq.n	80044be <HAL_GPIO_Init+0x23a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a56      	ldr	r2, [pc, #344]	; (80045b8 <HAL_GPIO_Init+0x334>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02b      	beq.n	80044ba <HAL_GPIO_Init+0x236>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a55      	ldr	r2, [pc, #340]	; (80045bc <HAL_GPIO_Init+0x338>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d025      	beq.n	80044b6 <HAL_GPIO_Init+0x232>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a54      	ldr	r2, [pc, #336]	; (80045c0 <HAL_GPIO_Init+0x33c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01f      	beq.n	80044b2 <HAL_GPIO_Init+0x22e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a53      	ldr	r2, [pc, #332]	; (80045c4 <HAL_GPIO_Init+0x340>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d019      	beq.n	80044ae <HAL_GPIO_Init+0x22a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a52      	ldr	r2, [pc, #328]	; (80045c8 <HAL_GPIO_Init+0x344>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <HAL_GPIO_Init+0x226>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a51      	ldr	r2, [pc, #324]	; (80045cc <HAL_GPIO_Init+0x348>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00d      	beq.n	80044a6 <HAL_GPIO_Init+0x222>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a50      	ldr	r2, [pc, #320]	; (80045d0 <HAL_GPIO_Init+0x34c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <HAL_GPIO_Init+0x21e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a4f      	ldr	r2, [pc, #316]	; (80045d4 <HAL_GPIO_Init+0x350>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_GPIO_Init+0x21a>
 800449a:	2309      	movs	r3, #9
 800449c:	e012      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 800449e:	230a      	movs	r3, #10
 80044a0:	e010      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044a2:	2308      	movs	r3, #8
 80044a4:	e00e      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044a6:	2307      	movs	r3, #7
 80044a8:	e00c      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044aa:	2306      	movs	r3, #6
 80044ac:	e00a      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044ae:	2305      	movs	r3, #5
 80044b0:	e008      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044b2:	2304      	movs	r3, #4
 80044b4:	e006      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044b6:	2303      	movs	r3, #3
 80044b8:	e004      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e002      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_GPIO_Init+0x240>
 80044c2:	2300      	movs	r3, #0
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	f002 0203 	and.w	r2, r2, #3
 80044ca:	0092      	lsls	r2, r2, #2
 80044cc:	4093      	lsls	r3, r2
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80044d4:	4935      	ldr	r1, [pc, #212]	; (80045ac <HAL_GPIO_Init+0x328>)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	089b      	lsrs	r3, r3, #2
 80044da:	3302      	adds	r3, #2
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <HAL_GPIO_Init+0x354>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004506:	4a34      	ldr	r2, [pc, #208]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800450c:	4b32      	ldr	r3, [pc, #200]	; (80045d8 <HAL_GPIO_Init+0x354>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004530:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004536:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455a:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_GPIO_Init+0x354>)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004584:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <HAL_GPIO_Init+0x354>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3301      	adds	r3, #1
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	f67f ae86 	bls.w	80042a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	3724      	adds	r7, #36	; 0x24
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40013800 	.word	0x40013800
 80045b0:	40020000 	.word	0x40020000
 80045b4:	40020400 	.word	0x40020400
 80045b8:	40020800 	.word	0x40020800
 80045bc:	40020c00 	.word	0x40020c00
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40021400 	.word	0x40021400
 80045c8:	40021800 	.word	0x40021800
 80045cc:	40021c00 	.word	0x40021c00
 80045d0:	40022000 	.word	0x40022000
 80045d4:	40022400 	.word	0x40022400
 80045d8:	40013c00 	.word	0x40013c00

080045dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
 80045e8:	4613      	mov	r3, r2
 80045ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045ec:	787b      	ldrb	r3, [r7, #1]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045f2:	887a      	ldrh	r2, [r7, #2]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80045f8:	e003      	b.n	8004602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	041a      	lsls	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	619a      	str	r2, [r3, #24]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800460e:	b480      	push	{r7}
 8004610:	b085      	sub	sp, #20
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004620:	887a      	ldrh	r2, [r7, #2]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4013      	ands	r3, r2
 8004626:	041a      	lsls	r2, r3, #16
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	43d9      	mvns	r1, r3
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	400b      	ands	r3, r1
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	619a      	str	r2, [r3, #24]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d006      	beq.n	8004668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800465a:	4a05      	ldr	r2, [pc, #20]	; (8004670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd fb8e 	bl	8001d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40013c00 	.word	0x40013c00

08004674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07f      	b.n	8004786 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd f94e 	bl	800193c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d107      	bne.n	80046ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	e006      	b.n	80046fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d104      	bne.n	800470e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800470c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <HAL_I2C_Init+0x11c>)
 800471a:	430b      	orrs	r3, r1
 800471c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800472c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	ea42 0103 	orr.w	r1, r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	021a      	lsls	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69d9      	ldr	r1, [r3, #28]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	02008000 	.word	0x02008000

08004794 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4798      	blx	r3
  }
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_I2C_ER_IRQHandler+0x46>
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	09db      	lsrs	r3, r3, #7
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	f043 0201 	orr.w	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800480c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	0a9b      	lsrs	r3, r3, #10
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_I2C_ER_IRQHandler+0x74>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	09db      	lsrs	r3, r3, #7
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f043 0208 	orr.w	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800483a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	0a5b      	lsrs	r3, r3, #9
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_I2C_ER_IRQHandler+0xa2>
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	09db      	lsrs	r3, r3, #7
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	f043 0202 	orr.w	r2, r3, #2
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004868:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 030b 	and.w	r3, r3, #11
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fb89 	bl	8004f94 <I2C_ITError>
  }
}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	70fb      	strb	r3, [r7, #3]
 80048be:	4613      	mov	r3, r2
 80048c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <I2C_Slave_ISR_IT+0x24>
 800492a:	2302      	movs	r3, #2
 800492c:	e0ec      	b.n	8004b08 <I2C_Slave_ISR_IT+0x1fe>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <I2C_Slave_ISR_IT+0x4c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800494e:	6939      	ldr	r1, [r7, #16]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f9bf 	bl	8004cd4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04d      	beq.n	80049fe <I2C_Slave_ISR_IT+0xf4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d047      	beq.n	80049fe <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d128      	bne.n	80049ca <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b28      	cmp	r3, #40	; 0x28
 8004982:	d108      	bne.n	8004996 <I2C_Slave_ISR_IT+0x8c>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800498a:	d104      	bne.n	8004996 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800498c:	6939      	ldr	r1, [r7, #16]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 faaa 	bl	8004ee8 <I2C_ITListenCplt>
 8004994:	e032      	b.n	80049fc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b29      	cmp	r3, #41	; 0x29
 80049a0:	d10e      	bne.n	80049c0 <I2C_Slave_ISR_IT+0xb6>
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a8:	d00a      	beq.n	80049c0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2210      	movs	r2, #16
 80049b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fbe5 	bl	8005182 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f92d 	bl	8004c18 <I2C_ITSlaveSeqCplt>
 80049be:	e01d      	b.n	80049fc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2210      	movs	r2, #16
 80049c6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80049c8:	e096      	b.n	8004af8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2210      	movs	r2, #16
 80049d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <I2C_Slave_ISR_IT+0xe4>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ea:	f040 8085 	bne.w	8004af8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	4619      	mov	r1, r3
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 facd 	bl	8004f94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049fa:	e07d      	b.n	8004af8 <I2C_Slave_ISR_IT+0x1ee>
 80049fc:	e07c      	b.n	8004af8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d030      	beq.n	8004a6c <I2C_Slave_ISR_IT+0x162>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02a      	beq.n	8004a6c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d018      	beq.n	8004a52 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d14f      	bne.n	8004afc <I2C_Slave_ISR_IT+0x1f2>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a62:	d04b      	beq.n	8004afc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f8d7 	bl	8004c18 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004a6a:	e047      	b.n	8004afc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	08db      	lsrs	r3, r3, #3
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	08db      	lsrs	r3, r3, #3
 8004a7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a84:	6939      	ldr	r1, [r7, #16]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f842 	bl	8004b10 <I2C_ITAddrCplt>
 8004a8c:	e037      	b.n	8004afe <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d031      	beq.n	8004afe <I2C_Slave_ISR_IT+0x1f4>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02b      	beq.n	8004afe <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d018      	beq.n	8004ae2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	781a      	ldrb	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ae0:	e00d      	b.n	8004afe <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae8:	d002      	beq.n	8004af0 <I2C_Slave_ISR_IT+0x1e6>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f891 	bl	8004c18 <I2C_ITSlaveSeqCplt>
 8004af6:	e002      	b.n	8004afe <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004afc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b26:	2b28      	cmp	r3, #40	; 0x28
 8004b28:	d16a      	bne.n	8004c00 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b48:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b56:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b64:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d138      	bne.n	8004be0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004b6e:	897b      	ldrh	r3, [r7, #10]
 8004b70:	09db      	lsrs	r3, r3, #7
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	89bb      	ldrh	r3, [r7, #12]
 8004b76:	4053      	eors	r3, r2
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f003 0306 	and.w	r3, r3, #6
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11c      	bne.n	8004bbc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b82:	897b      	ldrh	r3, [r7, #10]
 8004b84:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d13b      	bne.n	8004c10 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bae:	89ba      	ldrh	r2, [r7, #12]
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fe7c 	bl	80048b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004bba:	e029      	b.n	8004c10 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004bbc:	893b      	ldrh	r3, [r7, #8]
 8004bbe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fb1e 	bl	8005206 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bd2:	89ba      	ldrh	r2, [r7, #12]
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fe6a 	bl	80048b2 <HAL_I2C_AddrCallback>
}
 8004bde:	e017      	b.n	8004c10 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fb0e 	bl	8005206 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bf2:	89ba      	ldrh	r2, [r7, #12]
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff fe5a 	bl	80048b2 <HAL_I2C_AddrCallback>
}
 8004bfe:	e007      	b.n	8004c10 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2208      	movs	r2, #8
 8004c06:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	0b9b      	lsrs	r3, r3, #14
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e00d      	b.n	8004c6a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	0bdb      	lsrs	r3, r3, #15
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b29      	cmp	r3, #41	; 0x29
 8004c74:	d112      	bne.n	8004c9c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2228      	movs	r2, #40	; 0x28
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2221      	movs	r2, #33	; 0x21
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c84:	2101      	movs	r1, #1
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fabd 	bl	8005206 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fdf8 	bl	800488a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c9a:	e017      	b.n	8004ccc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca6:	d111      	bne.n	8004ccc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2228      	movs	r2, #40	; 0x28
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2222      	movs	r2, #34	; 0x22
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 faa4 	bl	8005206 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff fde9 	bl	800489e <HAL_I2C_SlaveRxCpltCallback>
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b21      	cmp	r3, #33	; 0x21
 8004cfe:	d002      	beq.n	8004d06 <I2C_ITSlaveCplt+0x32>
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b29      	cmp	r3, #41	; 0x29
 8004d04:	d108      	bne.n	8004d18 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004d06:	f248 0101 	movw	r1, #32769	; 0x8001
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fa7b 	bl	8005206 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2221      	movs	r2, #33	; 0x21
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
 8004d16:	e00d      	b.n	8004d34 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b22      	cmp	r3, #34	; 0x22
 8004d1c:	d002      	beq.n	8004d24 <I2C_ITSlaveCplt+0x50>
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b2a      	cmp	r3, #42	; 0x2a
 8004d22:	d107      	bne.n	8004d34 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004d24:	f248 0102 	movw	r1, #32770	; 0x8002
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa6c 	bl	8005206 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2222      	movs	r2, #34	; 0x22
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b64      	ldr	r3, [pc, #400]	; (8004ee0 <I2C_ITSlaveCplt+0x20c>)
 8004d50:	400b      	ands	r3, r1
 8004d52:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fa14 	bl	8005182 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	0b9b      	lsrs	r3, r3, #14
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d013      	beq.n	8004d8e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d020      	beq.n	8004dc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d8c:	e018      	b.n	8004dc0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	0bdb      	lsrs	r3, r3, #15
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d012      	beq.n	8004dc0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004da8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d020      	beq.n	8004e0e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0304 	bic.w	r3, r3, #4
 8004dd2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00c      	beq.n	8004e0e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1c:	f043 0204 	orr.w	r2, r3, #4
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d010      	beq.n	8004e5c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f8a7 	bl	8004f94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b28      	cmp	r3, #40	; 0x28
 8004e50:	d141      	bne.n	8004ed6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004e52:	6979      	ldr	r1, [r7, #20]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f847 	bl	8004ee8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e5a:	e03c      	b.n	8004ed6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e64:	d014      	beq.n	8004e90 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fed6 	bl	8004c18 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <I2C_ITSlaveCplt+0x210>)
 8004e70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff fd20 	bl	80048ce <HAL_I2C_ListenCpltCallback>
}
 8004e8e:	e022      	b.n	8004ed6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b22      	cmp	r3, #34	; 0x22
 8004e9a:	d10e      	bne.n	8004eba <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fcf3 	bl	800489e <HAL_I2C_SlaveRxCpltCallback>
}
 8004eb8:	e00d      	b.n	8004ed6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fcda 	bl	800488a <HAL_I2C_SlaveTxCpltCallback>
}
 8004ed6:	bf00      	nop
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	fe00e800 	.word	0xfe00e800
 8004ee4:	ffff0000 	.word	0xffff0000

08004ee8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <I2C_ITListenCplt+0xa8>)
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d022      	beq.n	8004f66 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d012      	beq.n	8004f66 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f043 0204 	orr.w	r2, r3, #4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f66:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f94b 	bl	8005206 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2210      	movs	r2, #16
 8004f76:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fca4 	bl	80048ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	ffff0000 	.word	0xffff0000

08004f94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a5d      	ldr	r2, [pc, #372]	; (8005128 <I2C_ITError+0x194>)
 8004fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	2b28      	cmp	r3, #40	; 0x28
 8004fca:	d005      	beq.n	8004fd8 <I2C_ITError+0x44>
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b29      	cmp	r3, #41	; 0x29
 8004fd0:	d002      	beq.n	8004fd8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd6:	d10b      	bne.n	8004ff0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fd8:	2103      	movs	r1, #3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f913 	bl	8005206 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2228      	movs	r2, #40	; 0x28
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a50      	ldr	r2, [pc, #320]	; (800512c <I2C_ITError+0x198>)
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34
 8004fee:	e011      	b.n	8005014 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ff0:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f906 	bl	8005206 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b60      	cmp	r3, #96	; 0x60
 8005004:	d003      	beq.n	800500e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	d039      	beq.n	8005096 <I2C_ITError+0x102>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b11      	cmp	r3, #17
 8005026:	d002      	beq.n	800502e <I2C_ITError+0x9a>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b21      	cmp	r3, #33	; 0x21
 800502c:	d133      	bne.n	8005096 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503c:	d107      	bne.n	800504e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800504c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f856 	bl	8004104 <HAL_DMA_GetState>
 8005058:	4603      	mov	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d017      	beq.n	800508e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	4a33      	ldr	r2, [pc, #204]	; (8005130 <I2C_ITError+0x19c>)
 8005064:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fe9a 	bl	8003dac <HAL_DMA_Abort_IT>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04d      	beq.n	800511a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005088:	4610      	mov	r0, r2
 800508a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800508c:	e045      	b.n	800511a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f850 	bl	8005134 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005094:	e041      	b.n	800511a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d039      	beq.n	8005112 <I2C_ITError+0x17e>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b12      	cmp	r3, #18
 80050a2:	d002      	beq.n	80050aa <I2C_ITError+0x116>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b22      	cmp	r3, #34	; 0x22
 80050a8:	d133      	bne.n	8005112 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b8:	d107      	bne.n	80050ca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff f818 	bl	8004104 <HAL_DMA_GetState>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d017      	beq.n	800510a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	4a14      	ldr	r2, [pc, #80]	; (8005130 <I2C_ITError+0x19c>)
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fe5c 	bl	8003dac <HAL_DMA_Abort_IT>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d011      	beq.n	800511e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005104:	4610      	mov	r0, r2
 8005106:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005108:	e009      	b.n	800511e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f812 	bl	8005134 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005110:	e005      	b.n	800511e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f80e 	bl	8005134 <I2C_TreatErrorCallback>
  }
}
 8005118:	e002      	b.n	8005120 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800511a:	bf00      	nop
 800511c:	e000      	b.n	8005120 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800511e:	bf00      	nop
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	ffff0000 	.word	0xffff0000
 800512c:	0800490b 	.word	0x0800490b
 8005130:	080051cb 	.word	0x080051cb

08005134 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b60      	cmp	r3, #96	; 0x60
 8005146:	d10e      	bne.n	8005166 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff fbc9 	bl	80048f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005164:	e009      	b.n	800517a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff fbb4 	bl	80048e2 <HAL_I2C_ErrorCallback>
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d103      	bne.n	80051a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d007      	beq.n	80051be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699a      	ldr	r2, [r3, #24]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	619a      	str	r2, [r3, #24]
  }
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	2200      	movs	r2, #0
 80051e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f4:	2200      	movs	r2, #0
 80051f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ff9b 	bl	8005134 <I2C_TreatErrorCallback>
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005216:	887b      	ldrh	r3, [r7, #2]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00f      	beq.n	8005240 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005226:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005234:	2b28      	cmp	r3, #40	; 0x28
 8005236:	d003      	beq.n	8005240 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800523e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00f      	beq.n	800526a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005250:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800525e:	2b28      	cmp	r3, #40	; 0x28
 8005260:	d003      	beq.n	800526a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005268:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800526a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800526e:	2b00      	cmp	r3, #0
 8005270:	da03      	bge.n	800527a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005278:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800527a:	887b      	ldrh	r3, [r7, #2]
 800527c:	2b10      	cmp	r3, #16
 800527e:	d103      	bne.n	8005288 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005286:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	2b20      	cmp	r3, #32
 800528c:	d103      	bne.n	8005296 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f043 0320 	orr.w	r3, r3, #32
 8005294:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d103      	bne.n	80052a4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6819      	ldr	r1, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	43da      	mvns	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	400a      	ands	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d138      	bne.n	800534a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e032      	b.n	800534c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2224      	movs	r2, #36	; 0x24
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005314:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6819      	ldr	r1, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0201 	orr.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	e000      	b.n	800534c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800534a:	2302      	movs	r3, #2
  }
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b20      	cmp	r3, #32
 800536c:	d139      	bne.n	80053e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005378:	2302      	movs	r3, #2
 800537a:	e033      	b.n	80053e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2224      	movs	r2, #36	; 0x24
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
  }
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a04      	ldr	r2, [pc, #16]	; (800540c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fe:	6013      	str	r3, [r2, #0]
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40007000 	.word	0x40007000

08005410 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800541a:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005424:	6413      	str	r3, [r2, #64]	; 0x40
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005432:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800543e:	f7fd fcfd 	bl	8002e3c <HAL_GetTick>
 8005442:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005444:	e009      	b.n	800545a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005446:	f7fd fcf9 	bl	8002e3c <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005454:	d901      	bls.n	800545a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e022      	b.n	80054a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800545a:	4b14      	ldr	r3, [pc, #80]	; (80054ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005466:	d1ee      	bne.n	8005446 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005468:	4b10      	ldr	r3, [pc, #64]	; (80054ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a0f      	ldr	r2, [pc, #60]	; (80054ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800546e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005472:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005474:	f7fd fce2 	bl	8002e3c <HAL_GetTick>
 8005478:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800547a:	e009      	b.n	8005490 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800547c:	f7fd fcde 	bl	8002e3c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800548a:	d901      	bls.n	8005490 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e007      	b.n	80054a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800549c:	d1ee      	bne.n	800547c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40007000 	.word	0x40007000

080054b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80054b8:	2300      	movs	r3, #0
 80054ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e291      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8087 	beq.w	80055e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054d4:	4b96      	ldr	r3, [pc, #600]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 030c 	and.w	r3, r3, #12
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d00c      	beq.n	80054fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e0:	4b93      	ldr	r3, [pc, #588]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d112      	bne.n	8005512 <HAL_RCC_OscConfig+0x62>
 80054ec:	4b90      	ldr	r3, [pc, #576]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f8:	d10b      	bne.n	8005512 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fa:	4b8d      	ldr	r3, [pc, #564]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d06c      	beq.n	80055e0 <HAL_RCC_OscConfig+0x130>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d168      	bne.n	80055e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e26b      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x7a>
 800551c:	4b84      	ldr	r3, [pc, #528]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a83      	ldr	r2, [pc, #524]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e02e      	b.n	8005588 <HAL_RCC_OscConfig+0xd8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10c      	bne.n	800554c <HAL_RCC_OscConfig+0x9c>
 8005532:	4b7f      	ldr	r3, [pc, #508]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a7e      	ldr	r2, [pc, #504]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4b7c      	ldr	r3, [pc, #496]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a7b      	ldr	r2, [pc, #492]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e01d      	b.n	8005588 <HAL_RCC_OscConfig+0xd8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0xc0>
 8005556:	4b76      	ldr	r3, [pc, #472]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a75      	ldr	r2, [pc, #468]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800555c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b73      	ldr	r3, [pc, #460]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a72      	ldr	r2, [pc, #456]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0xd8>
 8005570:	4b6f      	ldr	r3, [pc, #444]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a6e      	ldr	r2, [pc, #440]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b6c      	ldr	r3, [pc, #432]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a6b      	ldr	r2, [pc, #428]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fd fc54 	bl	8002e3c <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005598:	f7fd fc50 	bl	8002e3c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e21f      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	4b61      	ldr	r3, [pc, #388]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0xe8>
 80055b6:	e014      	b.n	80055e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fd fc40 	bl	8002e3c <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c0:	f7fd fc3c 	bl	8002e3c <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e20b      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d2:	4b57      	ldr	r3, [pc, #348]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x110>
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d069      	beq.n	80056c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055ee:	4b50      	ldr	r3, [pc, #320]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fa:	4b4d      	ldr	r3, [pc, #308]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b08      	cmp	r3, #8
 8005604:	d11c      	bne.n	8005640 <HAL_RCC_OscConfig+0x190>
 8005606:	4b4a      	ldr	r3, [pc, #296]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d116      	bne.n	8005640 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005612:	4b47      	ldr	r3, [pc, #284]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_RCC_OscConfig+0x17a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d001      	beq.n	800562a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e1df      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562a:	4b41      	ldr	r3, [pc, #260]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	493d      	ldr	r1, [pc, #244]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800563a:	4313      	orrs	r3, r2
 800563c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563e:	e040      	b.n	80056c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d023      	beq.n	8005690 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005648:	4b39      	ldr	r3, [pc, #228]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a38      	ldr	r2, [pc, #224]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fd fbf2 	bl	8002e3c <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565c:	f7fd fbee 	bl	8002e3c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e1bd      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566e:	4b30      	ldr	r3, [pc, #192]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4929      	ldr	r1, [pc, #164]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
 800568e:	e018      	b.n	80056c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005690:	4b27      	ldr	r3, [pc, #156]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a26      	ldr	r2, [pc, #152]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fd fbce 	bl	8002e3c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a4:	f7fd fbca 	bl	8002e3c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e199      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b6:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d038      	beq.n	8005740 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d019      	beq.n	800570a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d6:	4b16      	ldr	r3, [pc, #88]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80056d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e2:	f7fd fbab 	bl	8002e3c <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ea:	f7fd fba7 	bl	8002e3c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e176      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 80056fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_OscConfig+0x23a>
 8005708:	e01a      	b.n	8005740 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 800570c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570e:	4a08      	ldr	r2, [pc, #32]	; (8005730 <HAL_RCC_OscConfig+0x280>)
 8005710:	f023 0301 	bic.w	r3, r3, #1
 8005714:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005716:	f7fd fb91 	bl	8002e3c <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800571e:	f7fd fb8d 	bl	8002e3c <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d903      	bls.n	8005734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e15c      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
 8005730:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005734:	4b91      	ldr	r3, [pc, #580]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ee      	bne.n	800571e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80a4 	beq.w	8005896 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574e:	4b8b      	ldr	r3, [pc, #556]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10d      	bne.n	8005776 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800575a:	4b88      	ldr	r3, [pc, #544]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	4a87      	ldr	r2, [pc, #540]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005764:	6413      	str	r3, [r2, #64]	; 0x40
 8005766:	4b85      	ldr	r3, [pc, #532]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005776:	4b82      	ldr	r3, [pc, #520]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d118      	bne.n	80057b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005782:	4b7f      	ldr	r3, [pc, #508]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a7e      	ldr	r2, [pc, #504]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800578e:	f7fd fb55 	bl	8002e3c <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005796:	f7fd fb51 	bl	8002e3c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b64      	cmp	r3, #100	; 0x64
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e120      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a8:	4b75      	ldr	r3, [pc, #468]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x31a>
 80057bc:	4b6f      	ldr	r3, [pc, #444]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	4a6e      	ldr	r2, [pc, #440]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6713      	str	r3, [r2, #112]	; 0x70
 80057c8:	e02d      	b.n	8005826 <HAL_RCC_OscConfig+0x376>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0x33c>
 80057d2:	4b6a      	ldr	r3, [pc, #424]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	4a69      	ldr	r2, [pc, #420]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	6713      	str	r3, [r2, #112]	; 0x70
 80057de:	4b67      	ldr	r3, [pc, #412]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a66      	ldr	r2, [pc, #408]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80057e4:	f023 0304 	bic.w	r3, r3, #4
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ea:	e01c      	b.n	8005826 <HAL_RCC_OscConfig+0x376>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d10c      	bne.n	800580e <HAL_RCC_OscConfig+0x35e>
 80057f4:	4b61      	ldr	r3, [pc, #388]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a60      	ldr	r2, [pc, #384]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80057fa:	f043 0304 	orr.w	r3, r3, #4
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	4b5e      	ldr	r3, [pc, #376]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a5d      	ldr	r2, [pc, #372]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
 800580c:	e00b      	b.n	8005826 <HAL_RCC_OscConfig+0x376>
 800580e:	4b5b      	ldr	r3, [pc, #364]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a5a      	ldr	r2, [pc, #360]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
 800581a:	4b58      	ldr	r3, [pc, #352]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	4a57      	ldr	r2, [pc, #348]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d015      	beq.n	800585a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582e:	f7fd fb05 	bl	8002e3c <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005834:	e00a      	b.n	800584c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f7fd fb01 	bl	8002e3c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e0ce      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584c:	4b4b      	ldr	r3, [pc, #300]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ee      	beq.n	8005836 <HAL_RCC_OscConfig+0x386>
 8005858:	e014      	b.n	8005884 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fd faef 	bl	8002e3c <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005860:	e00a      	b.n	8005878 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fd faeb 	bl	8002e3c <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e0b8      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005878:	4b40      	ldr	r3, [pc, #256]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1ee      	bne.n	8005862 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588a:	4b3c      	ldr	r3, [pc, #240]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	4a3b      	ldr	r2, [pc, #236]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a4 	beq.w	80059e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a0:	4b36      	ldr	r3, [pc, #216]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 030c 	and.w	r3, r3, #12
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d06b      	beq.n	8005984 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d149      	bne.n	8005948 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b4:	4b31      	ldr	r3, [pc, #196]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a30      	ldr	r2, [pc, #192]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80058ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fd fabc 	bl	8002e3c <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c8:	f7fd fab8 	bl	8002e3c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e087      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058da:	4b28      	ldr	r3, [pc, #160]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69da      	ldr	r2, [r3, #28]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	019b      	lsls	r3, r3, #6
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	3b01      	subs	r3, #1
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	061b      	lsls	r3, r3, #24
 800590a:	4313      	orrs	r3, r2
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800590e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005912:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005914:	4b19      	ldr	r3, [pc, #100]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800591a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800591e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005920:	f7fd fa8c 	bl	8002e3c <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005928:	f7fd fa88 	bl	8002e3c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e057      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593a:	4b10      	ldr	r3, [pc, #64]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x478>
 8005946:	e04f      	b.n	80059e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a0b      	ldr	r2, [pc, #44]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 800594e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005954:	f7fd fa72 	bl	8002e3c <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595c:	f7fd fa6e 	bl	8002e3c <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e03d      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596e:	4b03      	ldr	r3, [pc, #12]	; (800597c <HAL_RCC_OscConfig+0x4cc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x4ac>
 800597a:	e035      	b.n	80059e8 <HAL_RCC_OscConfig+0x538>
 800597c:	40023800 	.word	0x40023800
 8005980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005984:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <HAL_RCC_OscConfig+0x544>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d028      	beq.n	80059e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800599c:	429a      	cmp	r2, r3
 800599e:	d121      	bne.n	80059e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d11a      	bne.n	80059e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059b4:	4013      	ands	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059bc:	4293      	cmp	r3, r2
 80059be:	d111      	bne.n	80059e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	085b      	lsrs	r3, r3, #1
 80059cc:	3b01      	subs	r3, #1
 80059ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d107      	bne.n	80059e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40023800 	.word	0x40023800

080059f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0d0      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a10:	4b6a      	ldr	r3, [pc, #424]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d910      	bls.n	8005a40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b67      	ldr	r3, [pc, #412]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 020f 	bic.w	r2, r3, #15
 8005a26:	4965      	ldr	r1, [pc, #404]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2e:	4b63      	ldr	r3, [pc, #396]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0b8      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d020      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a58:	4b59      	ldr	r3, [pc, #356]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a58      	ldr	r2, [pc, #352]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a70:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4a52      	ldr	r2, [pc, #328]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a7c:	4b50      	ldr	r3, [pc, #320]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	494d      	ldr	r1, [pc, #308]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d040      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d107      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	4b47      	ldr	r3, [pc, #284]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d115      	bne.n	8005ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e07f      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aba:	4b41      	ldr	r3, [pc, #260]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e073      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aca:	4b3d      	ldr	r3, [pc, #244]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e06b      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ada:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f023 0203 	bic.w	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	4936      	ldr	r1, [pc, #216]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fd f9a6 	bl	8002e3c <HAL_GetTick>
 8005af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af2:	e00a      	b.n	8005b0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af4:	f7fd f9a2 	bl	8002e3c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e053      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0a:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 020c 	and.w	r2, r3, #12
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d1eb      	bne.n	8005af4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b1c:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d210      	bcs.n	8005b4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f023 020f 	bic.w	r2, r3, #15
 8005b32:	4922      	ldr	r1, [pc, #136]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <HAL_RCC_ClockConfig+0x1c4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e032      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b58:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4916      	ldr	r1, [pc, #88]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b76:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	490e      	ldr	r1, [pc, #56]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b8a:	f000 f821 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	490a      	ldr	r1, [pc, #40]	; (8005bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8005b9c:	5ccb      	ldrb	r3, [r1, r3]
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8005ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCC_ClockConfig+0x1d4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fd f902 	bl	8002db4 <HAL_InitTick>

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023c00 	.word	0x40023c00
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	0800e910 	.word	0x0800e910
 8005bc8:	20000064 	.word	0x20000064
 8005bcc:	20000068 	.word	0x20000068

08005bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	607b      	str	r3, [r7, #4]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	2300      	movs	r3, #0
 8005be2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005be8:	4b67      	ldr	r3, [pc, #412]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 030c 	and.w	r3, r3, #12
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d00d      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x40>
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	f200 80bd 	bhi.w	8005d74 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x34>
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d003      	beq.n	8005c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c02:	e0b7      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c04:	4b61      	ldr	r3, [pc, #388]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c06:	60bb      	str	r3, [r7, #8]
      break;
 8005c08:	e0b7      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c0a:	4b61      	ldr	r3, [pc, #388]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005c0c:	60bb      	str	r3, [r7, #8]
      break;
 8005c0e:	e0b4      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c10:	4b5d      	ldr	r3, [pc, #372]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c18:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c1a:	4b5b      	ldr	r3, [pc, #364]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d04d      	beq.n	8005cc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c26:	4b58      	ldr	r3, [pc, #352]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	099b      	lsrs	r3, r3, #6
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c36:	f04f 0100 	mov.w	r1, #0
 8005c3a:	ea02 0800 	and.w	r8, r2, r0
 8005c3e:	ea03 0901 	and.w	r9, r3, r1
 8005c42:	4640      	mov	r0, r8
 8005c44:	4649      	mov	r1, r9
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	014b      	lsls	r3, r1, #5
 8005c50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c54:	0142      	lsls	r2, r0, #5
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	ebb0 0008 	subs.w	r0, r0, r8
 8005c5e:	eb61 0109 	sbc.w	r1, r1, r9
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	018b      	lsls	r3, r1, #6
 8005c6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c70:	0182      	lsls	r2, r0, #6
 8005c72:	1a12      	subs	r2, r2, r0
 8005c74:	eb63 0301 	sbc.w	r3, r3, r1
 8005c78:	f04f 0000 	mov.w	r0, #0
 8005c7c:	f04f 0100 	mov.w	r1, #0
 8005c80:	00d9      	lsls	r1, r3, #3
 8005c82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c86:	00d0      	lsls	r0, r2, #3
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	eb12 0208 	adds.w	r2, r2, r8
 8005c90:	eb43 0309 	adc.w	r3, r3, r9
 8005c94:	f04f 0000 	mov.w	r0, #0
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	0259      	lsls	r1, r3, #9
 8005c9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ca2:	0250      	lsls	r0, r2, #9
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	f7fb f808 	bl	8000cc8 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e04a      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc2:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	099b      	lsrs	r3, r3, #6
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	ea02 0400 	and.w	r4, r2, r0
 8005cda:	ea03 0501 	and.w	r5, r3, r1
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	014b      	lsls	r3, r1, #5
 8005cec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cf0:	0142      	lsls	r2, r0, #5
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	1b00      	subs	r0, r0, r4
 8005cf8:	eb61 0105 	sbc.w	r1, r1, r5
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	018b      	lsls	r3, r1, #6
 8005d06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d0a:	0182      	lsls	r2, r0, #6
 8005d0c:	1a12      	subs	r2, r2, r0
 8005d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f04f 0100 	mov.w	r1, #0
 8005d1a:	00d9      	lsls	r1, r3, #3
 8005d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d20:	00d0      	lsls	r0, r2, #3
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	1912      	adds	r2, r2, r4
 8005d28:	eb45 0303 	adc.w	r3, r5, r3
 8005d2c:	f04f 0000 	mov.w	r0, #0
 8005d30:	f04f 0100 	mov.w	r1, #0
 8005d34:	0299      	lsls	r1, r3, #10
 8005d36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d3a:	0290      	lsls	r0, r2, #10
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	f7fa ffbc 	bl	8000cc8 <__aeabi_uldivmod>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4613      	mov	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	3301      	adds	r3, #1
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	60bb      	str	r3, [r7, #8]
      break;
 8005d72:	e002      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d76:	60bb      	str	r3, [r7, #8]
      break;
 8005d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d86:	bf00      	nop
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	007a1200 	.word	0x007a1200

08005d94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000064 	.word	0x20000064

08005dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005db0:	f7ff fff0 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005db4:	4602      	mov	r2, r0
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	0a9b      	lsrs	r3, r3, #10
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	4903      	ldr	r1, [pc, #12]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dc2:	5ccb      	ldrb	r3, [r1, r3]
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	0800e920 	.word	0x0800e920

08005dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dd8:	f7ff ffdc 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	0b5b      	lsrs	r3, r3, #13
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	4903      	ldr	r1, [pc, #12]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40023800 	.word	0x40023800
 8005df8:	0800e920 	.word	0x0800e920

08005dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d012      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e24:	4b69      	ldr	r3, [pc, #420]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4a68      	ldr	r2, [pc, #416]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e2e:	6093      	str	r3, [r2, #8]
 8005e30:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	4964      	ldr	r1, [pc, #400]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005e46:	2301      	movs	r3, #1
 8005e48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d017      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e56:	4b5d      	ldr	r3, [pc, #372]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e64:	4959      	ldr	r1, [pc, #356]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e74:	d101      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005e76:	2301      	movs	r3, #1
 8005e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005e82:	2301      	movs	r3, #1
 8005e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e92:	4b4e      	ldr	r3, [pc, #312]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	494a      	ldr	r1, [pc, #296]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 808b 	beq.w	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ee0:	4b3a      	ldr	r3, [pc, #232]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	4a39      	ldr	r2, [pc, #228]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eea:	6413      	str	r3, [r2, #64]	; 0x40
 8005eec:	4b37      	ldr	r3, [pc, #220]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ef8:	4b35      	ldr	r3, [pc, #212]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a34      	ldr	r2, [pc, #208]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f04:	f7fc ff9a 	bl	8002e3c <HAL_GetTick>
 8005f08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0c:	f7fc ff96 	bl	8002e3c <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	; 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e357      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f1e:	4b2c      	ldr	r3, [pc, #176]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f2a:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d035      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d02e      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f48:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f52:	4b1e      	ldr	r3, [pc, #120]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f5e:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f62:	4a1a      	ldr	r2, [pc, #104]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f6a:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f70:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d114      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fc ff5e 	bl	8002e3c <HAL_GetTick>
 8005f80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f82:	e00a      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f84:	f7fc ff5a 	bl	8002e3c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e319      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0ee      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb2:	d111      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fc2:	400b      	ands	r3, r1
 8005fc4:	4901      	ldr	r1, [pc, #4]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	40007000 	.word	0x40007000
 8005fd4:	0ffffcff 	.word	0x0ffffcff
 8005fd8:	4bb1      	ldr	r3, [pc, #708]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	4ab0      	ldr	r2, [pc, #704]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fe2:	6093      	str	r3, [r2, #8]
 8005fe4:	4bae      	ldr	r3, [pc, #696]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff0:	49ab      	ldr	r1, [pc, #684]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d010      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006002:	4ba7      	ldr	r3, [pc, #668]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006008:	4aa5      	ldr	r2, [pc, #660]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800600a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800600e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006012:	4ba3      	ldr	r3, [pc, #652]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006014:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	49a0      	ldr	r1, [pc, #640]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006030:	4b9b      	ldr	r3, [pc, #620]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006036:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603e:	4998      	ldr	r1, [pc, #608]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006052:	4b93      	ldr	r3, [pc, #588]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006060:	498f      	ldr	r1, [pc, #572]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006074:	4b8a      	ldr	r3, [pc, #552]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006082:	4987      	ldr	r1, [pc, #540]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006096:	4b82      	ldr	r3, [pc, #520]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	497e      	ldr	r1, [pc, #504]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060b8:	4b79      	ldr	r3, [pc, #484]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	f023 0203 	bic.w	r2, r3, #3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	4976      	ldr	r1, [pc, #472]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060da:	4b71      	ldr	r3, [pc, #452]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f023 020c 	bic.w	r2, r3, #12
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e8:	496d      	ldr	r1, [pc, #436]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060fc:	4b68      	ldr	r3, [pc, #416]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	4965      	ldr	r1, [pc, #404]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800611e:	4b60      	ldr	r3, [pc, #384]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006124:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612c:	495c      	ldr	r1, [pc, #368]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006140:	4b57      	ldr	r3, [pc, #348]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	4954      	ldr	r1, [pc, #336]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006162:	4b4f      	ldr	r3, [pc, #316]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006168:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	494b      	ldr	r1, [pc, #300]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006184:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006192:	4943      	ldr	r1, [pc, #268]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006194:	4313      	orrs	r3, r2
 8006196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80061a6:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b4:	493a      	ldr	r1, [pc, #232]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061c8:	4b35      	ldr	r3, [pc, #212]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d6:	4932      	ldr	r1, [pc, #200]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d011      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80061ea:	4b2d      	ldr	r3, [pc, #180]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f8:	4929      	ldr	r1, [pc, #164]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006208:	d101      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800620a:	2301      	movs	r3, #1
 800620c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800621a:	2301      	movs	r3, #1
 800621c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800622a:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006230:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006238:	4919      	ldr	r1, [pc, #100]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800624c:	4b14      	ldr	r3, [pc, #80]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006252:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800625c:	4910      	ldr	r1, [pc, #64]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d006      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80d9 	beq.w	800642a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006278:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800627e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006284:	f7fc fdda 	bl	8002e3c <HAL_GetTick>
 8006288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800628a:	e00b      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800628c:	f7fc fdd6 	bl	8002e3c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	; 0x64
 8006298:	d904      	bls.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e197      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800629e:	bf00      	nop
 80062a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a4:	4b6c      	ldr	r3, [pc, #432]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ed      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d021      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d11d      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80062c4:	4b64      	ldr	r3, [pc, #400]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062d2:	4b61      	ldr	r3, [pc, #388]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d8:	0e1b      	lsrs	r3, r3, #24
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	019a      	lsls	r2, r3, #6
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	431a      	orrs	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	061b      	lsls	r3, r3, #24
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	071b      	lsls	r3, r3, #28
 80062f8:	4957      	ldr	r1, [pc, #348]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006314:	d00a      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02e      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800632a:	d129      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800632c:	4b4a      	ldr	r3, [pc, #296]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800632e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006332:	0c1b      	lsrs	r3, r3, #16
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800633a:	4b47      	ldr	r3, [pc, #284]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800633c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006340:	0f1b      	lsrs	r3, r3, #28
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	019a      	lsls	r2, r3, #6
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	061b      	lsls	r3, r3, #24
 800635a:	431a      	orrs	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	071b      	lsls	r3, r3, #28
 8006360:	493d      	ldr	r1, [pc, #244]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006368:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800636a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800636e:	f023 021f 	bic.w	r2, r3, #31
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	3b01      	subs	r3, #1
 8006378:	4937      	ldr	r1, [pc, #220]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01d      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800638c:	4b32      	ldr	r3, [pc, #200]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800638e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006392:	0e1b      	lsrs	r3, r3, #24
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800639a:	4b2f      	ldr	r3, [pc, #188]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800639c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a0:	0f1b      	lsrs	r3, r3, #28
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	019a      	lsls	r2, r3, #6
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	041b      	lsls	r3, r3, #16
 80063b4:	431a      	orrs	r2, r3
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	061b      	lsls	r3, r3, #24
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	071b      	lsls	r3, r3, #28
 80063c0:	4925      	ldr	r1, [pc, #148]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d011      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	019a      	lsls	r2, r3, #6
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	061b      	lsls	r3, r3, #24
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	071b      	lsls	r3, r3, #28
 80063f0:	4919      	ldr	r1, [pc, #100]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80063f8:	4b17      	ldr	r3, [pc, #92]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a16      	ldr	r2, [pc, #88]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006404:	f7fc fd1a 	bl	8002e3c <HAL_GetTick>
 8006408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800640c:	f7fc fd16 	bl	8002e3c <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b64      	cmp	r3, #100	; 0x64
 8006418:	d901      	bls.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e0d7      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800641e:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b01      	cmp	r3, #1
 800642e:	f040 80cd 	bne.w	80065cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a08      	ldr	r2, [pc, #32]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800643c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800643e:	f7fc fcfd 	bl	8002e3c <HAL_GetTick>
 8006442:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006444:	e00a      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006446:	f7fc fcf9 	bl	8002e3c <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b64      	cmp	r3, #100	; 0x64
 8006452:	d903      	bls.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e0ba      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006458:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800645c:	4b5e      	ldr	r3, [pc, #376]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006468:	d0ed      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006486:	2b00      	cmp	r3, #0
 8006488:	d02e      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d12a      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006492:	4b51      	ldr	r3, [pc, #324]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064a0:	4b4d      	ldr	r3, [pc, #308]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a6:	0f1b      	lsrs	r3, r3, #28
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	019a      	lsls	r2, r3, #6
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	061b      	lsls	r3, r3, #24
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	071b      	lsls	r3, r3, #28
 80064c6:	4944      	ldr	r1, [pc, #272]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80064ce:	4b42      	ldr	r3, [pc, #264]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	3b01      	subs	r3, #1
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	493d      	ldr	r1, [pc, #244]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d022      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064fc:	d11d      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80064fe:	4b36      	ldr	r3, [pc, #216]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006504:	0e1b      	lsrs	r3, r3, #24
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800650c:	4b32      	ldr	r3, [pc, #200]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	0f1b      	lsrs	r3, r3, #28
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	019a      	lsls	r2, r3, #6
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	041b      	lsls	r3, r3, #16
 8006526:	431a      	orrs	r2, r3
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	061b      	lsls	r3, r3, #24
 800652c:	431a      	orrs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	071b      	lsls	r3, r3, #28
 8006532:	4929      	ldr	r1, [pc, #164]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d028      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006546:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	0e1b      	lsrs	r3, r3, #24
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006554:	4b20      	ldr	r3, [pc, #128]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	019a      	lsls	r2, r3, #6
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	431a      	orrs	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	061b      	lsls	r3, r3, #24
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	071b      	lsls	r3, r3, #28
 800657a:	4917      	ldr	r1, [pc, #92]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	4911      	ldr	r1, [pc, #68]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a0e      	ldr	r2, [pc, #56]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800659e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a4:	f7fc fc4a 	bl	8002e3c <HAL_GetTick>
 80065a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065ac:	f7fc fc46 	bl	8002e3c <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	; 0x64
 80065b8:	d901      	bls.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e007      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ca:	d1ef      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	40023800 	.word	0x40023800

080065dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e09d      	b.n	800672a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065fe:	d009      	beq.n	8006614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	61da      	str	r2, [r3, #28]
 8006606:	e005      	b.n	8006614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fb fd00 	bl	8002034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006654:	d902      	bls.n	800665c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	e002      	b.n	8006662 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800665c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006660:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800666a:	d007      	beq.n	800667c <HAL_SPI_Init+0xa0>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006674:	d002      	beq.n	800667c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	ea42 0103 	orr.w	r1, r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	f003 0204 	and.w	r2, r3, #4
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80066f8:	ea42 0103 	orr.w	r1, r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	099b      	lsrs	r3, r3, #6
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10f      	bne.n	8006778 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	099b      	lsrs	r3, r3, #6
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
    return;
 8006776:	e0d7      	b.n	8006928 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_SPI_IRQHandler+0x66>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	09db      	lsrs	r3, r3, #7
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
    return;
 8006798:	e0c6      	b.n	8006928 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <HAL_SPI_IRQHandler+0x8c>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	099b      	lsrs	r3, r3, #6
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 80b4 	beq.w	8006928 <HAL_SPI_IRQHandler+0x1f4>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80ad 	beq.w	8006928 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	099b      	lsrs	r3, r3, #6
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d023      	beq.n	8006822 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d011      	beq.n	800680a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ea:	f043 0204 	orr.w	r2, r3, #4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	e00b      	b.n	8006822 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	693b      	ldr	r3, [r7, #16]
        return;
 8006820:	e082      	b.n	8006928 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d014      	beq.n	8006858 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006832:	f043 0201 	orr.w	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00c      	beq.n	800687e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006868:	f043 0208 	orr.w	r2, r3, #8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006870:	2300      	movs	r3, #0
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006882:	2b00      	cmp	r3, #0
 8006884:	d04f      	beq.n	8006926 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006894:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <HAL_SPI_IRQHandler+0x17e>
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d034      	beq.n	800691c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0203 	bic.w	r2, r2, #3
 80068c0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d011      	beq.n	80068ee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ce:	4a18      	ldr	r2, [pc, #96]	; (8006930 <HAL_SPI_IRQHandler+0x1fc>)
 80068d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd fa68 	bl	8003dac <HAL_DMA_Abort_IT>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d005      	beq.n	80068ee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fa:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <HAL_SPI_IRQHandler+0x1fc>)
 80068fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd fa52 	bl	8003dac <HAL_DMA_Abort_IT>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800691a:	e003      	b.n	8006924 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f809 	bl	8006934 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006922:	e000      	b.n	8006926 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006924:	bf00      	nop
    return;
 8006926:	bf00      	nop
  }
}
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	08006949 	.word	0x08006949

08006934 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff ffe5 	bl	8006934 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e049      	b.n	8006a18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d106      	bne.n	800699e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fb fef3 	bl	8002784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3304      	adds	r3, #4
 80069ae:	4619      	mov	r1, r3
 80069b0:	4610      	mov	r0, r2
 80069b2:	f001 f853 	bl	8007a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d001      	beq.n	8006a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e04c      	b.n	8006ad2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <HAL_TIM_Base_Start+0xc0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d022      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a52:	d01d      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <HAL_TIM_Base_Start+0xc4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d018      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <HAL_TIM_Base_Start+0xc8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d013      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	; (8006aec <HAL_TIM_Base_Start+0xcc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00e      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <HAL_TIM_Base_Start+0xd0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d009      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <HAL_TIM_Base_Start+0xd4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIM_Base_Start+0x70>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_TIM_Base_Start+0xd8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d115      	bne.n	8006abc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	4b19      	ldr	r3, [pc, #100]	; (8006afc <HAL_TIM_Base_Start+0xdc>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d015      	beq.n	8006ace <HAL_TIM_Base_Start+0xae>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa8:	d011      	beq.n	8006ace <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aba:	e008      	b.n	8006ace <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e000      	b.n	8006ad0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40010400 	.word	0x40010400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40001800 	.word	0x40001800
 8006afc:	00010007 	.word	0x00010007

08006b00 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6a1a      	ldr	r2, [r3, #32]
 8006b0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b12:	4013      	ands	r3, r2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10f      	bne.n	8006b38 <HAL_TIM_Base_Stop+0x38>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	f240 4344 	movw	r3, #1092	; 0x444
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d107      	bne.n	8006b38 <HAL_TIM_Base_Stop+0x38>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0201 	bic.w	r2, r2, #1
 8006b36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d001      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e054      	b.n	8006c12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d022      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x80>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b92:	d01d      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x80>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a22      	ldr	r2, [pc, #136]	; (8006c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x80>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a21      	ldr	r2, [pc, #132]	; (8006c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x80>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x80>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <HAL_TIM_Base_Start_IT+0xe0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x80>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1c      	ldr	r2, [pc, #112]	; (8006c34 <HAL_TIM_Base_Start_IT+0xe4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x80>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <HAL_TIM_Base_Start_IT+0xe8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d115      	bne.n	8006bfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <HAL_TIM_Base_Start_IT+0xec>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b06      	cmp	r3, #6
 8006be0:	d015      	beq.n	8006c0e <HAL_TIM_Base_Start_IT+0xbe>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be8:	d011      	beq.n	8006c0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0201 	orr.w	r2, r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bfa:	e008      	b.n	8006c0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e000      	b.n	8006c10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40010000 	.word	0x40010000
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40000800 	.word	0x40000800
 8006c2c:	40000c00 	.word	0x40000c00
 8006c30:	40010400 	.word	0x40010400
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40001800 	.word	0x40001800
 8006c3c:	00010007 	.word	0x00010007

08006c40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a1a      	ldr	r2, [r3, #32]
 8006c5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10f      	bne.n	8006c88 <HAL_TIM_Base_Stop_IT+0x48>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6a1a      	ldr	r2, [r3, #32]
 8006c6e:	f240 4344 	movw	r3, #1092	; 0x444
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d107      	bne.n	8006c88 <HAL_TIM_Base_Stop_IT+0x48>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e049      	b.n	8006d44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7fb fd39 	bl	800273c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f000 febd 	bl	8007a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d109      	bne.n	8006d70 <HAL_TIM_PWM_Start+0x24>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	bf14      	ite	ne
 8006d68:	2301      	movne	r3, #1
 8006d6a:	2300      	moveq	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e03c      	b.n	8006dea <HAL_TIM_PWM_Start+0x9e>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d109      	bne.n	8006d8a <HAL_TIM_PWM_Start+0x3e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	bf14      	ite	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	2300      	moveq	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	e02f      	b.n	8006dea <HAL_TIM_PWM_Start+0x9e>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d109      	bne.n	8006da4 <HAL_TIM_PWM_Start+0x58>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	bf14      	ite	ne
 8006d9c:	2301      	movne	r3, #1
 8006d9e:	2300      	moveq	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	e022      	b.n	8006dea <HAL_TIM_PWM_Start+0x9e>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b0c      	cmp	r3, #12
 8006da8:	d109      	bne.n	8006dbe <HAL_TIM_PWM_Start+0x72>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	bf14      	ite	ne
 8006db6:	2301      	movne	r3, #1
 8006db8:	2300      	moveq	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	e015      	b.n	8006dea <HAL_TIM_PWM_Start+0x9e>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b10      	cmp	r3, #16
 8006dc2:	d109      	bne.n	8006dd8 <HAL_TIM_PWM_Start+0x8c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	bf14      	ite	ne
 8006dd0:	2301      	movne	r3, #1
 8006dd2:	2300      	moveq	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	e008      	b.n	8006dea <HAL_TIM_PWM_Start+0x9e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	bf14      	ite	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	2300      	moveq	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e092      	b.n	8006f18 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <HAL_TIM_PWM_Start+0xb6>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e00:	e023      	b.n	8006e4a <HAL_TIM_PWM_Start+0xfe>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d104      	bne.n	8006e12 <HAL_TIM_PWM_Start+0xc6>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e10:	e01b      	b.n	8006e4a <HAL_TIM_PWM_Start+0xfe>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_PWM_Start+0xd6>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e20:	e013      	b.n	8006e4a <HAL_TIM_PWM_Start+0xfe>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b0c      	cmp	r3, #12
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_PWM_Start+0xe6>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e30:	e00b      	b.n	8006e4a <HAL_TIM_PWM_Start+0xfe>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_PWM_Start+0xf6>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e40:	e003      	b.n	8006e4a <HAL_TIM_PWM_Start+0xfe>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 fac4 	bl	80083e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a30      	ldr	r2, [pc, #192]	; (8006f20 <HAL_TIM_PWM_Start+0x1d4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIM_PWM_Start+0x120>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a2f      	ldr	r2, [pc, #188]	; (8006f24 <HAL_TIM_PWM_Start+0x1d8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_PWM_Start+0x124>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <HAL_TIM_PWM_Start+0x126>
 8006e70:	2300      	movs	r3, #0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a25      	ldr	r2, [pc, #148]	; (8006f20 <HAL_TIM_PWM_Start+0x1d4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x18a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e98:	d01d      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x18a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a22      	ldr	r2, [pc, #136]	; (8006f28 <HAL_TIM_PWM_Start+0x1dc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x18a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a20      	ldr	r2, [pc, #128]	; (8006f2c <HAL_TIM_PWM_Start+0x1e0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x18a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <HAL_TIM_PWM_Start+0x1e4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x18a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <HAL_TIM_PWM_Start+0x1d8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x18a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <HAL_TIM_PWM_Start+0x1e8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x18a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a19      	ldr	r2, [pc, #100]	; (8006f38 <HAL_TIM_PWM_Start+0x1ec>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d115      	bne.n	8006f02 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <HAL_TIM_PWM_Start+0x1f0>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b06      	cmp	r3, #6
 8006ee6:	d015      	beq.n	8006f14 <HAL_TIM_PWM_Start+0x1c8>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eee:	d011      	beq.n	8006f14 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f00:	e008      	b.n	8006f14 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	e000      	b.n	8006f16 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40010000 	.word	0x40010000
 8006f24:	40010400 	.word	0x40010400
 8006f28:	40000400 	.word	0x40000400
 8006f2c:	40000800 	.word	0x40000800
 8006f30:	40000c00 	.word	0x40000c00
 8006f34:	40014000 	.word	0x40014000
 8006f38:	40001800 	.word	0x40001800
 8006f3c:	00010007 	.word	0x00010007

08006f40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e049      	b.n	8006fe6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fb fc4e 	bl	8002808 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f000 fd6c 	bl	8007a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_IC_Start_IT+0x1a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007006:	b2db      	uxtb	r3, r3
 8007008:	e023      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x62>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d104      	bne.n	800701a <HAL_TIM_IC_Start_IT+0x2a>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e01b      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x62>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d104      	bne.n	800702a <HAL_TIM_IC_Start_IT+0x3a>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007026:	b2db      	uxtb	r3, r3
 8007028:	e013      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x62>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d104      	bne.n	800703a <HAL_TIM_IC_Start_IT+0x4a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007036:	b2db      	uxtb	r3, r3
 8007038:	e00b      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x62>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b10      	cmp	r3, #16
 800703e:	d104      	bne.n	800704a <HAL_TIM_IC_Start_IT+0x5a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007046:	b2db      	uxtb	r3, r3
 8007048:	e003      	b.n	8007052 <HAL_TIM_IC_Start_IT+0x62>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007050:	b2db      	uxtb	r3, r3
 8007052:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <HAL_TIM_IC_Start_IT+0x74>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007060:	b2db      	uxtb	r3, r3
 8007062:	e013      	b.n	800708c <HAL_TIM_IC_Start_IT+0x9c>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b04      	cmp	r3, #4
 8007068:	d104      	bne.n	8007074 <HAL_TIM_IC_Start_IT+0x84>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007070:	b2db      	uxtb	r3, r3
 8007072:	e00b      	b.n	800708c <HAL_TIM_IC_Start_IT+0x9c>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b08      	cmp	r3, #8
 8007078:	d104      	bne.n	8007084 <HAL_TIM_IC_Start_IT+0x94>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007080:	b2db      	uxtb	r3, r3
 8007082:	e003      	b.n	800708c <HAL_TIM_IC_Start_IT+0x9c>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800708a:	b2db      	uxtb	r3, r3
 800708c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d102      	bne.n	800709a <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007094:	7bbb      	ldrb	r3, [r7, #14]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d001      	beq.n	800709e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e0dd      	b.n	800725a <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_IC_Start_IT+0xbe>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ac:	e023      	b.n	80070f6 <HAL_TIM_IC_Start_IT+0x106>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d104      	bne.n	80070be <HAL_TIM_IC_Start_IT+0xce>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070bc:	e01b      	b.n	80070f6 <HAL_TIM_IC_Start_IT+0x106>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_IC_Start_IT+0xde>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070cc:	e013      	b.n	80070f6 <HAL_TIM_IC_Start_IT+0x106>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b0c      	cmp	r3, #12
 80070d2:	d104      	bne.n	80070de <HAL_TIM_IC_Start_IT+0xee>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070dc:	e00b      	b.n	80070f6 <HAL_TIM_IC_Start_IT+0x106>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_IC_Start_IT+0xfe>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ec:	e003      	b.n	80070f6 <HAL_TIM_IC_Start_IT+0x106>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_IC_Start_IT+0x116>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007104:	e013      	b.n	800712e <HAL_TIM_IC_Start_IT+0x13e>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b04      	cmp	r3, #4
 800710a:	d104      	bne.n	8007116 <HAL_TIM_IC_Start_IT+0x126>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007114:	e00b      	b.n	800712e <HAL_TIM_IC_Start_IT+0x13e>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d104      	bne.n	8007126 <HAL_TIM_IC_Start_IT+0x136>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007124:	e003      	b.n	800712e <HAL_TIM_IC_Start_IT+0x13e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b0c      	cmp	r3, #12
 8007132:	d841      	bhi.n	80071b8 <HAL_TIM_IC_Start_IT+0x1c8>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <HAL_TIM_IC_Start_IT+0x14c>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007171 	.word	0x08007171
 8007140:	080071b9 	.word	0x080071b9
 8007144:	080071b9 	.word	0x080071b9
 8007148:	080071b9 	.word	0x080071b9
 800714c:	08007183 	.word	0x08007183
 8007150:	080071b9 	.word	0x080071b9
 8007154:	080071b9 	.word	0x080071b9
 8007158:	080071b9 	.word	0x080071b9
 800715c:	08007195 	.word	0x08007195
 8007160:	080071b9 	.word	0x080071b9
 8007164:	080071b9 	.word	0x080071b9
 8007168:	080071b9 	.word	0x080071b9
 800716c:	080071a7 	.word	0x080071a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0202 	orr.w	r2, r2, #2
 800717e:	60da      	str	r2, [r3, #12]
      break;
 8007180:	e01b      	b.n	80071ba <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0204 	orr.w	r2, r2, #4
 8007190:	60da      	str	r2, [r3, #12]
      break;
 8007192:	e012      	b.n	80071ba <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0208 	orr.w	r2, r2, #8
 80071a2:	60da      	str	r2, [r3, #12]
      break;
 80071a4:	e009      	b.n	80071ba <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0210 	orr.w	r2, r2, #16
 80071b4:	60da      	str	r2, [r3, #12]
      break;
 80071b6:	e000      	b.n	80071ba <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80071b8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2201      	movs	r2, #1
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f90c 	bl	80083e0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a25      	ldr	r2, [pc, #148]	; (8007264 <HAL_TIM_IC_Start_IT+0x274>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d022      	beq.n	8007218 <HAL_TIM_IC_Start_IT+0x228>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071da:	d01d      	beq.n	8007218 <HAL_TIM_IC_Start_IT+0x228>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a21      	ldr	r2, [pc, #132]	; (8007268 <HAL_TIM_IC_Start_IT+0x278>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d018      	beq.n	8007218 <HAL_TIM_IC_Start_IT+0x228>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a20      	ldr	r2, [pc, #128]	; (800726c <HAL_TIM_IC_Start_IT+0x27c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d013      	beq.n	8007218 <HAL_TIM_IC_Start_IT+0x228>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <HAL_TIM_IC_Start_IT+0x280>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <HAL_TIM_IC_Start_IT+0x228>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <HAL_TIM_IC_Start_IT+0x284>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d009      	beq.n	8007218 <HAL_TIM_IC_Start_IT+0x228>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <HAL_TIM_IC_Start_IT+0x288>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_TIM_IC_Start_IT+0x228>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1a      	ldr	r2, [pc, #104]	; (800727c <HAL_TIM_IC_Start_IT+0x28c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d115      	bne.n	8007244 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	4b18      	ldr	r3, [pc, #96]	; (8007280 <HAL_TIM_IC_Start_IT+0x290>)
 8007220:	4013      	ands	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b06      	cmp	r3, #6
 8007228:	d015      	beq.n	8007256 <HAL_TIM_IC_Start_IT+0x266>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007230:	d011      	beq.n	8007256 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0201 	orr.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007242:	e008      	b.n	8007256 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e000      	b.n	8007258 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40010000 	.word	0x40010000
 8007268:	40000400 	.word	0x40000400
 800726c:	40000800 	.word	0x40000800
 8007270:	40000c00 	.word	0x40000c00
 8007274:	40010400 	.word	0x40010400
 8007278:	40014000 	.word	0x40014000
 800727c:	40001800 	.word	0x40001800
 8007280:	00010007 	.word	0x00010007

08007284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b02      	cmp	r3, #2
 8007298:	d122      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d11b      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0202 	mvn.w	r2, #2
 80072b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fa fa2a 	bl	8001720 <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fba6 	bl	8007a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fbad 	bl	8007a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d122      	bne.n	8007334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d11b      	bne.n	8007334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0204 	mvn.w	r2, #4
 8007304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fa fa00 	bl	8001720 <HAL_TIM_IC_CaptureCallback>
 8007320:	e005      	b.n	800732e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fb7c 	bl	8007a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fb83 	bl	8007a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b08      	cmp	r3, #8
 8007340:	d122      	bne.n	8007388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d11b      	bne.n	8007388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0208 	mvn.w	r2, #8
 8007358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2204      	movs	r2, #4
 800735e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7fa f9d6 	bl	8001720 <HAL_TIM_IC_CaptureCallback>
 8007374:	e005      	b.n	8007382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb52 	bl	8007a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb59 	bl	8007a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0310 	and.w	r3, r3, #16
 8007392:	2b10      	cmp	r3, #16
 8007394:	d122      	bne.n	80073dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d11b      	bne.n	80073dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f06f 0210 	mvn.w	r2, #16
 80073ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2208      	movs	r2, #8
 80073b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fa f9ac 	bl	8001720 <HAL_TIM_IC_CaptureCallback>
 80073c8:	e005      	b.n	80073d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fb28 	bl	8007a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fb2f 	bl	8007a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d10e      	bne.n	8007408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d107      	bne.n	8007408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0201 	mvn.w	r2, #1
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fa fc8a 	bl	8001d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007420:	2b80      	cmp	r3, #128	; 0x80
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 f894 	bl	800855c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007442:	d10e      	bne.n	8007462 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744e:	2b80      	cmp	r3, #128	; 0x80
 8007450:	d107      	bne.n	8007462 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800745a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 f887 	bl	8008570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d10e      	bne.n	800748e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b40      	cmp	r3, #64	; 0x40
 800747c:	d107      	bne.n	800748e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fadd 	bl	8007a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b20      	cmp	r3, #32
 800749a:	d10e      	bne.n	80074ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d107      	bne.n	80074ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f06f 0220 	mvn.w	r2, #32
 80074b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 f847 	bl	8008548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_TIM_IC_ConfigChannel+0x1a>
 80074d8:	2302      	movs	r3, #2
 80074da:	e082      	b.n	80075e2 <HAL_TIM_IC_ConfigChannel+0x120>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d11b      	bne.n	8007522 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6819      	ldr	r1, [r3, #0]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f000 fdad 	bl	8008058 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 020c 	bic.w	r2, r2, #12
 800750c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6999      	ldr	r1, [r3, #24]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	619a      	str	r2, [r3, #24]
 8007520:	e05a      	b.n	80075d8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b04      	cmp	r3, #4
 8007526:	d11c      	bne.n	8007562 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f000 fe31 	bl	800819e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800754a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6999      	ldr	r1, [r3, #24]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	021a      	lsls	r2, r3, #8
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	619a      	str	r2, [r3, #24]
 8007560:	e03a      	b.n	80075d8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d11b      	bne.n	80075a0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f000 fe7e 	bl	8008278 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	69da      	ldr	r2, [r3, #28]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 020c 	bic.w	r2, r2, #12
 800758a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69d9      	ldr	r1, [r3, #28]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	61da      	str	r2, [r3, #28]
 800759e:	e01b      	b.n	80075d8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6819      	ldr	r1, [r3, #0]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f000 fe9e 	bl	80082f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69da      	ldr	r2, [r3, #28]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69d9      	ldr	r1, [r3, #28]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	021a      	lsls	r2, r3, #8
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d101      	bne.n	8007606 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007602:	2302      	movs	r3, #2
 8007604:	e0fd      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b14      	cmp	r3, #20
 8007612:	f200 80f0 	bhi.w	80077f6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	08007671 	.word	0x08007671
 8007620:	080077f7 	.word	0x080077f7
 8007624:	080077f7 	.word	0x080077f7
 8007628:	080077f7 	.word	0x080077f7
 800762c:	080076b1 	.word	0x080076b1
 8007630:	080077f7 	.word	0x080077f7
 8007634:	080077f7 	.word	0x080077f7
 8007638:	080077f7 	.word	0x080077f7
 800763c:	080076f3 	.word	0x080076f3
 8007640:	080077f7 	.word	0x080077f7
 8007644:	080077f7 	.word	0x080077f7
 8007648:	080077f7 	.word	0x080077f7
 800764c:	08007733 	.word	0x08007733
 8007650:	080077f7 	.word	0x080077f7
 8007654:	080077f7 	.word	0x080077f7
 8007658:	080077f7 	.word	0x080077f7
 800765c:	08007775 	.word	0x08007775
 8007660:	080077f7 	.word	0x080077f7
 8007664:	080077f7 	.word	0x080077f7
 8007668:	080077f7 	.word	0x080077f7
 800766c:	080077b5 	.word	0x080077b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fa90 	bl	8007b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0208 	orr.w	r2, r2, #8
 800768a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0204 	bic.w	r2, r2, #4
 800769a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6999      	ldr	r1, [r3, #24]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	619a      	str	r2, [r3, #24]
      break;
 80076ae:	e0a3      	b.n	80077f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fae2 	bl	8007c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6999      	ldr	r1, [r3, #24]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	021a      	lsls	r2, r3, #8
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	619a      	str	r2, [r3, #24]
      break;
 80076f0:	e082      	b.n	80077f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fb39 	bl	8007d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0208 	orr.w	r2, r2, #8
 800770c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0204 	bic.w	r2, r2, #4
 800771c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69d9      	ldr	r1, [r3, #28]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	61da      	str	r2, [r3, #28]
      break;
 8007730:	e062      	b.n	80077f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fb8f 	bl	8007e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69da      	ldr	r2, [r3, #28]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800774c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69da      	ldr	r2, [r3, #28]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69d9      	ldr	r1, [r3, #28]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	021a      	lsls	r2, r3, #8
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	61da      	str	r2, [r3, #28]
      break;
 8007772:	e041      	b.n	80077f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68b9      	ldr	r1, [r7, #8]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fbc6 	bl	8007f0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0208 	orr.w	r2, r2, #8
 800778e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0204 	bic.w	r2, r2, #4
 800779e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	691a      	ldr	r2, [r3, #16]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077b2:	e021      	b.n	80077f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fbf8 	bl	8007fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	021a      	lsls	r2, r3, #8
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077f4:	e000      	b.n	80077f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80077f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop

0800780c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIM_ConfigClockSource+0x18>
 8007820:	2302      	movs	r3, #2
 8007822:	e0b3      	b.n	800798c <HAL_TIM_ConfigClockSource+0x180>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	4b55      	ldr	r3, [pc, #340]	; (8007994 <HAL_TIM_ConfigClockSource+0x188>)
 8007840:	4013      	ands	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800784a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785c:	d03e      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0xd0>
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007862:	f200 8087 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x168>
 8007866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786a:	f000 8085 	beq.w	8007978 <HAL_TIM_ConfigClockSource+0x16c>
 800786e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007872:	d87f      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x168>
 8007874:	2b70      	cmp	r3, #112	; 0x70
 8007876:	d01a      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0xa2>
 8007878:	2b70      	cmp	r3, #112	; 0x70
 800787a:	d87b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x168>
 800787c:	2b60      	cmp	r3, #96	; 0x60
 800787e:	d050      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x116>
 8007880:	2b60      	cmp	r3, #96	; 0x60
 8007882:	d877      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x168>
 8007884:	2b50      	cmp	r3, #80	; 0x50
 8007886:	d03c      	beq.n	8007902 <HAL_TIM_ConfigClockSource+0xf6>
 8007888:	2b50      	cmp	r3, #80	; 0x50
 800788a:	d873      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x168>
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d058      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x136>
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d86f      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x168>
 8007894:	2b30      	cmp	r3, #48	; 0x30
 8007896:	d064      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x156>
 8007898:	2b30      	cmp	r3, #48	; 0x30
 800789a:	d86b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x168>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d060      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x156>
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d867      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x168>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d05c      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x156>
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d05a      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80078ac:	e062      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6899      	ldr	r1, [r3, #8]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f000 fd6f 	bl	80083a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	609a      	str	r2, [r3, #8]
      break;
 80078da:	e04e      	b.n	800797a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6899      	ldr	r1, [r3, #8]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f000 fd58 	bl	80083a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078fe:	609a      	str	r2, [r3, #8]
      break;
 8007900:	e03b      	b.n	800797a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	6859      	ldr	r1, [r3, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	461a      	mov	r2, r3
 8007910:	f000 fc16 	bl	8008140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2150      	movs	r1, #80	; 0x50
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fd25 	bl	800836a <TIM_ITRx_SetConfig>
      break;
 8007920:	e02b      	b.n	800797a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6859      	ldr	r1, [r3, #4]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	461a      	mov	r2, r3
 8007930:	f000 fc72 	bl	8008218 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2160      	movs	r1, #96	; 0x60
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fd15 	bl	800836a <TIM_ITRx_SetConfig>
      break;
 8007940:	e01b      	b.n	800797a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	461a      	mov	r2, r3
 8007950:	f000 fbf6 	bl	8008140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2140      	movs	r1, #64	; 0x40
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fd05 	bl	800836a <TIM_ITRx_SetConfig>
      break;
 8007960:	e00b      	b.n	800797a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f000 fcfc 	bl	800836a <TIM_ITRx_SetConfig>
        break;
 8007972:	e002      	b.n	800797a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007974:	bf00      	nop
 8007976:	e000      	b.n	800797a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007978:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	fffeff88 	.word	0xfffeff88

08007998 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b0c      	cmp	r3, #12
 80079aa:	d831      	bhi.n	8007a10 <HAL_TIM_ReadCapturedValue+0x78>
 80079ac:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079e9 	.word	0x080079e9
 80079b8:	08007a11 	.word	0x08007a11
 80079bc:	08007a11 	.word	0x08007a11
 80079c0:	08007a11 	.word	0x08007a11
 80079c4:	080079f3 	.word	0x080079f3
 80079c8:	08007a11 	.word	0x08007a11
 80079cc:	08007a11 	.word	0x08007a11
 80079d0:	08007a11 	.word	0x08007a11
 80079d4:	080079fd 	.word	0x080079fd
 80079d8:	08007a11 	.word	0x08007a11
 80079dc:	08007a11 	.word	0x08007a11
 80079e0:	08007a11 	.word	0x08007a11
 80079e4:	08007a07 	.word	0x08007a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ee:	60fb      	str	r3, [r7, #12]

      break;
 80079f0:	e00f      	b.n	8007a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	60fb      	str	r3, [r7, #12]

      break;
 80079fa:	e00a      	b.n	8007a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a02:	60fb      	str	r3, [r7, #12]

      break;
 8007a04:	e005      	b.n	8007a12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	60fb      	str	r3, [r7, #12]

      break;
 8007a0e:	e000      	b.n	8007a12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007a10:	bf00      	nop
  }

  return tmpreg;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a40      	ldr	r2, [pc, #256]	; (8007b70 <TIM_Base_SetConfig+0x114>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7a:	d00f      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a3d      	ldr	r2, [pc, #244]	; (8007b74 <TIM_Base_SetConfig+0x118>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a3c      	ldr	r2, [pc, #240]	; (8007b78 <TIM_Base_SetConfig+0x11c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a3b      	ldr	r2, [pc, #236]	; (8007b7c <TIM_Base_SetConfig+0x120>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a3a      	ldr	r2, [pc, #232]	; (8007b80 <TIM_Base_SetConfig+0x124>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d108      	bne.n	8007aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2f      	ldr	r2, [pc, #188]	; (8007b70 <TIM_Base_SetConfig+0x114>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d02b      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007abc:	d027      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2c      	ldr	r2, [pc, #176]	; (8007b74 <TIM_Base_SetConfig+0x118>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d023      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a2b      	ldr	r2, [pc, #172]	; (8007b78 <TIM_Base_SetConfig+0x11c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d01f      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <TIM_Base_SetConfig+0x120>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01b      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a29      	ldr	r2, [pc, #164]	; (8007b80 <TIM_Base_SetConfig+0x124>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d017      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a28      	ldr	r2, [pc, #160]	; (8007b84 <TIM_Base_SetConfig+0x128>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a27      	ldr	r2, [pc, #156]	; (8007b88 <TIM_Base_SetConfig+0x12c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00f      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <TIM_Base_SetConfig+0x130>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00b      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a25      	ldr	r2, [pc, #148]	; (8007b90 <TIM_Base_SetConfig+0x134>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d007      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a24      	ldr	r2, [pc, #144]	; (8007b94 <TIM_Base_SetConfig+0x138>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d003      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a23      	ldr	r2, [pc, #140]	; (8007b98 <TIM_Base_SetConfig+0x13c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d108      	bne.n	8007b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a0a      	ldr	r2, [pc, #40]	; (8007b70 <TIM_Base_SetConfig+0x114>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_Base_SetConfig+0xf8>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <TIM_Base_SetConfig+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d103      	bne.n	8007b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	615a      	str	r2, [r3, #20]
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40010000 	.word	0x40010000
 8007b74:	40000400 	.word	0x40000400
 8007b78:	40000800 	.word	0x40000800
 8007b7c:	40000c00 	.word	0x40000c00
 8007b80:	40010400 	.word	0x40010400
 8007b84:	40014000 	.word	0x40014000
 8007b88:	40014400 	.word	0x40014400
 8007b8c:	40014800 	.word	0x40014800
 8007b90:	40001800 	.word	0x40001800
 8007b94:	40001c00 	.word	0x40001c00
 8007b98:	40002000 	.word	0x40002000

08007b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f023 0201 	bic.w	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4b2b      	ldr	r3, [pc, #172]	; (8007c74 <TIM_OC1_SetConfig+0xd8>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f023 0302 	bic.w	r3, r3, #2
 8007be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a21      	ldr	r2, [pc, #132]	; (8007c78 <TIM_OC1_SetConfig+0xdc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_OC1_SetConfig+0x64>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a20      	ldr	r2, [pc, #128]	; (8007c7c <TIM_OC1_SetConfig+0xe0>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10c      	bne.n	8007c1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f023 0308 	bic.w	r3, r3, #8
 8007c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f023 0304 	bic.w	r3, r3, #4
 8007c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a16      	ldr	r2, [pc, #88]	; (8007c78 <TIM_OC1_SetConfig+0xdc>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_OC1_SetConfig+0x8e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <TIM_OC1_SetConfig+0xe0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d111      	bne.n	8007c4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	621a      	str	r2, [r3, #32]
}
 8007c68:	bf00      	nop
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	fffeff8f 	.word	0xfffeff8f
 8007c78:	40010000 	.word	0x40010000
 8007c7c:	40010400 	.word	0x40010400

08007c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	f023 0210 	bic.w	r2, r3, #16
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4b2e      	ldr	r3, [pc, #184]	; (8007d64 <TIM_OC2_SetConfig+0xe4>)
 8007cac:	4013      	ands	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f023 0320 	bic.w	r3, r3, #32
 8007cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <TIM_OC2_SetConfig+0xe8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <TIM_OC2_SetConfig+0x68>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <TIM_OC2_SetConfig+0xec>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d10d      	bne.n	8007d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a18      	ldr	r2, [pc, #96]	; (8007d68 <TIM_OC2_SetConfig+0xe8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_OC2_SetConfig+0x94>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a17      	ldr	r2, [pc, #92]	; (8007d6c <TIM_OC2_SetConfig+0xec>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d113      	bne.n	8007d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	feff8fff 	.word	0xfeff8fff
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40010400 	.word	0x40010400

08007d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4b2d      	ldr	r3, [pc, #180]	; (8007e50 <TIM_OC3_SetConfig+0xe0>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0303 	bic.w	r3, r3, #3
 8007da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a22      	ldr	r2, [pc, #136]	; (8007e54 <TIM_OC3_SetConfig+0xe4>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <TIM_OC3_SetConfig+0x66>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a21      	ldr	r2, [pc, #132]	; (8007e58 <TIM_OC3_SetConfig+0xe8>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d10d      	bne.n	8007df2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a17      	ldr	r2, [pc, #92]	; (8007e54 <TIM_OC3_SetConfig+0xe4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d003      	beq.n	8007e02 <TIM_OC3_SetConfig+0x92>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a16      	ldr	r2, [pc, #88]	; (8007e58 <TIM_OC3_SetConfig+0xe8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d113      	bne.n	8007e2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	621a      	str	r2, [r3, #32]
}
 8007e44:	bf00      	nop
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	fffeff8f 	.word	0xfffeff8f
 8007e54:	40010000 	.word	0x40010000
 8007e58:	40010400 	.word	0x40010400

08007e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <TIM_OC4_SetConfig+0xa4>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	031b      	lsls	r3, r3, #12
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a13      	ldr	r2, [pc, #76]	; (8007f04 <TIM_OC4_SetConfig+0xa8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d003      	beq.n	8007ec4 <TIM_OC4_SetConfig+0x68>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a12      	ldr	r2, [pc, #72]	; (8007f08 <TIM_OC4_SetConfig+0xac>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d109      	bne.n	8007ed8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	019b      	lsls	r3, r3, #6
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	feff8fff 	.word	0xfeff8fff
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40010400 	.word	0x40010400

08007f0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <TIM_OC5_SetConfig+0x98>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	041b      	lsls	r3, r3, #16
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a12      	ldr	r2, [pc, #72]	; (8007fa8 <TIM_OC5_SetConfig+0x9c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d003      	beq.n	8007f6a <TIM_OC5_SetConfig+0x5e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a11      	ldr	r2, [pc, #68]	; (8007fac <TIM_OC5_SetConfig+0xa0>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d109      	bne.n	8007f7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	021b      	lsls	r3, r3, #8
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	621a      	str	r2, [r3, #32]
}
 8007f98:	bf00      	nop
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	fffeff8f 	.word	0xfffeff8f
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40010400 	.word	0x40010400

08007fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4b1c      	ldr	r3, [pc, #112]	; (800804c <TIM_OC6_SetConfig+0x9c>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	051b      	lsls	r3, r3, #20
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a13      	ldr	r2, [pc, #76]	; (8008050 <TIM_OC6_SetConfig+0xa0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_OC6_SetConfig+0x60>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a12      	ldr	r2, [pc, #72]	; (8008054 <TIM_OC6_SetConfig+0xa4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d109      	bne.n	8008024 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	029b      	lsls	r3, r3, #10
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	feff8fff 	.word	0xfeff8fff
 8008050:	40010000 	.word	0x40010000
 8008054:	40010400 	.word	0x40010400

08008058 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f023 0201 	bic.w	r2, r3, #1
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4a28      	ldr	r2, [pc, #160]	; (8008124 <TIM_TI1_SetConfig+0xcc>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d01b      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808c:	d017      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4a25      	ldr	r2, [pc, #148]	; (8008128 <TIM_TI1_SetConfig+0xd0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4a24      	ldr	r2, [pc, #144]	; (800812c <TIM_TI1_SetConfig+0xd4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00f      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4a23      	ldr	r2, [pc, #140]	; (8008130 <TIM_TI1_SetConfig+0xd8>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00b      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4a22      	ldr	r2, [pc, #136]	; (8008134 <TIM_TI1_SetConfig+0xdc>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d007      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4a21      	ldr	r2, [pc, #132]	; (8008138 <TIM_TI1_SetConfig+0xe0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d003      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4a20      	ldr	r2, [pc, #128]	; (800813c <TIM_TI1_SetConfig+0xe4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d101      	bne.n	80080c2 <TIM_TI1_SetConfig+0x6a>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <TIM_TI1_SetConfig+0x6c>
 80080c2:	2300      	movs	r3, #0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e003      	b.n	80080e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f043 0301 	orr.w	r3, r3, #1
 80080e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f023 030a 	bic.w	r3, r3, #10
 80080fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f003 030a 	and.w	r3, r3, #10
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	bf00      	nop
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40010000 	.word	0x40010000
 8008128:	40000400 	.word	0x40000400
 800812c:	40000800 	.word	0x40000800
 8008130:	40000c00 	.word	0x40000c00
 8008134:	40010400 	.word	0x40010400
 8008138:	40014000 	.word	0x40014000
 800813c:	40001800 	.word	0x40001800

08008140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0201 	bic.w	r2, r3, #1
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800816a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f023 030a 	bic.w	r3, r3, #10
 800817c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800819e:	b480      	push	{r7}
 80081a0:	b087      	sub	sp, #28
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	f023 0210 	bic.w	r2, r3, #16
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	031b      	lsls	r3, r3, #12
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	621a      	str	r2, [r3, #32]
}
 800820c:	bf00      	nop
 800820e:	371c      	adds	r7, #28
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f023 0210 	bic.w	r2, r3, #16
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008242:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	031b      	lsls	r3, r3, #12
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4313      	orrs	r3, r2
 800824c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008254:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	621a      	str	r2, [r3, #32]
}
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f023 0303 	bic.w	r3, r3, #3
 80082a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80082c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	621a      	str	r2, [r3, #32]
}
 80082e4:	bf00      	nop
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	4313      	orrs	r3, r2
 8008326:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800832e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	031b      	lsls	r3, r3, #12
 8008334:	b29b      	uxth	r3, r3
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4313      	orrs	r3, r2
 800833a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008342:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	031b      	lsls	r3, r3, #12
 8008348:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	621a      	str	r2, [r3, #32]
}
 800835e:	bf00      	nop
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	f043 0307 	orr.w	r3, r3, #7
 800838c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	609a      	str	r2, [r3, #8]
}
 8008394:	bf00      	nop
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	021a      	lsls	r2, r3, #8
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	609a      	str	r2, [r3, #8]
}
 80083d4:	bf00      	nop
 80083d6:	371c      	adds	r7, #28
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	2201      	movs	r2, #1
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a1a      	ldr	r2, [r3, #32]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	43db      	mvns	r3, r3
 8008402:	401a      	ands	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a1a      	ldr	r2, [r3, #32]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f003 031f 	and.w	r3, r3, #31
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	431a      	orrs	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008440:	2302      	movs	r3, #2
 8008442:	e06d      	b.n	8008520 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a30      	ldr	r2, [pc, #192]	; (800852c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d004      	beq.n	8008478 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a2f      	ldr	r2, [pc, #188]	; (8008530 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d108      	bne.n	800848a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800847e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008490:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a20      	ldr	r2, [pc, #128]	; (800852c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d022      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b6:	d01d      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d018      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1c      	ldr	r2, [pc, #112]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d013      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1a      	ldr	r2, [pc, #104]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00e      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a15      	ldr	r2, [pc, #84]	; (8008530 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a16      	ldr	r2, [pc, #88]	; (8008540 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d004      	beq.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a15      	ldr	r2, [pc, #84]	; (8008544 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d10c      	bne.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	4313      	orrs	r3, r2
 8008504:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	40010000 	.word	0x40010000
 8008530:	40010400 	.word	0x40010400
 8008534:	40000400 	.word	0x40000400
 8008538:	40000800 	.word	0x40000800
 800853c:	40000c00 	.word	0x40000c00
 8008540:	40014000 	.word	0x40014000
 8008544:	40001800 	.word	0x40001800

08008548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e040      	b.n	8008618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800859a:	2b00      	cmp	r3, #0
 800859c:	d106      	bne.n	80085ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fa fb82 	bl	8002cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2224      	movs	r2, #36	; 0x24
 80085b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0201 	bic.w	r2, r2, #1
 80085c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fad2 	bl	8008b6c <UART_SetConfig>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e022      	b.n	8008618 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fd28 	bl	8009030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0201 	orr.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fdaf 	bl	8009174 <UART_CheckIdleState>
 8008616:	4603      	mov	r3, r0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008632:	2b20      	cmp	r3, #32
 8008634:	d145      	bne.n	80086c2 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <HAL_UART_Transmit_IT+0x22>
 800863c:	88fb      	ldrh	r3, [r7, #6]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e03e      	b.n	80086c4 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_UART_Transmit_IT+0x34>
 8008650:	2302      	movs	r3, #2
 8008652:	e037      	b.n	80086c4 <HAL_UART_Transmit_IT+0xa4>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	88fa      	ldrh	r2, [r7, #6]
 8008666:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	88fa      	ldrh	r2, [r7, #6]
 800866e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2221      	movs	r2, #33	; 0x21
 8008684:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868e:	d107      	bne.n	80086a0 <HAL_UART_Transmit_IT+0x80>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4a0d      	ldr	r2, [pc, #52]	; (80086d0 <HAL_UART_Transmit_IT+0xb0>)
 800869c:	669a      	str	r2, [r3, #104]	; 0x68
 800869e:	e002      	b.n	80086a6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4a0c      	ldr	r2, [pc, #48]	; (80086d4 <HAL_UART_Transmit_IT+0xb4>)
 80086a4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086bc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	e000      	b.n	80086c4 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80086c2:	2302      	movs	r3, #2
  }
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	080094e1 	.word	0x080094e1
 80086d4:	0800946f 	.word	0x0800946f

080086d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ea:	2b20      	cmp	r3, #32
 80086ec:	d12c      	bne.n	8008748 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <HAL_UART_Receive_IT+0x22>
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e025      	b.n	800874a <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_UART_Receive_IT+0x34>
 8008708:	2302      	movs	r3, #2
 800870a:	e01e      	b.n	800874a <HAL_UART_Receive_IT+0x72>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008736:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008738:	88fb      	ldrh	r3, [r7, #6]
 800873a:	461a      	mov	r2, r3
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 fdc8 	bl	80092d4 <UART_Start_Receive_IT>
 8008744:	4603      	mov	r3, r0
 8008746:	e000      	b.n	800874a <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008748:	2302      	movs	r3, #2
  }
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	f640 030f 	movw	r3, #2063	; 0x80f
 800877a:	4013      	ands	r3, r2
 800877c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d113      	bne.n	80087ac <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00e      	beq.n	80087ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	2b00      	cmp	r3, #0
 8008796:	d009      	beq.n	80087ac <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 81b9 	beq.w	8008b14 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
      }
      return;
 80087aa:	e1b3      	b.n	8008b14 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 80e3 	beq.w	800897a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d105      	bne.n	80087ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	4ba5      	ldr	r3, [pc, #660]	; (8008a58 <HAL_UART_IRQHandler+0x304>)
 80087c2:	4013      	ands	r3, r2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80d8 	beq.w	800897a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d010      	beq.n	80087f6 <HAL_UART_IRQHandler+0xa2>
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2201      	movs	r2, #1
 80087e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ec:	f043 0201 	orr.w	r2, r3, #1
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d010      	beq.n	8008822 <HAL_UART_IRQHandler+0xce>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2202      	movs	r2, #2
 8008810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008818:	f043 0204 	orr.w	r2, r3, #4
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d010      	beq.n	800884e <HAL_UART_IRQHandler+0xfa>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00b      	beq.n	800884e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2204      	movs	r2, #4
 800883c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008844:	f043 0202 	orr.w	r2, r3, #2
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	f003 0308 	and.w	r3, r3, #8
 8008854:	2b00      	cmp	r3, #0
 8008856:	d015      	beq.n	8008884 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	d104      	bne.n	800886c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800887a:	f043 0208 	orr.w	r2, r3, #8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800888a:	2b00      	cmp	r3, #0
 800888c:	d011      	beq.n	80088b2 <HAL_UART_IRQHandler+0x15e>
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00c      	beq.n	80088b2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088a8:	f043 0220 	orr.w	r2, r3, #32
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 812d 	beq.w	8008b18 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	f003 0320 	and.w	r3, r3, #32
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00c      	beq.n	80088e2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d007      	beq.n	80088e2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	d004      	beq.n	8008902 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d031      	beq.n	8008966 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fd6e 	bl	80093e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d123      	bne.n	800895e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008924:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892a:	2b00      	cmp	r3, #0
 800892c:	d013      	beq.n	8008956 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	4a4a      	ldr	r2, [pc, #296]	; (8008a5c <HAL_UART_IRQHandler+0x308>)
 8008934:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893a:	4618      	mov	r0, r3
 800893c:	f7fb fa36 	bl	8003dac <HAL_DMA_Abort_IT>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d017      	beq.n	8008976 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008954:	e00f      	b.n	8008976 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f8f2 	bl	8008b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	e00b      	b.n	8008976 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8ee 	bl	8008b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	e007      	b.n	8008976 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f8ea 	bl	8008b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008974:	e0d0      	b.n	8008b18 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008976:	bf00      	nop
    return;
 8008978:	e0ce      	b.n	8008b18 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800897e:	2b01      	cmp	r3, #1
 8008980:	f040 80a7 	bne.w	8008ad2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 80a1 	beq.w	8008ad2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f003 0310 	and.w	r3, r3, #16
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 809b 	beq.w	8008ad2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2210      	movs	r2, #16
 80089a2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ae:	2b40      	cmp	r3, #64	; 0x40
 80089b0:	d156      	bne.n	8008a60 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80089bc:	893b      	ldrh	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 80ac 	beq.w	8008b1c <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089ca:	893a      	ldrh	r2, [r7, #8]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	f080 80a5 	bcs.w	8008b1c <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	893a      	ldrh	r2, [r7, #8]
 80089d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e4:	d02a      	beq.n	8008a3c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f022 0201 	bic.w	r2, r2, #1
 8008a04:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a14:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0210 	bic.w	r2, r2, #16
 8008a30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fb f948 	bl	8003ccc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f87f 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a56:	e061      	b.n	8008b1c <HAL_UART_IRQHandler+0x3c8>
 8008a58:	04000120 	.word	0x04000120
 8008a5c:	08009443 	.word	0x08009443
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d050      	beq.n	8008b20 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8008a7e:	897b      	ldrh	r3, [r7, #10]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d04d      	beq.n	8008b20 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a92:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f022 0210 	bic.w	r2, r2, #16
 8008ac4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ac6:	897b      	ldrh	r3, [r7, #10]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f842 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ad0:	e026      	b.n	8008b20 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00d      	beq.n	8008af8 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d008      	beq.n	8008af8 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d01a      	beq.n	8008b24 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
    }
    return;
 8008af6:	e015      	b.n	8008b24 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d011      	beq.n	8008b26 <HAL_UART_IRQHandler+0x3d2>
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00c      	beq.n	8008b26 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fd25 	bl	800955c <UART_EndTransmit_IT>
    return;
 8008b12:	e008      	b.n	8008b26 <HAL_UART_IRQHandler+0x3d2>
      return;
 8008b14:	bf00      	nop
 8008b16:	e006      	b.n	8008b26 <HAL_UART_IRQHandler+0x3d2>
    return;
 8008b18:	bf00      	nop
 8008b1a:	e004      	b.n	8008b26 <HAL_UART_IRQHandler+0x3d2>
      return;
 8008b1c:	bf00      	nop
 8008b1e:	e002      	b.n	8008b26 <HAL_UART_IRQHandler+0x3d2>
      return;
 8008b20:	bf00      	nop
 8008b22:	e000      	b.n	8008b26 <HAL_UART_IRQHandler+0x3d2>
    return;
 8008b24:	bf00      	nop
  }

}
 8008b26:	3720      	adds	r7, #32
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	431a      	orrs	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	431a      	orrs	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	4ba7      	ldr	r3, [pc, #668]	; (8008e34 <UART_SetConfig+0x2c8>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6812      	ldr	r2, [r2, #0]
 8008b9e:	6979      	ldr	r1, [r7, #20]
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a95      	ldr	r2, [pc, #596]	; (8008e38 <UART_SetConfig+0x2cc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d120      	bne.n	8008c2a <UART_SetConfig+0xbe>
 8008be8:	4b94      	ldr	r3, [pc, #592]	; (8008e3c <UART_SetConfig+0x2d0>)
 8008bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d816      	bhi.n	8008c24 <UART_SetConfig+0xb8>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <UART_SetConfig+0x90>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c0d 	.word	0x08008c0d
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c13 	.word	0x08008c13
 8008c08:	08008c1f 	.word	0x08008c1f
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	77fb      	strb	r3, [r7, #31]
 8008c10:	e14f      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c12:	2302      	movs	r3, #2
 8008c14:	77fb      	strb	r3, [r7, #31]
 8008c16:	e14c      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	77fb      	strb	r3, [r7, #31]
 8008c1c:	e149      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c1e:	2308      	movs	r3, #8
 8008c20:	77fb      	strb	r3, [r7, #31]
 8008c22:	e146      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c24:	2310      	movs	r3, #16
 8008c26:	77fb      	strb	r3, [r7, #31]
 8008c28:	e143      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a84      	ldr	r2, [pc, #528]	; (8008e40 <UART_SetConfig+0x2d4>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d132      	bne.n	8008c9a <UART_SetConfig+0x12e>
 8008c34:	4b81      	ldr	r3, [pc, #516]	; (8008e3c <UART_SetConfig+0x2d0>)
 8008c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c3a:	f003 030c 	and.w	r3, r3, #12
 8008c3e:	2b0c      	cmp	r3, #12
 8008c40:	d828      	bhi.n	8008c94 <UART_SetConfig+0x128>
 8008c42:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <UART_SetConfig+0xdc>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008c7d 	.word	0x08008c7d
 8008c4c:	08008c95 	.word	0x08008c95
 8008c50:	08008c95 	.word	0x08008c95
 8008c54:	08008c95 	.word	0x08008c95
 8008c58:	08008c89 	.word	0x08008c89
 8008c5c:	08008c95 	.word	0x08008c95
 8008c60:	08008c95 	.word	0x08008c95
 8008c64:	08008c95 	.word	0x08008c95
 8008c68:	08008c83 	.word	0x08008c83
 8008c6c:	08008c95 	.word	0x08008c95
 8008c70:	08008c95 	.word	0x08008c95
 8008c74:	08008c95 	.word	0x08008c95
 8008c78:	08008c8f 	.word	0x08008c8f
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	77fb      	strb	r3, [r7, #31]
 8008c80:	e117      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c82:	2302      	movs	r3, #2
 8008c84:	77fb      	strb	r3, [r7, #31]
 8008c86:	e114      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	77fb      	strb	r3, [r7, #31]
 8008c8c:	e111      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c8e:	2308      	movs	r3, #8
 8008c90:	77fb      	strb	r3, [r7, #31]
 8008c92:	e10e      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c94:	2310      	movs	r3, #16
 8008c96:	77fb      	strb	r3, [r7, #31]
 8008c98:	e10b      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a69      	ldr	r2, [pc, #420]	; (8008e44 <UART_SetConfig+0x2d8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d120      	bne.n	8008ce6 <UART_SetConfig+0x17a>
 8008ca4:	4b65      	ldr	r3, [pc, #404]	; (8008e3c <UART_SetConfig+0x2d0>)
 8008ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008caa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008cae:	2b30      	cmp	r3, #48	; 0x30
 8008cb0:	d013      	beq.n	8008cda <UART_SetConfig+0x16e>
 8008cb2:	2b30      	cmp	r3, #48	; 0x30
 8008cb4:	d814      	bhi.n	8008ce0 <UART_SetConfig+0x174>
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d009      	beq.n	8008cce <UART_SetConfig+0x162>
 8008cba:	2b20      	cmp	r3, #32
 8008cbc:	d810      	bhi.n	8008ce0 <UART_SetConfig+0x174>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <UART_SetConfig+0x15c>
 8008cc2:	2b10      	cmp	r3, #16
 8008cc4:	d006      	beq.n	8008cd4 <UART_SetConfig+0x168>
 8008cc6:	e00b      	b.n	8008ce0 <UART_SetConfig+0x174>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	77fb      	strb	r3, [r7, #31]
 8008ccc:	e0f1      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008cce:	2302      	movs	r3, #2
 8008cd0:	77fb      	strb	r3, [r7, #31]
 8008cd2:	e0ee      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	77fb      	strb	r3, [r7, #31]
 8008cd8:	e0eb      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008cda:	2308      	movs	r3, #8
 8008cdc:	77fb      	strb	r3, [r7, #31]
 8008cde:	e0e8      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008ce0:	2310      	movs	r3, #16
 8008ce2:	77fb      	strb	r3, [r7, #31]
 8008ce4:	e0e5      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a57      	ldr	r2, [pc, #348]	; (8008e48 <UART_SetConfig+0x2dc>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d120      	bne.n	8008d32 <UART_SetConfig+0x1c6>
 8008cf0:	4b52      	ldr	r3, [pc, #328]	; (8008e3c <UART_SetConfig+0x2d0>)
 8008cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8008cfc:	d013      	beq.n	8008d26 <UART_SetConfig+0x1ba>
 8008cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8008d00:	d814      	bhi.n	8008d2c <UART_SetConfig+0x1c0>
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d009      	beq.n	8008d1a <UART_SetConfig+0x1ae>
 8008d06:	2b80      	cmp	r3, #128	; 0x80
 8008d08:	d810      	bhi.n	8008d2c <UART_SetConfig+0x1c0>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <UART_SetConfig+0x1a8>
 8008d0e:	2b40      	cmp	r3, #64	; 0x40
 8008d10:	d006      	beq.n	8008d20 <UART_SetConfig+0x1b4>
 8008d12:	e00b      	b.n	8008d2c <UART_SetConfig+0x1c0>
 8008d14:	2300      	movs	r3, #0
 8008d16:	77fb      	strb	r3, [r7, #31]
 8008d18:	e0cb      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	77fb      	strb	r3, [r7, #31]
 8008d1e:	e0c8      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d20:	2304      	movs	r3, #4
 8008d22:	77fb      	strb	r3, [r7, #31]
 8008d24:	e0c5      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d26:	2308      	movs	r3, #8
 8008d28:	77fb      	strb	r3, [r7, #31]
 8008d2a:	e0c2      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	77fb      	strb	r3, [r7, #31]
 8008d30:	e0bf      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a45      	ldr	r2, [pc, #276]	; (8008e4c <UART_SetConfig+0x2e0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d125      	bne.n	8008d88 <UART_SetConfig+0x21c>
 8008d3c:	4b3f      	ldr	r3, [pc, #252]	; (8008e3c <UART_SetConfig+0x2d0>)
 8008d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d4a:	d017      	beq.n	8008d7c <UART_SetConfig+0x210>
 8008d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d50:	d817      	bhi.n	8008d82 <UART_SetConfig+0x216>
 8008d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d56:	d00b      	beq.n	8008d70 <UART_SetConfig+0x204>
 8008d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d5c:	d811      	bhi.n	8008d82 <UART_SetConfig+0x216>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <UART_SetConfig+0x1fe>
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d66:	d006      	beq.n	8008d76 <UART_SetConfig+0x20a>
 8008d68:	e00b      	b.n	8008d82 <UART_SetConfig+0x216>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	77fb      	strb	r3, [r7, #31]
 8008d6e:	e0a0      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d70:	2302      	movs	r3, #2
 8008d72:	77fb      	strb	r3, [r7, #31]
 8008d74:	e09d      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d76:	2304      	movs	r3, #4
 8008d78:	77fb      	strb	r3, [r7, #31]
 8008d7a:	e09a      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d7c:	2308      	movs	r3, #8
 8008d7e:	77fb      	strb	r3, [r7, #31]
 8008d80:	e097      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d82:	2310      	movs	r3, #16
 8008d84:	77fb      	strb	r3, [r7, #31]
 8008d86:	e094      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a30      	ldr	r2, [pc, #192]	; (8008e50 <UART_SetConfig+0x2e4>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d125      	bne.n	8008dde <UART_SetConfig+0x272>
 8008d92:	4b2a      	ldr	r3, [pc, #168]	; (8008e3c <UART_SetConfig+0x2d0>)
 8008d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008da0:	d017      	beq.n	8008dd2 <UART_SetConfig+0x266>
 8008da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008da6:	d817      	bhi.n	8008dd8 <UART_SetConfig+0x26c>
 8008da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dac:	d00b      	beq.n	8008dc6 <UART_SetConfig+0x25a>
 8008dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db2:	d811      	bhi.n	8008dd8 <UART_SetConfig+0x26c>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <UART_SetConfig+0x254>
 8008db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dbc:	d006      	beq.n	8008dcc <UART_SetConfig+0x260>
 8008dbe:	e00b      	b.n	8008dd8 <UART_SetConfig+0x26c>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	77fb      	strb	r3, [r7, #31]
 8008dc4:	e075      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	77fb      	strb	r3, [r7, #31]
 8008dca:	e072      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	77fb      	strb	r3, [r7, #31]
 8008dd0:	e06f      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008dd2:	2308      	movs	r3, #8
 8008dd4:	77fb      	strb	r3, [r7, #31]
 8008dd6:	e06c      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	77fb      	strb	r3, [r7, #31]
 8008ddc:	e069      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a1c      	ldr	r2, [pc, #112]	; (8008e54 <UART_SetConfig+0x2e8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d137      	bne.n	8008e58 <UART_SetConfig+0x2ec>
 8008de8:	4b14      	ldr	r3, [pc, #80]	; (8008e3c <UART_SetConfig+0x2d0>)
 8008dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008df2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008df6:	d017      	beq.n	8008e28 <UART_SetConfig+0x2bc>
 8008df8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dfc:	d817      	bhi.n	8008e2e <UART_SetConfig+0x2c2>
 8008dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e02:	d00b      	beq.n	8008e1c <UART_SetConfig+0x2b0>
 8008e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e08:	d811      	bhi.n	8008e2e <UART_SetConfig+0x2c2>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <UART_SetConfig+0x2aa>
 8008e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e12:	d006      	beq.n	8008e22 <UART_SetConfig+0x2b6>
 8008e14:	e00b      	b.n	8008e2e <UART_SetConfig+0x2c2>
 8008e16:	2300      	movs	r3, #0
 8008e18:	77fb      	strb	r3, [r7, #31]
 8008e1a:	e04a      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	77fb      	strb	r3, [r7, #31]
 8008e20:	e047      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008e22:	2304      	movs	r3, #4
 8008e24:	77fb      	strb	r3, [r7, #31]
 8008e26:	e044      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008e28:	2308      	movs	r3, #8
 8008e2a:	77fb      	strb	r3, [r7, #31]
 8008e2c:	e041      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008e2e:	2310      	movs	r3, #16
 8008e30:	77fb      	strb	r3, [r7, #31]
 8008e32:	e03e      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008e34:	efff69f3 	.word	0xefff69f3
 8008e38:	40011000 	.word	0x40011000
 8008e3c:	40023800 	.word	0x40023800
 8008e40:	40004400 	.word	0x40004400
 8008e44:	40004800 	.word	0x40004800
 8008e48:	40004c00 	.word	0x40004c00
 8008e4c:	40005000 	.word	0x40005000
 8008e50:	40011400 	.word	0x40011400
 8008e54:	40007800 	.word	0x40007800
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a71      	ldr	r2, [pc, #452]	; (8009024 <UART_SetConfig+0x4b8>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d125      	bne.n	8008eae <UART_SetConfig+0x342>
 8008e62:	4b71      	ldr	r3, [pc, #452]	; (8009028 <UART_SetConfig+0x4bc>)
 8008e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e70:	d017      	beq.n	8008ea2 <UART_SetConfig+0x336>
 8008e72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e76:	d817      	bhi.n	8008ea8 <UART_SetConfig+0x33c>
 8008e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e7c:	d00b      	beq.n	8008e96 <UART_SetConfig+0x32a>
 8008e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e82:	d811      	bhi.n	8008ea8 <UART_SetConfig+0x33c>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <UART_SetConfig+0x324>
 8008e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e8c:	d006      	beq.n	8008e9c <UART_SetConfig+0x330>
 8008e8e:	e00b      	b.n	8008ea8 <UART_SetConfig+0x33c>
 8008e90:	2300      	movs	r3, #0
 8008e92:	77fb      	strb	r3, [r7, #31]
 8008e94:	e00d      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008e96:	2302      	movs	r3, #2
 8008e98:	77fb      	strb	r3, [r7, #31]
 8008e9a:	e00a      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	77fb      	strb	r3, [r7, #31]
 8008ea0:	e007      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008ea2:	2308      	movs	r3, #8
 8008ea4:	77fb      	strb	r3, [r7, #31]
 8008ea6:	e004      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	77fb      	strb	r3, [r7, #31]
 8008eac:	e001      	b.n	8008eb2 <UART_SetConfig+0x346>
 8008eae:	2310      	movs	r3, #16
 8008eb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eba:	d15b      	bne.n	8008f74 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008ebc:	7ffb      	ldrb	r3, [r7, #31]
 8008ebe:	2b08      	cmp	r3, #8
 8008ec0:	d827      	bhi.n	8008f12 <UART_SetConfig+0x3a6>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <UART_SetConfig+0x35c>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008eed 	.word	0x08008eed
 8008ecc:	08008ef5 	.word	0x08008ef5
 8008ed0:	08008efd 	.word	0x08008efd
 8008ed4:	08008f13 	.word	0x08008f13
 8008ed8:	08008f03 	.word	0x08008f03
 8008edc:	08008f13 	.word	0x08008f13
 8008ee0:	08008f13 	.word	0x08008f13
 8008ee4:	08008f13 	.word	0x08008f13
 8008ee8:	08008f0b 	.word	0x08008f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eec:	f7fc ff5e 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8008ef0:	61b8      	str	r0, [r7, #24]
        break;
 8008ef2:	e013      	b.n	8008f1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ef4:	f7fc ff6e 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8008ef8:	61b8      	str	r0, [r7, #24]
        break;
 8008efa:	e00f      	b.n	8008f1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008efc:	4b4b      	ldr	r3, [pc, #300]	; (800902c <UART_SetConfig+0x4c0>)
 8008efe:	61bb      	str	r3, [r7, #24]
        break;
 8008f00:	e00c      	b.n	8008f1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f02:	f7fc fe65 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8008f06:	61b8      	str	r0, [r7, #24]
        break;
 8008f08:	e008      	b.n	8008f1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0e:	61bb      	str	r3, [r7, #24]
        break;
 8008f10:	e004      	b.n	8008f1c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	77bb      	strb	r3, [r7, #30]
        break;
 8008f1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d074      	beq.n	800900c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	005a      	lsls	r2, r3, #1
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	441a      	add	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b0f      	cmp	r3, #15
 8008f3e:	d916      	bls.n	8008f6e <UART_SetConfig+0x402>
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f46:	d212      	bcs.n	8008f6e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	f023 030f 	bic.w	r3, r3, #15
 8008f50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	085b      	lsrs	r3, r3, #1
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	89fb      	ldrh	r3, [r7, #14]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	89fa      	ldrh	r2, [r7, #14]
 8008f6a:	60da      	str	r2, [r3, #12]
 8008f6c:	e04e      	b.n	800900c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	77bb      	strb	r3, [r7, #30]
 8008f72:	e04b      	b.n	800900c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f74:	7ffb      	ldrb	r3, [r7, #31]
 8008f76:	2b08      	cmp	r3, #8
 8008f78:	d827      	bhi.n	8008fca <UART_SetConfig+0x45e>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <UART_SetConfig+0x414>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008fa5 	.word	0x08008fa5
 8008f84:	08008fad 	.word	0x08008fad
 8008f88:	08008fb5 	.word	0x08008fb5
 8008f8c:	08008fcb 	.word	0x08008fcb
 8008f90:	08008fbb 	.word	0x08008fbb
 8008f94:	08008fcb 	.word	0x08008fcb
 8008f98:	08008fcb 	.word	0x08008fcb
 8008f9c:	08008fcb 	.word	0x08008fcb
 8008fa0:	08008fc3 	.word	0x08008fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fa4:	f7fc ff02 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8008fa8:	61b8      	str	r0, [r7, #24]
        break;
 8008faa:	e013      	b.n	8008fd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fac:	f7fc ff12 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8008fb0:	61b8      	str	r0, [r7, #24]
        break;
 8008fb2:	e00f      	b.n	8008fd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fb4:	4b1d      	ldr	r3, [pc, #116]	; (800902c <UART_SetConfig+0x4c0>)
 8008fb6:	61bb      	str	r3, [r7, #24]
        break;
 8008fb8:	e00c      	b.n	8008fd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fba:	f7fc fe09 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8008fbe:	61b8      	str	r0, [r7, #24]
        break;
 8008fc0:	e008      	b.n	8008fd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fc6:	61bb      	str	r3, [r7, #24]
        break;
 8008fc8:	e004      	b.n	8008fd4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	77bb      	strb	r3, [r7, #30]
        break;
 8008fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d018      	beq.n	800900c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	085a      	lsrs	r2, r3, #1
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	441a      	add	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b0f      	cmp	r3, #15
 8008ff4:	d908      	bls.n	8009008 <UART_SetConfig+0x49c>
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ffc:	d204      	bcs.n	8009008 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	60da      	str	r2, [r3, #12]
 8009006:	e001      	b.n	800900c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009018:	7fbb      	ldrb	r3, [r7, #30]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3720      	adds	r7, #32
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40007c00 	.word	0x40007c00
 8009028:	40023800 	.word	0x40023800
 800902c:	00f42400 	.word	0x00f42400

08009030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00a      	beq.n	800905a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00a      	beq.n	800907c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00a      	beq.n	800909e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	430a      	orrs	r2, r1
 800909c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	f003 0308 	and.w	r3, r3, #8
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	f003 0310 	and.w	r3, r3, #16
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00a      	beq.n	80090e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	f003 0320 	and.w	r3, r3, #32
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00a      	beq.n	8009104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910c:	2b00      	cmp	r3, #0
 800910e:	d01a      	beq.n	8009146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800912e:	d10a      	bne.n	8009146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	430a      	orrs	r2, r1
 8009166:	605a      	str	r2, [r3, #4]
  }
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af02      	add	r7, sp, #8
 800917a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009184:	f7f9 fe5a 	bl	8002e3c <HAL_GetTick>
 8009188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b08      	cmp	r3, #8
 8009196:	d10e      	bne.n	80091b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f817 	bl	80091da <UART_WaitOnFlagUntilTimeout>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e00d      	b.n	80091d2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	603b      	str	r3, [r7, #0]
 80091e6:	4613      	mov	r3, r2
 80091e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ea:	e05e      	b.n	80092aa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f2:	d05a      	beq.n	80092aa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091f4:	f7f9 fe22 	bl	8002e3c <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	429a      	cmp	r2, r3
 8009202:	d302      	bcc.n	800920a <UART_WaitOnFlagUntilTimeout+0x30>
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d11b      	bne.n	8009242 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009218:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0201 	bic.w	r2, r2, #1
 8009228:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2220      	movs	r2, #32
 800922e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2220      	movs	r2, #32
 8009234:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e043      	b.n	80092ca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0304 	and.w	r3, r3, #4
 800924c:	2b00      	cmp	r3, #0
 800924e:	d02c      	beq.n	80092aa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800925a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800925e:	d124      	bne.n	80092aa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009268:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009278:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0201 	bic.w	r2, r2, #1
 8009288:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2220      	movs	r2, #32
 800928e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2220      	movs	r2, #32
 8009294:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2220      	movs	r2, #32
 800929a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e00f      	b.n	80092ca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69da      	ldr	r2, [r3, #28]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4013      	ands	r3, r2
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	bf0c      	ite	eq
 80092ba:	2301      	moveq	r3, #1
 80092bc:	2300      	movne	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d091      	beq.n	80091ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	88fa      	ldrh	r2, [r7, #6]
 80092ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	88fa      	ldrh	r2, [r7, #6]
 80092f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009306:	d10e      	bne.n	8009326 <UART_Start_Receive_IT+0x52>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d105      	bne.n	800931c <UART_Start_Receive_IT+0x48>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009316:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800931a:	e02d      	b.n	8009378 <UART_Start_Receive_IT+0xa4>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	22ff      	movs	r2, #255	; 0xff
 8009320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009324:	e028      	b.n	8009378 <UART_Start_Receive_IT+0xa4>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10d      	bne.n	800934a <UART_Start_Receive_IT+0x76>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d104      	bne.n	8009340 <UART_Start_Receive_IT+0x6c>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	22ff      	movs	r2, #255	; 0xff
 800933a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800933e:	e01b      	b.n	8009378 <UART_Start_Receive_IT+0xa4>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	227f      	movs	r2, #127	; 0x7f
 8009344:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009348:	e016      	b.n	8009378 <UART_Start_Receive_IT+0xa4>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009352:	d10d      	bne.n	8009370 <UART_Start_Receive_IT+0x9c>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d104      	bne.n	8009366 <UART_Start_Receive_IT+0x92>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	227f      	movs	r2, #127	; 0x7f
 8009360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009364:	e008      	b.n	8009378 <UART_Start_Receive_IT+0xa4>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	223f      	movs	r2, #63	; 0x3f
 800936a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800936e:	e003      	b.n	8009378 <UART_Start_Receive_IT+0xa4>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2222      	movs	r2, #34	; 0x22
 8009384:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689a      	ldr	r2, [r3, #8]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f042 0201 	orr.w	r2, r2, #1
 8009394:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939e:	d107      	bne.n	80093b0 <UART_Start_Receive_IT+0xdc>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4a0c      	ldr	r2, [pc, #48]	; (80093dc <UART_Start_Receive_IT+0x108>)
 80093ac:	665a      	str	r2, [r3, #100]	; 0x64
 80093ae:	e002      	b.n	80093b6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4a0b      	ldr	r2, [pc, #44]	; (80093e0 <UART_Start_Receive_IT+0x10c>)
 80093b4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80093cc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	08009663 	.word	0x08009663
 80093e0:	0800958f 	.word	0x0800958f

080093e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0201 	bic.w	r2, r2, #1
 800940a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009410:	2b01      	cmp	r3, #1
 8009412:	d107      	bne.n	8009424 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f022 0210 	bic.w	r2, r2, #16
 8009422:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff fb6d 	bl	8008b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800947a:	2b21      	cmp	r3, #33	; 0x21
 800947c:	d12a      	bne.n	80094d4 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d110      	bne.n	80094ac <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009498:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094a8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80094aa:	e013      	b.n	80094d4 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ec:	2b21      	cmp	r3, #33	; 0x21
 80094ee:	d12f      	bne.n	8009550 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d110      	bne.n	800951e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800950a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800951a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800951c:	e018      	b.n	8009550 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009522:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009532:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009538:	1c9a      	adds	r2, r3, #2
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009550:	bf00      	nop
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009572:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff fad3 	bl	8008b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800959c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	2b22      	cmp	r3, #34	; 0x22
 80095a4:	d151      	bne.n	800964a <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095ae:	89bb      	ldrh	r3, [r7, #12]
 80095b0:	b2d9      	uxtb	r1, r3
 80095b2:	89fb      	ldrh	r3, [r7, #14]
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ba:	400a      	ands	r2, r1
 80095bc:	b2d2      	uxtb	r2, r2
 80095be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c4:	1c5a      	adds	r2, r3, #1
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d138      	bne.n	800965a <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0201 	bic.w	r2, r2, #1
 8009606:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009618:	2b01      	cmp	r3, #1
 800961a:	d10f      	bne.n	800963c <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 0210 	bic.w	r2, r2, #16
 800962a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff fa8d 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
 800963a:	e002      	b.n	8009642 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7f8 fb31 	bl	8001ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009648:	e007      	b.n	800965a <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	699a      	ldr	r2, [r3, #24]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0208 	orr.w	r2, r2, #8
 8009658:	619a      	str	r2, [r3, #24]
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009670:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009676:	2b22      	cmp	r3, #34	; 0x22
 8009678:	d151      	bne.n	800971e <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009686:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009688:	89ba      	ldrh	r2, [r7, #12]
 800968a:	89fb      	ldrh	r3, [r7, #14]
 800968c:	4013      	ands	r3, r2
 800968e:	b29a      	uxth	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009698:	1c9a      	adds	r2, r3, #2
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d138      	bne.n	800972e <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80096ca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689a      	ldr	r2, [r3, #8]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0201 	bic.w	r2, r2, #1
 80096da:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d10f      	bne.n	8009710 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0210 	bic.w	r2, r2, #16
 80096fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fa23 	bl	8008b54 <HAL_UARTEx_RxEventCallback>
 800970e:	e002      	b.n	8009716 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7f8 fac7 	bl	8001ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800971c:	e007      	b.n	800972e <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	699a      	ldr	r2, [r3, #24]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f042 0208 	orr.w	r2, r2, #8
 800972c:	619a      	str	r2, [r3, #24]
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <arm_pid_init_f32>:
 8009738:	ed90 7a08 	vldr	s14, [r0, #32]
 800973c:	edd0 7a06 	vldr	s15, [r0, #24]
 8009740:	ed90 6a07 	vldr	s12, [r0, #28]
 8009744:	eef1 6a67 	vneg.f32	s13, s15
 8009748:	ed80 7a02 	vstr	s14, [r0, #8]
 800974c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009750:	ee37 6a07 	vadd.f32	s12, s14, s14
 8009754:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009758:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800975c:	edc0 7a00 	vstr	s15, [r0]
 8009760:	ed80 7a01 	vstr	s14, [r0, #4]
 8009764:	b901      	cbnz	r1, 8009768 <arm_pid_init_f32+0x30>
 8009766:	4770      	bx	lr
 8009768:	2300      	movs	r3, #0
 800976a:	60c3      	str	r3, [r0, #12]
 800976c:	6103      	str	r3, [r0, #16]
 800976e:	6143      	str	r3, [r0, #20]
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop

08009774 <__errno>:
 8009774:	4b01      	ldr	r3, [pc, #4]	; (800977c <__errno+0x8>)
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20000070 	.word	0x20000070

08009780 <__libc_init_array>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4d0d      	ldr	r5, [pc, #52]	; (80097b8 <__libc_init_array+0x38>)
 8009784:	4c0d      	ldr	r4, [pc, #52]	; (80097bc <__libc_init_array+0x3c>)
 8009786:	1b64      	subs	r4, r4, r5
 8009788:	10a4      	asrs	r4, r4, #2
 800978a:	2600      	movs	r6, #0
 800978c:	42a6      	cmp	r6, r4
 800978e:	d109      	bne.n	80097a4 <__libc_init_array+0x24>
 8009790:	4d0b      	ldr	r5, [pc, #44]	; (80097c0 <__libc_init_array+0x40>)
 8009792:	4c0c      	ldr	r4, [pc, #48]	; (80097c4 <__libc_init_array+0x44>)
 8009794:	f005 f884 	bl	800e8a0 <_init>
 8009798:	1b64      	subs	r4, r4, r5
 800979a:	10a4      	asrs	r4, r4, #2
 800979c:	2600      	movs	r6, #0
 800979e:	42a6      	cmp	r6, r4
 80097a0:	d105      	bne.n	80097ae <__libc_init_array+0x2e>
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a8:	4798      	blx	r3
 80097aa:	3601      	adds	r6, #1
 80097ac:	e7ee      	b.n	800978c <__libc_init_array+0xc>
 80097ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b2:	4798      	blx	r3
 80097b4:	3601      	adds	r6, #1
 80097b6:	e7f2      	b.n	800979e <__libc_init_array+0x1e>
 80097b8:	0800ee04 	.word	0x0800ee04
 80097bc:	0800ee04 	.word	0x0800ee04
 80097c0:	0800ee04 	.word	0x0800ee04
 80097c4:	0800ee08 	.word	0x0800ee08

080097c8 <memset>:
 80097c8:	4402      	add	r2, r0
 80097ca:	4603      	mov	r3, r0
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d100      	bne.n	80097d2 <memset+0xa>
 80097d0:	4770      	bx	lr
 80097d2:	f803 1b01 	strb.w	r1, [r3], #1
 80097d6:	e7f9      	b.n	80097cc <memset+0x4>

080097d8 <__cvt>:
 80097d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097dc:	ec55 4b10 	vmov	r4, r5, d0
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	460e      	mov	r6, r1
 80097e4:	4619      	mov	r1, r3
 80097e6:	462b      	mov	r3, r5
 80097e8:	bfbb      	ittet	lt
 80097ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097ee:	461d      	movlt	r5, r3
 80097f0:	2300      	movge	r3, #0
 80097f2:	232d      	movlt	r3, #45	; 0x2d
 80097f4:	700b      	strb	r3, [r1, #0]
 80097f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097fc:	4691      	mov	r9, r2
 80097fe:	f023 0820 	bic.w	r8, r3, #32
 8009802:	bfbc      	itt	lt
 8009804:	4622      	movlt	r2, r4
 8009806:	4614      	movlt	r4, r2
 8009808:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800980c:	d005      	beq.n	800981a <__cvt+0x42>
 800980e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009812:	d100      	bne.n	8009816 <__cvt+0x3e>
 8009814:	3601      	adds	r6, #1
 8009816:	2102      	movs	r1, #2
 8009818:	e000      	b.n	800981c <__cvt+0x44>
 800981a:	2103      	movs	r1, #3
 800981c:	ab03      	add	r3, sp, #12
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	ab02      	add	r3, sp, #8
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	ec45 4b10 	vmov	d0, r4, r5
 8009828:	4653      	mov	r3, sl
 800982a:	4632      	mov	r2, r6
 800982c:	f001 fe48 	bl	800b4c0 <_dtoa_r>
 8009830:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009834:	4607      	mov	r7, r0
 8009836:	d102      	bne.n	800983e <__cvt+0x66>
 8009838:	f019 0f01 	tst.w	r9, #1
 800983c:	d022      	beq.n	8009884 <__cvt+0xac>
 800983e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009842:	eb07 0906 	add.w	r9, r7, r6
 8009846:	d110      	bne.n	800986a <__cvt+0x92>
 8009848:	783b      	ldrb	r3, [r7, #0]
 800984a:	2b30      	cmp	r3, #48	; 0x30
 800984c:	d10a      	bne.n	8009864 <__cvt+0x8c>
 800984e:	2200      	movs	r2, #0
 8009850:	2300      	movs	r3, #0
 8009852:	4620      	mov	r0, r4
 8009854:	4629      	mov	r1, r5
 8009856:	f7f7 f957 	bl	8000b08 <__aeabi_dcmpeq>
 800985a:	b918      	cbnz	r0, 8009864 <__cvt+0x8c>
 800985c:	f1c6 0601 	rsb	r6, r6, #1
 8009860:	f8ca 6000 	str.w	r6, [sl]
 8009864:	f8da 3000 	ldr.w	r3, [sl]
 8009868:	4499      	add	r9, r3
 800986a:	2200      	movs	r2, #0
 800986c:	2300      	movs	r3, #0
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f7f7 f949 	bl	8000b08 <__aeabi_dcmpeq>
 8009876:	b108      	cbz	r0, 800987c <__cvt+0xa4>
 8009878:	f8cd 900c 	str.w	r9, [sp, #12]
 800987c:	2230      	movs	r2, #48	; 0x30
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	454b      	cmp	r3, r9
 8009882:	d307      	bcc.n	8009894 <__cvt+0xbc>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009888:	1bdb      	subs	r3, r3, r7
 800988a:	4638      	mov	r0, r7
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	b004      	add	sp, #16
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009894:	1c59      	adds	r1, r3, #1
 8009896:	9103      	str	r1, [sp, #12]
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	e7f0      	b.n	800987e <__cvt+0xa6>

0800989c <__exponent>:
 800989c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800989e:	4603      	mov	r3, r0
 80098a0:	2900      	cmp	r1, #0
 80098a2:	bfb8      	it	lt
 80098a4:	4249      	neglt	r1, r1
 80098a6:	f803 2b02 	strb.w	r2, [r3], #2
 80098aa:	bfb4      	ite	lt
 80098ac:	222d      	movlt	r2, #45	; 0x2d
 80098ae:	222b      	movge	r2, #43	; 0x2b
 80098b0:	2909      	cmp	r1, #9
 80098b2:	7042      	strb	r2, [r0, #1]
 80098b4:	dd2a      	ble.n	800990c <__exponent+0x70>
 80098b6:	f10d 0407 	add.w	r4, sp, #7
 80098ba:	46a4      	mov	ip, r4
 80098bc:	270a      	movs	r7, #10
 80098be:	46a6      	mov	lr, r4
 80098c0:	460a      	mov	r2, r1
 80098c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80098c6:	fb07 1516 	mls	r5, r7, r6, r1
 80098ca:	3530      	adds	r5, #48	; 0x30
 80098cc:	2a63      	cmp	r2, #99	; 0x63
 80098ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80098d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098d6:	4631      	mov	r1, r6
 80098d8:	dcf1      	bgt.n	80098be <__exponent+0x22>
 80098da:	3130      	adds	r1, #48	; 0x30
 80098dc:	f1ae 0502 	sub.w	r5, lr, #2
 80098e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098e4:	1c44      	adds	r4, r0, #1
 80098e6:	4629      	mov	r1, r5
 80098e8:	4561      	cmp	r1, ip
 80098ea:	d30a      	bcc.n	8009902 <__exponent+0x66>
 80098ec:	f10d 0209 	add.w	r2, sp, #9
 80098f0:	eba2 020e 	sub.w	r2, r2, lr
 80098f4:	4565      	cmp	r5, ip
 80098f6:	bf88      	it	hi
 80098f8:	2200      	movhi	r2, #0
 80098fa:	4413      	add	r3, r2
 80098fc:	1a18      	subs	r0, r3, r0
 80098fe:	b003      	add	sp, #12
 8009900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009906:	f804 2f01 	strb.w	r2, [r4, #1]!
 800990a:	e7ed      	b.n	80098e8 <__exponent+0x4c>
 800990c:	2330      	movs	r3, #48	; 0x30
 800990e:	3130      	adds	r1, #48	; 0x30
 8009910:	7083      	strb	r3, [r0, #2]
 8009912:	70c1      	strb	r1, [r0, #3]
 8009914:	1d03      	adds	r3, r0, #4
 8009916:	e7f1      	b.n	80098fc <__exponent+0x60>

08009918 <_printf_float>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	ed2d 8b02 	vpush	{d8}
 8009920:	b08d      	sub	sp, #52	; 0x34
 8009922:	460c      	mov	r4, r1
 8009924:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009928:	4616      	mov	r6, r2
 800992a:	461f      	mov	r7, r3
 800992c:	4605      	mov	r5, r0
 800992e:	f002 ff23 	bl	800c778 <_localeconv_r>
 8009932:	f8d0 a000 	ldr.w	sl, [r0]
 8009936:	4650      	mov	r0, sl
 8009938:	f7f6 fc6a 	bl	8000210 <strlen>
 800993c:	2300      	movs	r3, #0
 800993e:	930a      	str	r3, [sp, #40]	; 0x28
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	f8d8 3000 	ldr.w	r3, [r8]
 8009948:	f894 b018 	ldrb.w	fp, [r4, #24]
 800994c:	3307      	adds	r3, #7
 800994e:	f023 0307 	bic.w	r3, r3, #7
 8009952:	f103 0208 	add.w	r2, r3, #8
 8009956:	f8c8 2000 	str.w	r2, [r8]
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009962:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009966:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009970:	ee08 0a10 	vmov	s16, r0
 8009974:	4b9f      	ldr	r3, [pc, #636]	; (8009bf4 <_printf_float+0x2dc>)
 8009976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800997a:	f04f 32ff 	mov.w	r2, #4294967295
 800997e:	f7f7 f8f5 	bl	8000b6c <__aeabi_dcmpun>
 8009982:	bb88      	cbnz	r0, 80099e8 <_printf_float+0xd0>
 8009984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009988:	4b9a      	ldr	r3, [pc, #616]	; (8009bf4 <_printf_float+0x2dc>)
 800998a:	f04f 32ff 	mov.w	r2, #4294967295
 800998e:	f7f7 f8cf 	bl	8000b30 <__aeabi_dcmple>
 8009992:	bb48      	cbnz	r0, 80099e8 <_printf_float+0xd0>
 8009994:	2200      	movs	r2, #0
 8009996:	2300      	movs	r3, #0
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	f7f7 f8be 	bl	8000b1c <__aeabi_dcmplt>
 80099a0:	b110      	cbz	r0, 80099a8 <_printf_float+0x90>
 80099a2:	232d      	movs	r3, #45	; 0x2d
 80099a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a8:	4b93      	ldr	r3, [pc, #588]	; (8009bf8 <_printf_float+0x2e0>)
 80099aa:	4894      	ldr	r0, [pc, #592]	; (8009bfc <_printf_float+0x2e4>)
 80099ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099b0:	bf94      	ite	ls
 80099b2:	4698      	movls	r8, r3
 80099b4:	4680      	movhi	r8, r0
 80099b6:	2303      	movs	r3, #3
 80099b8:	6123      	str	r3, [r4, #16]
 80099ba:	9b05      	ldr	r3, [sp, #20]
 80099bc:	f023 0204 	bic.w	r2, r3, #4
 80099c0:	6022      	str	r2, [r4, #0]
 80099c2:	f04f 0900 	mov.w	r9, #0
 80099c6:	9700      	str	r7, [sp, #0]
 80099c8:	4633      	mov	r3, r6
 80099ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80099cc:	4621      	mov	r1, r4
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 f9d8 	bl	8009d84 <_printf_common>
 80099d4:	3001      	adds	r0, #1
 80099d6:	f040 8090 	bne.w	8009afa <_printf_float+0x1e2>
 80099da:	f04f 30ff 	mov.w	r0, #4294967295
 80099de:	b00d      	add	sp, #52	; 0x34
 80099e0:	ecbd 8b02 	vpop	{d8}
 80099e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e8:	4642      	mov	r2, r8
 80099ea:	464b      	mov	r3, r9
 80099ec:	4640      	mov	r0, r8
 80099ee:	4649      	mov	r1, r9
 80099f0:	f7f7 f8bc 	bl	8000b6c <__aeabi_dcmpun>
 80099f4:	b140      	cbz	r0, 8009a08 <_printf_float+0xf0>
 80099f6:	464b      	mov	r3, r9
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bfbc      	itt	lt
 80099fc:	232d      	movlt	r3, #45	; 0x2d
 80099fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a02:	487f      	ldr	r0, [pc, #508]	; (8009c00 <_printf_float+0x2e8>)
 8009a04:	4b7f      	ldr	r3, [pc, #508]	; (8009c04 <_printf_float+0x2ec>)
 8009a06:	e7d1      	b.n	80099ac <_printf_float+0x94>
 8009a08:	6863      	ldr	r3, [r4, #4]
 8009a0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a0e:	9206      	str	r2, [sp, #24]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	d13f      	bne.n	8009a94 <_printf_float+0x17c>
 8009a14:	2306      	movs	r3, #6
 8009a16:	6063      	str	r3, [r4, #4]
 8009a18:	9b05      	ldr	r3, [sp, #20]
 8009a1a:	6861      	ldr	r1, [r4, #4]
 8009a1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a20:	2300      	movs	r3, #0
 8009a22:	9303      	str	r3, [sp, #12]
 8009a24:	ab0a      	add	r3, sp, #40	; 0x28
 8009a26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a2a:	ab09      	add	r3, sp, #36	; 0x24
 8009a2c:	ec49 8b10 	vmov	d0, r8, r9
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	6022      	str	r2, [r4, #0]
 8009a34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f7ff fecd 	bl	80097d8 <__cvt>
 8009a3e:	9b06      	ldr	r3, [sp, #24]
 8009a40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a42:	2b47      	cmp	r3, #71	; 0x47
 8009a44:	4680      	mov	r8, r0
 8009a46:	d108      	bne.n	8009a5a <_printf_float+0x142>
 8009a48:	1cc8      	adds	r0, r1, #3
 8009a4a:	db02      	blt.n	8009a52 <_printf_float+0x13a>
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	4299      	cmp	r1, r3
 8009a50:	dd41      	ble.n	8009ad6 <_printf_float+0x1be>
 8009a52:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a56:	fa5f fb8b 	uxtb.w	fp, fp
 8009a5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a5e:	d820      	bhi.n	8009aa2 <_printf_float+0x18a>
 8009a60:	3901      	subs	r1, #1
 8009a62:	465a      	mov	r2, fp
 8009a64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a68:	9109      	str	r1, [sp, #36]	; 0x24
 8009a6a:	f7ff ff17 	bl	800989c <__exponent>
 8009a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a70:	1813      	adds	r3, r2, r0
 8009a72:	2a01      	cmp	r2, #1
 8009a74:	4681      	mov	r9, r0
 8009a76:	6123      	str	r3, [r4, #16]
 8009a78:	dc02      	bgt.n	8009a80 <_printf_float+0x168>
 8009a7a:	6822      	ldr	r2, [r4, #0]
 8009a7c:	07d2      	lsls	r2, r2, #31
 8009a7e:	d501      	bpl.n	8009a84 <_printf_float+0x16c>
 8009a80:	3301      	adds	r3, #1
 8009a82:	6123      	str	r3, [r4, #16]
 8009a84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d09c      	beq.n	80099c6 <_printf_float+0xae>
 8009a8c:	232d      	movs	r3, #45	; 0x2d
 8009a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a92:	e798      	b.n	80099c6 <_printf_float+0xae>
 8009a94:	9a06      	ldr	r2, [sp, #24]
 8009a96:	2a47      	cmp	r2, #71	; 0x47
 8009a98:	d1be      	bne.n	8009a18 <_printf_float+0x100>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1bc      	bne.n	8009a18 <_printf_float+0x100>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e7b9      	b.n	8009a16 <_printf_float+0xfe>
 8009aa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009aa6:	d118      	bne.n	8009ada <_printf_float+0x1c2>
 8009aa8:	2900      	cmp	r1, #0
 8009aaa:	6863      	ldr	r3, [r4, #4]
 8009aac:	dd0b      	ble.n	8009ac6 <_printf_float+0x1ae>
 8009aae:	6121      	str	r1, [r4, #16]
 8009ab0:	b913      	cbnz	r3, 8009ab8 <_printf_float+0x1a0>
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	07d0      	lsls	r0, r2, #31
 8009ab6:	d502      	bpl.n	8009abe <_printf_float+0x1a6>
 8009ab8:	3301      	adds	r3, #1
 8009aba:	440b      	add	r3, r1
 8009abc:	6123      	str	r3, [r4, #16]
 8009abe:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ac0:	f04f 0900 	mov.w	r9, #0
 8009ac4:	e7de      	b.n	8009a84 <_printf_float+0x16c>
 8009ac6:	b913      	cbnz	r3, 8009ace <_printf_float+0x1b6>
 8009ac8:	6822      	ldr	r2, [r4, #0]
 8009aca:	07d2      	lsls	r2, r2, #31
 8009acc:	d501      	bpl.n	8009ad2 <_printf_float+0x1ba>
 8009ace:	3302      	adds	r3, #2
 8009ad0:	e7f4      	b.n	8009abc <_printf_float+0x1a4>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e7f2      	b.n	8009abc <_printf_float+0x1a4>
 8009ad6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009adc:	4299      	cmp	r1, r3
 8009ade:	db05      	blt.n	8009aec <_printf_float+0x1d4>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	6121      	str	r1, [r4, #16]
 8009ae4:	07d8      	lsls	r0, r3, #31
 8009ae6:	d5ea      	bpl.n	8009abe <_printf_float+0x1a6>
 8009ae8:	1c4b      	adds	r3, r1, #1
 8009aea:	e7e7      	b.n	8009abc <_printf_float+0x1a4>
 8009aec:	2900      	cmp	r1, #0
 8009aee:	bfd4      	ite	le
 8009af0:	f1c1 0202 	rsble	r2, r1, #2
 8009af4:	2201      	movgt	r2, #1
 8009af6:	4413      	add	r3, r2
 8009af8:	e7e0      	b.n	8009abc <_printf_float+0x1a4>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	055a      	lsls	r2, r3, #21
 8009afe:	d407      	bmi.n	8009b10 <_printf_float+0x1f8>
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	4642      	mov	r2, r8
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	47b8      	blx	r7
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	d12c      	bne.n	8009b68 <_printf_float+0x250>
 8009b0e:	e764      	b.n	80099da <_printf_float+0xc2>
 8009b10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b14:	f240 80e0 	bls.w	8009cd8 <_printf_float+0x3c0>
 8009b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f7f6 fff2 	bl	8000b08 <__aeabi_dcmpeq>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d034      	beq.n	8009b92 <_printf_float+0x27a>
 8009b28:	4a37      	ldr	r2, [pc, #220]	; (8009c08 <_printf_float+0x2f0>)
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f af51 	beq.w	80099da <_printf_float+0xc2>
 8009b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	db02      	blt.n	8009b46 <_printf_float+0x22e>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	07d8      	lsls	r0, r3, #31
 8009b44:	d510      	bpl.n	8009b68 <_printf_float+0x250>
 8009b46:	ee18 3a10 	vmov	r3, s16
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47b8      	blx	r7
 8009b52:	3001      	adds	r0, #1
 8009b54:	f43f af41 	beq.w	80099da <_printf_float+0xc2>
 8009b58:	f04f 0800 	mov.w	r8, #0
 8009b5c:	f104 091a 	add.w	r9, r4, #26
 8009b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b62:	3b01      	subs	r3, #1
 8009b64:	4543      	cmp	r3, r8
 8009b66:	dc09      	bgt.n	8009b7c <_printf_float+0x264>
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	079b      	lsls	r3, r3, #30
 8009b6c:	f100 8105 	bmi.w	8009d7a <_printf_float+0x462>
 8009b70:	68e0      	ldr	r0, [r4, #12]
 8009b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b74:	4298      	cmp	r0, r3
 8009b76:	bfb8      	it	lt
 8009b78:	4618      	movlt	r0, r3
 8009b7a:	e730      	b.n	80099de <_printf_float+0xc6>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	464a      	mov	r2, r9
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f af27 	beq.w	80099da <_printf_float+0xc2>
 8009b8c:	f108 0801 	add.w	r8, r8, #1
 8009b90:	e7e6      	b.n	8009b60 <_printf_float+0x248>
 8009b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	dc39      	bgt.n	8009c0c <_printf_float+0x2f4>
 8009b98:	4a1b      	ldr	r2, [pc, #108]	; (8009c08 <_printf_float+0x2f0>)
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	f43f af19 	beq.w	80099da <_printf_float+0xc2>
 8009ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bac:	4313      	orrs	r3, r2
 8009bae:	d102      	bne.n	8009bb6 <_printf_float+0x29e>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	07d9      	lsls	r1, r3, #31
 8009bb4:	d5d8      	bpl.n	8009b68 <_printf_float+0x250>
 8009bb6:	ee18 3a10 	vmov	r3, s16
 8009bba:	4652      	mov	r2, sl
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b8      	blx	r7
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f43f af09 	beq.w	80099da <_printf_float+0xc2>
 8009bc8:	f04f 0900 	mov.w	r9, #0
 8009bcc:	f104 0a1a 	add.w	sl, r4, #26
 8009bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd2:	425b      	negs	r3, r3
 8009bd4:	454b      	cmp	r3, r9
 8009bd6:	dc01      	bgt.n	8009bdc <_printf_float+0x2c4>
 8009bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bda:	e792      	b.n	8009b02 <_printf_float+0x1ea>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	4652      	mov	r2, sl
 8009be0:	4631      	mov	r1, r6
 8009be2:	4628      	mov	r0, r5
 8009be4:	47b8      	blx	r7
 8009be6:	3001      	adds	r0, #1
 8009be8:	f43f aef7 	beq.w	80099da <_printf_float+0xc2>
 8009bec:	f109 0901 	add.w	r9, r9, #1
 8009bf0:	e7ee      	b.n	8009bd0 <_printf_float+0x2b8>
 8009bf2:	bf00      	nop
 8009bf4:	7fefffff 	.word	0x7fefffff
 8009bf8:	0800e934 	.word	0x0800e934
 8009bfc:	0800e938 	.word	0x0800e938
 8009c00:	0800e940 	.word	0x0800e940
 8009c04:	0800e93c 	.word	0x0800e93c
 8009c08:	0800ed49 	.word	0x0800ed49
 8009c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c10:	429a      	cmp	r2, r3
 8009c12:	bfa8      	it	ge
 8009c14:	461a      	movge	r2, r3
 8009c16:	2a00      	cmp	r2, #0
 8009c18:	4691      	mov	r9, r2
 8009c1a:	dc37      	bgt.n	8009c8c <_printf_float+0x374>
 8009c1c:	f04f 0b00 	mov.w	fp, #0
 8009c20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c24:	f104 021a 	add.w	r2, r4, #26
 8009c28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	eba3 0309 	sub.w	r3, r3, r9
 8009c30:	455b      	cmp	r3, fp
 8009c32:	dc33      	bgt.n	8009c9c <_printf_float+0x384>
 8009c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	db3b      	blt.n	8009cb4 <_printf_float+0x39c>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	07da      	lsls	r2, r3, #31
 8009c40:	d438      	bmi.n	8009cb4 <_printf_float+0x39c>
 8009c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c44:	9b05      	ldr	r3, [sp, #20]
 8009c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	eba2 0901 	sub.w	r9, r2, r1
 8009c4e:	4599      	cmp	r9, r3
 8009c50:	bfa8      	it	ge
 8009c52:	4699      	movge	r9, r3
 8009c54:	f1b9 0f00 	cmp.w	r9, #0
 8009c58:	dc35      	bgt.n	8009cc6 <_printf_float+0x3ae>
 8009c5a:	f04f 0800 	mov.w	r8, #0
 8009c5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c62:	f104 0a1a 	add.w	sl, r4, #26
 8009c66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c6a:	1a9b      	subs	r3, r3, r2
 8009c6c:	eba3 0309 	sub.w	r3, r3, r9
 8009c70:	4543      	cmp	r3, r8
 8009c72:	f77f af79 	ble.w	8009b68 <_printf_float+0x250>
 8009c76:	2301      	movs	r3, #1
 8009c78:	4652      	mov	r2, sl
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	47b8      	blx	r7
 8009c80:	3001      	adds	r0, #1
 8009c82:	f43f aeaa 	beq.w	80099da <_printf_float+0xc2>
 8009c86:	f108 0801 	add.w	r8, r8, #1
 8009c8a:	e7ec      	b.n	8009c66 <_printf_float+0x34e>
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4642      	mov	r2, r8
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	d1c0      	bne.n	8009c1c <_printf_float+0x304>
 8009c9a:	e69e      	b.n	80099da <_printf_float+0xc2>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	9205      	str	r2, [sp, #20]
 8009ca4:	47b8      	blx	r7
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	f43f ae97 	beq.w	80099da <_printf_float+0xc2>
 8009cac:	9a05      	ldr	r2, [sp, #20]
 8009cae:	f10b 0b01 	add.w	fp, fp, #1
 8009cb2:	e7b9      	b.n	8009c28 <_printf_float+0x310>
 8009cb4:	ee18 3a10 	vmov	r3, s16
 8009cb8:	4652      	mov	r2, sl
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b8      	blx	r7
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d1be      	bne.n	8009c42 <_printf_float+0x32a>
 8009cc4:	e689      	b.n	80099da <_printf_float+0xc2>
 8009cc6:	9a05      	ldr	r2, [sp, #20]
 8009cc8:	464b      	mov	r3, r9
 8009cca:	4442      	add	r2, r8
 8009ccc:	4631      	mov	r1, r6
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d1c1      	bne.n	8009c5a <_printf_float+0x342>
 8009cd6:	e680      	b.n	80099da <_printf_float+0xc2>
 8009cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cda:	2a01      	cmp	r2, #1
 8009cdc:	dc01      	bgt.n	8009ce2 <_printf_float+0x3ca>
 8009cde:	07db      	lsls	r3, r3, #31
 8009ce0:	d538      	bpl.n	8009d54 <_printf_float+0x43c>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f ae74 	beq.w	80099da <_printf_float+0xc2>
 8009cf2:	ee18 3a10 	vmov	r3, s16
 8009cf6:	4652      	mov	r2, sl
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b8      	blx	r7
 8009cfe:	3001      	adds	r0, #1
 8009d00:	f43f ae6b 	beq.w	80099da <_printf_float+0xc2>
 8009d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f7f6 fefc 	bl	8000b08 <__aeabi_dcmpeq>
 8009d10:	b9d8      	cbnz	r0, 8009d4a <_printf_float+0x432>
 8009d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d14:	f108 0201 	add.w	r2, r8, #1
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b8      	blx	r7
 8009d20:	3001      	adds	r0, #1
 8009d22:	d10e      	bne.n	8009d42 <_printf_float+0x42a>
 8009d24:	e659      	b.n	80099da <_printf_float+0xc2>
 8009d26:	2301      	movs	r3, #1
 8009d28:	4652      	mov	r2, sl
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	47b8      	blx	r7
 8009d30:	3001      	adds	r0, #1
 8009d32:	f43f ae52 	beq.w	80099da <_printf_float+0xc2>
 8009d36:	f108 0801 	add.w	r8, r8, #1
 8009d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	4543      	cmp	r3, r8
 8009d40:	dcf1      	bgt.n	8009d26 <_printf_float+0x40e>
 8009d42:	464b      	mov	r3, r9
 8009d44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d48:	e6dc      	b.n	8009b04 <_printf_float+0x1ec>
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	f104 0a1a 	add.w	sl, r4, #26
 8009d52:	e7f2      	b.n	8009d3a <_printf_float+0x422>
 8009d54:	2301      	movs	r3, #1
 8009d56:	4642      	mov	r2, r8
 8009d58:	e7df      	b.n	8009d1a <_printf_float+0x402>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	464a      	mov	r2, r9
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4628      	mov	r0, r5
 8009d62:	47b8      	blx	r7
 8009d64:	3001      	adds	r0, #1
 8009d66:	f43f ae38 	beq.w	80099da <_printf_float+0xc2>
 8009d6a:	f108 0801 	add.w	r8, r8, #1
 8009d6e:	68e3      	ldr	r3, [r4, #12]
 8009d70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d72:	1a5b      	subs	r3, r3, r1
 8009d74:	4543      	cmp	r3, r8
 8009d76:	dcf0      	bgt.n	8009d5a <_printf_float+0x442>
 8009d78:	e6fa      	b.n	8009b70 <_printf_float+0x258>
 8009d7a:	f04f 0800 	mov.w	r8, #0
 8009d7e:	f104 0919 	add.w	r9, r4, #25
 8009d82:	e7f4      	b.n	8009d6e <_printf_float+0x456>

08009d84 <_printf_common>:
 8009d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d88:	4616      	mov	r6, r2
 8009d8a:	4699      	mov	r9, r3
 8009d8c:	688a      	ldr	r2, [r1, #8]
 8009d8e:	690b      	ldr	r3, [r1, #16]
 8009d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d94:	4293      	cmp	r3, r2
 8009d96:	bfb8      	it	lt
 8009d98:	4613      	movlt	r3, r2
 8009d9a:	6033      	str	r3, [r6, #0]
 8009d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009da0:	4607      	mov	r7, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	b10a      	cbz	r2, 8009daa <_printf_common+0x26>
 8009da6:	3301      	adds	r3, #1
 8009da8:	6033      	str	r3, [r6, #0]
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	0699      	lsls	r1, r3, #26
 8009dae:	bf42      	ittt	mi
 8009db0:	6833      	ldrmi	r3, [r6, #0]
 8009db2:	3302      	addmi	r3, #2
 8009db4:	6033      	strmi	r3, [r6, #0]
 8009db6:	6825      	ldr	r5, [r4, #0]
 8009db8:	f015 0506 	ands.w	r5, r5, #6
 8009dbc:	d106      	bne.n	8009dcc <_printf_common+0x48>
 8009dbe:	f104 0a19 	add.w	sl, r4, #25
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	6832      	ldr	r2, [r6, #0]
 8009dc6:	1a9b      	subs	r3, r3, r2
 8009dc8:	42ab      	cmp	r3, r5
 8009dca:	dc26      	bgt.n	8009e1a <_printf_common+0x96>
 8009dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dd0:	1e13      	subs	r3, r2, #0
 8009dd2:	6822      	ldr	r2, [r4, #0]
 8009dd4:	bf18      	it	ne
 8009dd6:	2301      	movne	r3, #1
 8009dd8:	0692      	lsls	r2, r2, #26
 8009dda:	d42b      	bmi.n	8009e34 <_printf_common+0xb0>
 8009ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009de0:	4649      	mov	r1, r9
 8009de2:	4638      	mov	r0, r7
 8009de4:	47c0      	blx	r8
 8009de6:	3001      	adds	r0, #1
 8009de8:	d01e      	beq.n	8009e28 <_printf_common+0xa4>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	68e5      	ldr	r5, [r4, #12]
 8009dee:	6832      	ldr	r2, [r6, #0]
 8009df0:	f003 0306 	and.w	r3, r3, #6
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	bf08      	it	eq
 8009df8:	1aad      	subeq	r5, r5, r2
 8009dfa:	68a3      	ldr	r3, [r4, #8]
 8009dfc:	6922      	ldr	r2, [r4, #16]
 8009dfe:	bf0c      	ite	eq
 8009e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e04:	2500      	movne	r5, #0
 8009e06:	4293      	cmp	r3, r2
 8009e08:	bfc4      	itt	gt
 8009e0a:	1a9b      	subgt	r3, r3, r2
 8009e0c:	18ed      	addgt	r5, r5, r3
 8009e0e:	2600      	movs	r6, #0
 8009e10:	341a      	adds	r4, #26
 8009e12:	42b5      	cmp	r5, r6
 8009e14:	d11a      	bne.n	8009e4c <_printf_common+0xc8>
 8009e16:	2000      	movs	r0, #0
 8009e18:	e008      	b.n	8009e2c <_printf_common+0xa8>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4652      	mov	r2, sl
 8009e1e:	4649      	mov	r1, r9
 8009e20:	4638      	mov	r0, r7
 8009e22:	47c0      	blx	r8
 8009e24:	3001      	adds	r0, #1
 8009e26:	d103      	bne.n	8009e30 <_printf_common+0xac>
 8009e28:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e30:	3501      	adds	r5, #1
 8009e32:	e7c6      	b.n	8009dc2 <_printf_common+0x3e>
 8009e34:	18e1      	adds	r1, r4, r3
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	2030      	movs	r0, #48	; 0x30
 8009e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e3e:	4422      	add	r2, r4
 8009e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e48:	3302      	adds	r3, #2
 8009e4a:	e7c7      	b.n	8009ddc <_printf_common+0x58>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4622      	mov	r2, r4
 8009e50:	4649      	mov	r1, r9
 8009e52:	4638      	mov	r0, r7
 8009e54:	47c0      	blx	r8
 8009e56:	3001      	adds	r0, #1
 8009e58:	d0e6      	beq.n	8009e28 <_printf_common+0xa4>
 8009e5a:	3601      	adds	r6, #1
 8009e5c:	e7d9      	b.n	8009e12 <_printf_common+0x8e>
	...

08009e60 <_printf_i>:
 8009e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	4691      	mov	r9, r2
 8009e68:	7e27      	ldrb	r7, [r4, #24]
 8009e6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e6c:	2f78      	cmp	r7, #120	; 0x78
 8009e6e:	4680      	mov	r8, r0
 8009e70:	469a      	mov	sl, r3
 8009e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e76:	d807      	bhi.n	8009e88 <_printf_i+0x28>
 8009e78:	2f62      	cmp	r7, #98	; 0x62
 8009e7a:	d80a      	bhi.n	8009e92 <_printf_i+0x32>
 8009e7c:	2f00      	cmp	r7, #0
 8009e7e:	f000 80d8 	beq.w	800a032 <_printf_i+0x1d2>
 8009e82:	2f58      	cmp	r7, #88	; 0x58
 8009e84:	f000 80a3 	beq.w	8009fce <_printf_i+0x16e>
 8009e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e90:	e03a      	b.n	8009f08 <_printf_i+0xa8>
 8009e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e96:	2b15      	cmp	r3, #21
 8009e98:	d8f6      	bhi.n	8009e88 <_printf_i+0x28>
 8009e9a:	a001      	add	r0, pc, #4	; (adr r0, 8009ea0 <_printf_i+0x40>)
 8009e9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009ea0:	08009ef9 	.word	0x08009ef9
 8009ea4:	08009f0d 	.word	0x08009f0d
 8009ea8:	08009e89 	.word	0x08009e89
 8009eac:	08009e89 	.word	0x08009e89
 8009eb0:	08009e89 	.word	0x08009e89
 8009eb4:	08009e89 	.word	0x08009e89
 8009eb8:	08009f0d 	.word	0x08009f0d
 8009ebc:	08009e89 	.word	0x08009e89
 8009ec0:	08009e89 	.word	0x08009e89
 8009ec4:	08009e89 	.word	0x08009e89
 8009ec8:	08009e89 	.word	0x08009e89
 8009ecc:	0800a019 	.word	0x0800a019
 8009ed0:	08009f3d 	.word	0x08009f3d
 8009ed4:	08009ffb 	.word	0x08009ffb
 8009ed8:	08009e89 	.word	0x08009e89
 8009edc:	08009e89 	.word	0x08009e89
 8009ee0:	0800a03b 	.word	0x0800a03b
 8009ee4:	08009e89 	.word	0x08009e89
 8009ee8:	08009f3d 	.word	0x08009f3d
 8009eec:	08009e89 	.word	0x08009e89
 8009ef0:	08009e89 	.word	0x08009e89
 8009ef4:	0800a003 	.word	0x0800a003
 8009ef8:	680b      	ldr	r3, [r1, #0]
 8009efa:	1d1a      	adds	r2, r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	600a      	str	r2, [r1, #0]
 8009f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e0a3      	b.n	800a054 <_printf_i+0x1f4>
 8009f0c:	6825      	ldr	r5, [r4, #0]
 8009f0e:	6808      	ldr	r0, [r1, #0]
 8009f10:	062e      	lsls	r6, r5, #24
 8009f12:	f100 0304 	add.w	r3, r0, #4
 8009f16:	d50a      	bpl.n	8009f2e <_printf_i+0xce>
 8009f18:	6805      	ldr	r5, [r0, #0]
 8009f1a:	600b      	str	r3, [r1, #0]
 8009f1c:	2d00      	cmp	r5, #0
 8009f1e:	da03      	bge.n	8009f28 <_printf_i+0xc8>
 8009f20:	232d      	movs	r3, #45	; 0x2d
 8009f22:	426d      	negs	r5, r5
 8009f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f28:	485e      	ldr	r0, [pc, #376]	; (800a0a4 <_printf_i+0x244>)
 8009f2a:	230a      	movs	r3, #10
 8009f2c:	e019      	b.n	8009f62 <_printf_i+0x102>
 8009f2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f32:	6805      	ldr	r5, [r0, #0]
 8009f34:	600b      	str	r3, [r1, #0]
 8009f36:	bf18      	it	ne
 8009f38:	b22d      	sxthne	r5, r5
 8009f3a:	e7ef      	b.n	8009f1c <_printf_i+0xbc>
 8009f3c:	680b      	ldr	r3, [r1, #0]
 8009f3e:	6825      	ldr	r5, [r4, #0]
 8009f40:	1d18      	adds	r0, r3, #4
 8009f42:	6008      	str	r0, [r1, #0]
 8009f44:	0628      	lsls	r0, r5, #24
 8009f46:	d501      	bpl.n	8009f4c <_printf_i+0xec>
 8009f48:	681d      	ldr	r5, [r3, #0]
 8009f4a:	e002      	b.n	8009f52 <_printf_i+0xf2>
 8009f4c:	0669      	lsls	r1, r5, #25
 8009f4e:	d5fb      	bpl.n	8009f48 <_printf_i+0xe8>
 8009f50:	881d      	ldrh	r5, [r3, #0]
 8009f52:	4854      	ldr	r0, [pc, #336]	; (800a0a4 <_printf_i+0x244>)
 8009f54:	2f6f      	cmp	r7, #111	; 0x6f
 8009f56:	bf0c      	ite	eq
 8009f58:	2308      	moveq	r3, #8
 8009f5a:	230a      	movne	r3, #10
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f62:	6866      	ldr	r6, [r4, #4]
 8009f64:	60a6      	str	r6, [r4, #8]
 8009f66:	2e00      	cmp	r6, #0
 8009f68:	bfa2      	ittt	ge
 8009f6a:	6821      	ldrge	r1, [r4, #0]
 8009f6c:	f021 0104 	bicge.w	r1, r1, #4
 8009f70:	6021      	strge	r1, [r4, #0]
 8009f72:	b90d      	cbnz	r5, 8009f78 <_printf_i+0x118>
 8009f74:	2e00      	cmp	r6, #0
 8009f76:	d04d      	beq.n	800a014 <_printf_i+0x1b4>
 8009f78:	4616      	mov	r6, r2
 8009f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8009f82:	5dc7      	ldrb	r7, [r0, r7]
 8009f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f88:	462f      	mov	r7, r5
 8009f8a:	42bb      	cmp	r3, r7
 8009f8c:	460d      	mov	r5, r1
 8009f8e:	d9f4      	bls.n	8009f7a <_printf_i+0x11a>
 8009f90:	2b08      	cmp	r3, #8
 8009f92:	d10b      	bne.n	8009fac <_printf_i+0x14c>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	07df      	lsls	r7, r3, #31
 8009f98:	d508      	bpl.n	8009fac <_printf_i+0x14c>
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	6861      	ldr	r1, [r4, #4]
 8009f9e:	4299      	cmp	r1, r3
 8009fa0:	bfde      	ittt	le
 8009fa2:	2330      	movle	r3, #48	; 0x30
 8009fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fac:	1b92      	subs	r2, r2, r6
 8009fae:	6122      	str	r2, [r4, #16]
 8009fb0:	f8cd a000 	str.w	sl, [sp]
 8009fb4:	464b      	mov	r3, r9
 8009fb6:	aa03      	add	r2, sp, #12
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4640      	mov	r0, r8
 8009fbc:	f7ff fee2 	bl	8009d84 <_printf_common>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d14c      	bne.n	800a05e <_printf_i+0x1fe>
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	b004      	add	sp, #16
 8009fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fce:	4835      	ldr	r0, [pc, #212]	; (800a0a4 <_printf_i+0x244>)
 8009fd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	680e      	ldr	r6, [r1, #0]
 8009fd8:	061f      	lsls	r7, r3, #24
 8009fda:	f856 5b04 	ldr.w	r5, [r6], #4
 8009fde:	600e      	str	r6, [r1, #0]
 8009fe0:	d514      	bpl.n	800a00c <_printf_i+0x1ac>
 8009fe2:	07d9      	lsls	r1, r3, #31
 8009fe4:	bf44      	itt	mi
 8009fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8009fea:	6023      	strmi	r3, [r4, #0]
 8009fec:	b91d      	cbnz	r5, 8009ff6 <_printf_i+0x196>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	f023 0320 	bic.w	r3, r3, #32
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	2310      	movs	r3, #16
 8009ff8:	e7b0      	b.n	8009f5c <_printf_i+0xfc>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	f043 0320 	orr.w	r3, r3, #32
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	2378      	movs	r3, #120	; 0x78
 800a004:	4828      	ldr	r0, [pc, #160]	; (800a0a8 <_printf_i+0x248>)
 800a006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a00a:	e7e3      	b.n	8009fd4 <_printf_i+0x174>
 800a00c:	065e      	lsls	r6, r3, #25
 800a00e:	bf48      	it	mi
 800a010:	b2ad      	uxthmi	r5, r5
 800a012:	e7e6      	b.n	8009fe2 <_printf_i+0x182>
 800a014:	4616      	mov	r6, r2
 800a016:	e7bb      	b.n	8009f90 <_printf_i+0x130>
 800a018:	680b      	ldr	r3, [r1, #0]
 800a01a:	6826      	ldr	r6, [r4, #0]
 800a01c:	6960      	ldr	r0, [r4, #20]
 800a01e:	1d1d      	adds	r5, r3, #4
 800a020:	600d      	str	r5, [r1, #0]
 800a022:	0635      	lsls	r5, r6, #24
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	d501      	bpl.n	800a02c <_printf_i+0x1cc>
 800a028:	6018      	str	r0, [r3, #0]
 800a02a:	e002      	b.n	800a032 <_printf_i+0x1d2>
 800a02c:	0671      	lsls	r1, r6, #25
 800a02e:	d5fb      	bpl.n	800a028 <_printf_i+0x1c8>
 800a030:	8018      	strh	r0, [r3, #0]
 800a032:	2300      	movs	r3, #0
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	4616      	mov	r6, r2
 800a038:	e7ba      	b.n	8009fb0 <_printf_i+0x150>
 800a03a:	680b      	ldr	r3, [r1, #0]
 800a03c:	1d1a      	adds	r2, r3, #4
 800a03e:	600a      	str	r2, [r1, #0]
 800a040:	681e      	ldr	r6, [r3, #0]
 800a042:	6862      	ldr	r2, [r4, #4]
 800a044:	2100      	movs	r1, #0
 800a046:	4630      	mov	r0, r6
 800a048:	f7f6 f8ea 	bl	8000220 <memchr>
 800a04c:	b108      	cbz	r0, 800a052 <_printf_i+0x1f2>
 800a04e:	1b80      	subs	r0, r0, r6
 800a050:	6060      	str	r0, [r4, #4]
 800a052:	6863      	ldr	r3, [r4, #4]
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	2300      	movs	r3, #0
 800a058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a05c:	e7a8      	b.n	8009fb0 <_printf_i+0x150>
 800a05e:	6923      	ldr	r3, [r4, #16]
 800a060:	4632      	mov	r2, r6
 800a062:	4649      	mov	r1, r9
 800a064:	4640      	mov	r0, r8
 800a066:	47d0      	blx	sl
 800a068:	3001      	adds	r0, #1
 800a06a:	d0ab      	beq.n	8009fc4 <_printf_i+0x164>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	079b      	lsls	r3, r3, #30
 800a070:	d413      	bmi.n	800a09a <_printf_i+0x23a>
 800a072:	68e0      	ldr	r0, [r4, #12]
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	4298      	cmp	r0, r3
 800a078:	bfb8      	it	lt
 800a07a:	4618      	movlt	r0, r3
 800a07c:	e7a4      	b.n	8009fc8 <_printf_i+0x168>
 800a07e:	2301      	movs	r3, #1
 800a080:	4632      	mov	r2, r6
 800a082:	4649      	mov	r1, r9
 800a084:	4640      	mov	r0, r8
 800a086:	47d0      	blx	sl
 800a088:	3001      	adds	r0, #1
 800a08a:	d09b      	beq.n	8009fc4 <_printf_i+0x164>
 800a08c:	3501      	adds	r5, #1
 800a08e:	68e3      	ldr	r3, [r4, #12]
 800a090:	9903      	ldr	r1, [sp, #12]
 800a092:	1a5b      	subs	r3, r3, r1
 800a094:	42ab      	cmp	r3, r5
 800a096:	dcf2      	bgt.n	800a07e <_printf_i+0x21e>
 800a098:	e7eb      	b.n	800a072 <_printf_i+0x212>
 800a09a:	2500      	movs	r5, #0
 800a09c:	f104 0619 	add.w	r6, r4, #25
 800a0a0:	e7f5      	b.n	800a08e <_printf_i+0x22e>
 800a0a2:	bf00      	nop
 800a0a4:	0800e944 	.word	0x0800e944
 800a0a8:	0800e955 	.word	0x0800e955

0800a0ac <_scanf_float>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	b087      	sub	sp, #28
 800a0b2:	4617      	mov	r7, r2
 800a0b4:	9303      	str	r3, [sp, #12]
 800a0b6:	688b      	ldr	r3, [r1, #8]
 800a0b8:	1e5a      	subs	r2, r3, #1
 800a0ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a0be:	bf83      	ittte	hi
 800a0c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0c4:	195b      	addhi	r3, r3, r5
 800a0c6:	9302      	strhi	r3, [sp, #8]
 800a0c8:	2300      	movls	r3, #0
 800a0ca:	bf86      	itte	hi
 800a0cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0d0:	608b      	strhi	r3, [r1, #8]
 800a0d2:	9302      	strls	r3, [sp, #8]
 800a0d4:	680b      	ldr	r3, [r1, #0]
 800a0d6:	468b      	mov	fp, r1
 800a0d8:	2500      	movs	r5, #0
 800a0da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a0de:	f84b 3b1c 	str.w	r3, [fp], #28
 800a0e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0e6:	4680      	mov	r8, r0
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	465e      	mov	r6, fp
 800a0ec:	46aa      	mov	sl, r5
 800a0ee:	46a9      	mov	r9, r5
 800a0f0:	9501      	str	r5, [sp, #4]
 800a0f2:	68a2      	ldr	r2, [r4, #8]
 800a0f4:	b152      	cbz	r2, 800a10c <_scanf_float+0x60>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b4e      	cmp	r3, #78	; 0x4e
 800a0fc:	d864      	bhi.n	800a1c8 <_scanf_float+0x11c>
 800a0fe:	2b40      	cmp	r3, #64	; 0x40
 800a100:	d83c      	bhi.n	800a17c <_scanf_float+0xd0>
 800a102:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a106:	b2c8      	uxtb	r0, r1
 800a108:	280e      	cmp	r0, #14
 800a10a:	d93a      	bls.n	800a182 <_scanf_float+0xd6>
 800a10c:	f1b9 0f00 	cmp.w	r9, #0
 800a110:	d003      	beq.n	800a11a <_scanf_float+0x6e>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a11e:	f1ba 0f01 	cmp.w	sl, #1
 800a122:	f200 8113 	bhi.w	800a34c <_scanf_float+0x2a0>
 800a126:	455e      	cmp	r6, fp
 800a128:	f200 8105 	bhi.w	800a336 <_scanf_float+0x28a>
 800a12c:	2501      	movs	r5, #1
 800a12e:	4628      	mov	r0, r5
 800a130:	b007      	add	sp, #28
 800a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a136:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a13a:	2a0d      	cmp	r2, #13
 800a13c:	d8e6      	bhi.n	800a10c <_scanf_float+0x60>
 800a13e:	a101      	add	r1, pc, #4	; (adr r1, 800a144 <_scanf_float+0x98>)
 800a140:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a144:	0800a283 	.word	0x0800a283
 800a148:	0800a10d 	.word	0x0800a10d
 800a14c:	0800a10d 	.word	0x0800a10d
 800a150:	0800a10d 	.word	0x0800a10d
 800a154:	0800a2e3 	.word	0x0800a2e3
 800a158:	0800a2bb 	.word	0x0800a2bb
 800a15c:	0800a10d 	.word	0x0800a10d
 800a160:	0800a10d 	.word	0x0800a10d
 800a164:	0800a291 	.word	0x0800a291
 800a168:	0800a10d 	.word	0x0800a10d
 800a16c:	0800a10d 	.word	0x0800a10d
 800a170:	0800a10d 	.word	0x0800a10d
 800a174:	0800a10d 	.word	0x0800a10d
 800a178:	0800a249 	.word	0x0800a249
 800a17c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a180:	e7db      	b.n	800a13a <_scanf_float+0x8e>
 800a182:	290e      	cmp	r1, #14
 800a184:	d8c2      	bhi.n	800a10c <_scanf_float+0x60>
 800a186:	a001      	add	r0, pc, #4	; (adr r0, 800a18c <_scanf_float+0xe0>)
 800a188:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a18c:	0800a23b 	.word	0x0800a23b
 800a190:	0800a10d 	.word	0x0800a10d
 800a194:	0800a23b 	.word	0x0800a23b
 800a198:	0800a2cf 	.word	0x0800a2cf
 800a19c:	0800a10d 	.word	0x0800a10d
 800a1a0:	0800a1e9 	.word	0x0800a1e9
 800a1a4:	0800a225 	.word	0x0800a225
 800a1a8:	0800a225 	.word	0x0800a225
 800a1ac:	0800a225 	.word	0x0800a225
 800a1b0:	0800a225 	.word	0x0800a225
 800a1b4:	0800a225 	.word	0x0800a225
 800a1b8:	0800a225 	.word	0x0800a225
 800a1bc:	0800a225 	.word	0x0800a225
 800a1c0:	0800a225 	.word	0x0800a225
 800a1c4:	0800a225 	.word	0x0800a225
 800a1c8:	2b6e      	cmp	r3, #110	; 0x6e
 800a1ca:	d809      	bhi.n	800a1e0 <_scanf_float+0x134>
 800a1cc:	2b60      	cmp	r3, #96	; 0x60
 800a1ce:	d8b2      	bhi.n	800a136 <_scanf_float+0x8a>
 800a1d0:	2b54      	cmp	r3, #84	; 0x54
 800a1d2:	d077      	beq.n	800a2c4 <_scanf_float+0x218>
 800a1d4:	2b59      	cmp	r3, #89	; 0x59
 800a1d6:	d199      	bne.n	800a10c <_scanf_float+0x60>
 800a1d8:	2d07      	cmp	r5, #7
 800a1da:	d197      	bne.n	800a10c <_scanf_float+0x60>
 800a1dc:	2508      	movs	r5, #8
 800a1de:	e029      	b.n	800a234 <_scanf_float+0x188>
 800a1e0:	2b74      	cmp	r3, #116	; 0x74
 800a1e2:	d06f      	beq.n	800a2c4 <_scanf_float+0x218>
 800a1e4:	2b79      	cmp	r3, #121	; 0x79
 800a1e6:	e7f6      	b.n	800a1d6 <_scanf_float+0x12a>
 800a1e8:	6821      	ldr	r1, [r4, #0]
 800a1ea:	05c8      	lsls	r0, r1, #23
 800a1ec:	d51a      	bpl.n	800a224 <_scanf_float+0x178>
 800a1ee:	9b02      	ldr	r3, [sp, #8]
 800a1f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1f4:	6021      	str	r1, [r4, #0]
 800a1f6:	f109 0901 	add.w	r9, r9, #1
 800a1fa:	b11b      	cbz	r3, 800a204 <_scanf_float+0x158>
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	3201      	adds	r2, #1
 800a200:	9302      	str	r3, [sp, #8]
 800a202:	60a2      	str	r2, [r4, #8]
 800a204:	68a3      	ldr	r3, [r4, #8]
 800a206:	3b01      	subs	r3, #1
 800a208:	60a3      	str	r3, [r4, #8]
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	3301      	adds	r3, #1
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3b01      	subs	r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	607b      	str	r3, [r7, #4]
 800a218:	f340 8084 	ble.w	800a324 <_scanf_float+0x278>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	3301      	adds	r3, #1
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	e766      	b.n	800a0f2 <_scanf_float+0x46>
 800a224:	eb1a 0f05 	cmn.w	sl, r5
 800a228:	f47f af70 	bne.w	800a10c <_scanf_float+0x60>
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a232:	6022      	str	r2, [r4, #0]
 800a234:	f806 3b01 	strb.w	r3, [r6], #1
 800a238:	e7e4      	b.n	800a204 <_scanf_float+0x158>
 800a23a:	6822      	ldr	r2, [r4, #0]
 800a23c:	0610      	lsls	r0, r2, #24
 800a23e:	f57f af65 	bpl.w	800a10c <_scanf_float+0x60>
 800a242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a246:	e7f4      	b.n	800a232 <_scanf_float+0x186>
 800a248:	f1ba 0f00 	cmp.w	sl, #0
 800a24c:	d10e      	bne.n	800a26c <_scanf_float+0x1c0>
 800a24e:	f1b9 0f00 	cmp.w	r9, #0
 800a252:	d10e      	bne.n	800a272 <_scanf_float+0x1c6>
 800a254:	6822      	ldr	r2, [r4, #0]
 800a256:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a25a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a25e:	d108      	bne.n	800a272 <_scanf_float+0x1c6>
 800a260:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a264:	6022      	str	r2, [r4, #0]
 800a266:	f04f 0a01 	mov.w	sl, #1
 800a26a:	e7e3      	b.n	800a234 <_scanf_float+0x188>
 800a26c:	f1ba 0f02 	cmp.w	sl, #2
 800a270:	d055      	beq.n	800a31e <_scanf_float+0x272>
 800a272:	2d01      	cmp	r5, #1
 800a274:	d002      	beq.n	800a27c <_scanf_float+0x1d0>
 800a276:	2d04      	cmp	r5, #4
 800a278:	f47f af48 	bne.w	800a10c <_scanf_float+0x60>
 800a27c:	3501      	adds	r5, #1
 800a27e:	b2ed      	uxtb	r5, r5
 800a280:	e7d8      	b.n	800a234 <_scanf_float+0x188>
 800a282:	f1ba 0f01 	cmp.w	sl, #1
 800a286:	f47f af41 	bne.w	800a10c <_scanf_float+0x60>
 800a28a:	f04f 0a02 	mov.w	sl, #2
 800a28e:	e7d1      	b.n	800a234 <_scanf_float+0x188>
 800a290:	b97d      	cbnz	r5, 800a2b2 <_scanf_float+0x206>
 800a292:	f1b9 0f00 	cmp.w	r9, #0
 800a296:	f47f af3c 	bne.w	800a112 <_scanf_float+0x66>
 800a29a:	6822      	ldr	r2, [r4, #0]
 800a29c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a2a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a2a4:	f47f af39 	bne.w	800a11a <_scanf_float+0x6e>
 800a2a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2ac:	6022      	str	r2, [r4, #0]
 800a2ae:	2501      	movs	r5, #1
 800a2b0:	e7c0      	b.n	800a234 <_scanf_float+0x188>
 800a2b2:	2d03      	cmp	r5, #3
 800a2b4:	d0e2      	beq.n	800a27c <_scanf_float+0x1d0>
 800a2b6:	2d05      	cmp	r5, #5
 800a2b8:	e7de      	b.n	800a278 <_scanf_float+0x1cc>
 800a2ba:	2d02      	cmp	r5, #2
 800a2bc:	f47f af26 	bne.w	800a10c <_scanf_float+0x60>
 800a2c0:	2503      	movs	r5, #3
 800a2c2:	e7b7      	b.n	800a234 <_scanf_float+0x188>
 800a2c4:	2d06      	cmp	r5, #6
 800a2c6:	f47f af21 	bne.w	800a10c <_scanf_float+0x60>
 800a2ca:	2507      	movs	r5, #7
 800a2cc:	e7b2      	b.n	800a234 <_scanf_float+0x188>
 800a2ce:	6822      	ldr	r2, [r4, #0]
 800a2d0:	0591      	lsls	r1, r2, #22
 800a2d2:	f57f af1b 	bpl.w	800a10c <_scanf_float+0x60>
 800a2d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a2da:	6022      	str	r2, [r4, #0]
 800a2dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2e0:	e7a8      	b.n	800a234 <_scanf_float+0x188>
 800a2e2:	6822      	ldr	r2, [r4, #0]
 800a2e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a2e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2ec:	d006      	beq.n	800a2fc <_scanf_float+0x250>
 800a2ee:	0550      	lsls	r0, r2, #21
 800a2f0:	f57f af0c 	bpl.w	800a10c <_scanf_float+0x60>
 800a2f4:	f1b9 0f00 	cmp.w	r9, #0
 800a2f8:	f43f af0f 	beq.w	800a11a <_scanf_float+0x6e>
 800a2fc:	0591      	lsls	r1, r2, #22
 800a2fe:	bf58      	it	pl
 800a300:	9901      	ldrpl	r1, [sp, #4]
 800a302:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a306:	bf58      	it	pl
 800a308:	eba9 0101 	subpl.w	r1, r9, r1
 800a30c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a310:	bf58      	it	pl
 800a312:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a316:	6022      	str	r2, [r4, #0]
 800a318:	f04f 0900 	mov.w	r9, #0
 800a31c:	e78a      	b.n	800a234 <_scanf_float+0x188>
 800a31e:	f04f 0a03 	mov.w	sl, #3
 800a322:	e787      	b.n	800a234 <_scanf_float+0x188>
 800a324:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a328:	4639      	mov	r1, r7
 800a32a:	4640      	mov	r0, r8
 800a32c:	4798      	blx	r3
 800a32e:	2800      	cmp	r0, #0
 800a330:	f43f aedf 	beq.w	800a0f2 <_scanf_float+0x46>
 800a334:	e6ea      	b.n	800a10c <_scanf_float+0x60>
 800a336:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a33a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a33e:	463a      	mov	r2, r7
 800a340:	4640      	mov	r0, r8
 800a342:	4798      	blx	r3
 800a344:	6923      	ldr	r3, [r4, #16]
 800a346:	3b01      	subs	r3, #1
 800a348:	6123      	str	r3, [r4, #16]
 800a34a:	e6ec      	b.n	800a126 <_scanf_float+0x7a>
 800a34c:	1e6b      	subs	r3, r5, #1
 800a34e:	2b06      	cmp	r3, #6
 800a350:	d825      	bhi.n	800a39e <_scanf_float+0x2f2>
 800a352:	2d02      	cmp	r5, #2
 800a354:	d836      	bhi.n	800a3c4 <_scanf_float+0x318>
 800a356:	455e      	cmp	r6, fp
 800a358:	f67f aee8 	bls.w	800a12c <_scanf_float+0x80>
 800a35c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a360:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a364:	463a      	mov	r2, r7
 800a366:	4640      	mov	r0, r8
 800a368:	4798      	blx	r3
 800a36a:	6923      	ldr	r3, [r4, #16]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	6123      	str	r3, [r4, #16]
 800a370:	e7f1      	b.n	800a356 <_scanf_float+0x2aa>
 800a372:	9802      	ldr	r0, [sp, #8]
 800a374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a378:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a37c:	9002      	str	r0, [sp, #8]
 800a37e:	463a      	mov	r2, r7
 800a380:	4640      	mov	r0, r8
 800a382:	4798      	blx	r3
 800a384:	6923      	ldr	r3, [r4, #16]
 800a386:	3b01      	subs	r3, #1
 800a388:	6123      	str	r3, [r4, #16]
 800a38a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a38e:	fa5f fa8a 	uxtb.w	sl, sl
 800a392:	f1ba 0f02 	cmp.w	sl, #2
 800a396:	d1ec      	bne.n	800a372 <_scanf_float+0x2c6>
 800a398:	3d03      	subs	r5, #3
 800a39a:	b2ed      	uxtb	r5, r5
 800a39c:	1b76      	subs	r6, r6, r5
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	05da      	lsls	r2, r3, #23
 800a3a2:	d52f      	bpl.n	800a404 <_scanf_float+0x358>
 800a3a4:	055b      	lsls	r3, r3, #21
 800a3a6:	d510      	bpl.n	800a3ca <_scanf_float+0x31e>
 800a3a8:	455e      	cmp	r6, fp
 800a3aa:	f67f aebf 	bls.w	800a12c <_scanf_float+0x80>
 800a3ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3b6:	463a      	mov	r2, r7
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4798      	blx	r3
 800a3bc:	6923      	ldr	r3, [r4, #16]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	6123      	str	r3, [r4, #16]
 800a3c2:	e7f1      	b.n	800a3a8 <_scanf_float+0x2fc>
 800a3c4:	46aa      	mov	sl, r5
 800a3c6:	9602      	str	r6, [sp, #8]
 800a3c8:	e7df      	b.n	800a38a <_scanf_float+0x2de>
 800a3ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3ce:	6923      	ldr	r3, [r4, #16]
 800a3d0:	2965      	cmp	r1, #101	; 0x65
 800a3d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a3da:	6123      	str	r3, [r4, #16]
 800a3dc:	d00c      	beq.n	800a3f8 <_scanf_float+0x34c>
 800a3de:	2945      	cmp	r1, #69	; 0x45
 800a3e0:	d00a      	beq.n	800a3f8 <_scanf_float+0x34c>
 800a3e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3e6:	463a      	mov	r2, r7
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	4798      	blx	r3
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	1eb5      	subs	r5, r6, #2
 800a3f6:	6123      	str	r3, [r4, #16]
 800a3f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3fc:	463a      	mov	r2, r7
 800a3fe:	4640      	mov	r0, r8
 800a400:	4798      	blx	r3
 800a402:	462e      	mov	r6, r5
 800a404:	6825      	ldr	r5, [r4, #0]
 800a406:	f015 0510 	ands.w	r5, r5, #16
 800a40a:	d158      	bne.n	800a4be <_scanf_float+0x412>
 800a40c:	7035      	strb	r5, [r6, #0]
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a418:	d11c      	bne.n	800a454 <_scanf_float+0x3a8>
 800a41a:	9b01      	ldr	r3, [sp, #4]
 800a41c:	454b      	cmp	r3, r9
 800a41e:	eba3 0209 	sub.w	r2, r3, r9
 800a422:	d124      	bne.n	800a46e <_scanf_float+0x3c2>
 800a424:	2200      	movs	r2, #0
 800a426:	4659      	mov	r1, fp
 800a428:	4640      	mov	r0, r8
 800a42a:	f000 ff0f 	bl	800b24c <_strtod_r>
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	6821      	ldr	r1, [r4, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f011 0f02 	tst.w	r1, #2
 800a438:	ec57 6b10 	vmov	r6, r7, d0
 800a43c:	f103 0204 	add.w	r2, r3, #4
 800a440:	d020      	beq.n	800a484 <_scanf_float+0x3d8>
 800a442:	9903      	ldr	r1, [sp, #12]
 800a444:	600a      	str	r2, [r1, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	e9c3 6700 	strd	r6, r7, [r3]
 800a44c:	68e3      	ldr	r3, [r4, #12]
 800a44e:	3301      	adds	r3, #1
 800a450:	60e3      	str	r3, [r4, #12]
 800a452:	e66c      	b.n	800a12e <_scanf_float+0x82>
 800a454:	9b04      	ldr	r3, [sp, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0e4      	beq.n	800a424 <_scanf_float+0x378>
 800a45a:	9905      	ldr	r1, [sp, #20]
 800a45c:	230a      	movs	r3, #10
 800a45e:	462a      	mov	r2, r5
 800a460:	3101      	adds	r1, #1
 800a462:	4640      	mov	r0, r8
 800a464:	f000 ff7c 	bl	800b360 <_strtol_r>
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	9e05      	ldr	r6, [sp, #20]
 800a46c:	1ac2      	subs	r2, r0, r3
 800a46e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a472:	429e      	cmp	r6, r3
 800a474:	bf28      	it	cs
 800a476:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a47a:	4912      	ldr	r1, [pc, #72]	; (800a4c4 <_scanf_float+0x418>)
 800a47c:	4630      	mov	r0, r6
 800a47e:	f000 f82b 	bl	800a4d8 <siprintf>
 800a482:	e7cf      	b.n	800a424 <_scanf_float+0x378>
 800a484:	f011 0f04 	tst.w	r1, #4
 800a488:	9903      	ldr	r1, [sp, #12]
 800a48a:	600a      	str	r2, [r1, #0]
 800a48c:	d1db      	bne.n	800a446 <_scanf_float+0x39a>
 800a48e:	f8d3 8000 	ldr.w	r8, [r3]
 800a492:	ee10 2a10 	vmov	r2, s0
 800a496:	ee10 0a10 	vmov	r0, s0
 800a49a:	463b      	mov	r3, r7
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f6 fb65 	bl	8000b6c <__aeabi_dcmpun>
 800a4a2:	b128      	cbz	r0, 800a4b0 <_scanf_float+0x404>
 800a4a4:	4808      	ldr	r0, [pc, #32]	; (800a4c8 <_scanf_float+0x41c>)
 800a4a6:	f000 f811 	bl	800a4cc <nanf>
 800a4aa:	ed88 0a00 	vstr	s0, [r8]
 800a4ae:	e7cd      	b.n	800a44c <_scanf_float+0x3a0>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f6 fbb8 	bl	8000c28 <__aeabi_d2f>
 800a4b8:	f8c8 0000 	str.w	r0, [r8]
 800a4bc:	e7c6      	b.n	800a44c <_scanf_float+0x3a0>
 800a4be:	2500      	movs	r5, #0
 800a4c0:	e635      	b.n	800a12e <_scanf_float+0x82>
 800a4c2:	bf00      	nop
 800a4c4:	0800e966 	.word	0x0800e966
 800a4c8:	0800ed9b 	.word	0x0800ed9b

0800a4cc <nanf>:
 800a4cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a4d4 <nanf+0x8>
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	7fc00000 	.word	0x7fc00000

0800a4d8 <siprintf>:
 800a4d8:	b40e      	push	{r1, r2, r3}
 800a4da:	b500      	push	{lr}
 800a4dc:	b09c      	sub	sp, #112	; 0x70
 800a4de:	ab1d      	add	r3, sp, #116	; 0x74
 800a4e0:	9002      	str	r0, [sp, #8]
 800a4e2:	9006      	str	r0, [sp, #24]
 800a4e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4e8:	4809      	ldr	r0, [pc, #36]	; (800a510 <siprintf+0x38>)
 800a4ea:	9107      	str	r1, [sp, #28]
 800a4ec:	9104      	str	r1, [sp, #16]
 800a4ee:	4909      	ldr	r1, [pc, #36]	; (800a514 <siprintf+0x3c>)
 800a4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f4:	9105      	str	r1, [sp, #20]
 800a4f6:	6800      	ldr	r0, [r0, #0]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	a902      	add	r1, sp, #8
 800a4fc:	f002 ff4a 	bl	800d394 <_svfiprintf_r>
 800a500:	9b02      	ldr	r3, [sp, #8]
 800a502:	2200      	movs	r2, #0
 800a504:	701a      	strb	r2, [r3, #0]
 800a506:	b01c      	add	sp, #112	; 0x70
 800a508:	f85d eb04 	ldr.w	lr, [sp], #4
 800a50c:	b003      	add	sp, #12
 800a50e:	4770      	bx	lr
 800a510:	20000070 	.word	0x20000070
 800a514:	ffff0208 	.word	0xffff0208

0800a518 <siscanf>:
 800a518:	b40e      	push	{r1, r2, r3}
 800a51a:	b510      	push	{r4, lr}
 800a51c:	b09f      	sub	sp, #124	; 0x7c
 800a51e:	ac21      	add	r4, sp, #132	; 0x84
 800a520:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a524:	f854 2b04 	ldr.w	r2, [r4], #4
 800a528:	9201      	str	r2, [sp, #4]
 800a52a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a52e:	9004      	str	r0, [sp, #16]
 800a530:	9008      	str	r0, [sp, #32]
 800a532:	f7f5 fe6d 	bl	8000210 <strlen>
 800a536:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <siscanf+0x50>)
 800a538:	9005      	str	r0, [sp, #20]
 800a53a:	9009      	str	r0, [sp, #36]	; 0x24
 800a53c:	930d      	str	r3, [sp, #52]	; 0x34
 800a53e:	480b      	ldr	r0, [pc, #44]	; (800a56c <siscanf+0x54>)
 800a540:	9a01      	ldr	r2, [sp, #4]
 800a542:	6800      	ldr	r0, [r0, #0]
 800a544:	9403      	str	r4, [sp, #12]
 800a546:	2300      	movs	r3, #0
 800a548:	9311      	str	r3, [sp, #68]	; 0x44
 800a54a:	9316      	str	r3, [sp, #88]	; 0x58
 800a54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a550:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a554:	a904      	add	r1, sp, #16
 800a556:	4623      	mov	r3, r4
 800a558:	f003 f876 	bl	800d648 <__ssvfiscanf_r>
 800a55c:	b01f      	add	sp, #124	; 0x7c
 800a55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a562:	b003      	add	sp, #12
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	0800a593 	.word	0x0800a593
 800a56c:	20000070 	.word	0x20000070

0800a570 <__sread>:
 800a570:	b510      	push	{r4, lr}
 800a572:	460c      	mov	r4, r1
 800a574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a578:	f003 fb2a 	bl	800dbd0 <_read_r>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	bfab      	itete	ge
 800a580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a582:	89a3      	ldrhlt	r3, [r4, #12]
 800a584:	181b      	addge	r3, r3, r0
 800a586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a58a:	bfac      	ite	ge
 800a58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a58e:	81a3      	strhlt	r3, [r4, #12]
 800a590:	bd10      	pop	{r4, pc}

0800a592 <__seofread>:
 800a592:	2000      	movs	r0, #0
 800a594:	4770      	bx	lr

0800a596 <__swrite>:
 800a596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59a:	461f      	mov	r7, r3
 800a59c:	898b      	ldrh	r3, [r1, #12]
 800a59e:	05db      	lsls	r3, r3, #23
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	4616      	mov	r6, r2
 800a5a6:	d505      	bpl.n	800a5b4 <__swrite+0x1e>
 800a5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f002 f8e6 	bl	800c780 <_lseek_r>
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5be:	81a3      	strh	r3, [r4, #12]
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ca:	f000 becb 	b.w	800b364 <_write_r>

0800a5ce <__sseek>:
 800a5ce:	b510      	push	{r4, lr}
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d6:	f002 f8d3 	bl	800c780 <_lseek_r>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	bf15      	itete	ne
 800a5e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ea:	81a3      	strheq	r3, [r4, #12]
 800a5ec:	bf18      	it	ne
 800a5ee:	81a3      	strhne	r3, [r4, #12]
 800a5f0:	bd10      	pop	{r4, pc}

0800a5f2 <__sclose>:
 800a5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f6:	f000 bec7 	b.w	800b388 <_close_r>

0800a5fa <sulp>:
 800a5fa:	b570      	push	{r4, r5, r6, lr}
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	ec45 4b10 	vmov	d0, r4, r5
 800a604:	4616      	mov	r6, r2
 800a606:	f002 fc61 	bl	800cecc <__ulp>
 800a60a:	ec51 0b10 	vmov	r0, r1, d0
 800a60e:	b17e      	cbz	r6, 800a630 <sulp+0x36>
 800a610:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a614:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a618:	2b00      	cmp	r3, #0
 800a61a:	dd09      	ble.n	800a630 <sulp+0x36>
 800a61c:	051b      	lsls	r3, r3, #20
 800a61e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a622:	2400      	movs	r4, #0
 800a624:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a628:	4622      	mov	r2, r4
 800a62a:	462b      	mov	r3, r5
 800a62c:	f7f6 f804 	bl	8000638 <__aeabi_dmul>
 800a630:	bd70      	pop	{r4, r5, r6, pc}
 800a632:	0000      	movs	r0, r0
 800a634:	0000      	movs	r0, r0
	...

0800a638 <_strtod_l>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	b0a3      	sub	sp, #140	; 0x8c
 800a63e:	461f      	mov	r7, r3
 800a640:	2300      	movs	r3, #0
 800a642:	931e      	str	r3, [sp, #120]	; 0x78
 800a644:	4ba4      	ldr	r3, [pc, #656]	; (800a8d8 <_strtod_l+0x2a0>)
 800a646:	9219      	str	r2, [sp, #100]	; 0x64
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	9307      	str	r3, [sp, #28]
 800a64c:	4604      	mov	r4, r0
 800a64e:	4618      	mov	r0, r3
 800a650:	4688      	mov	r8, r1
 800a652:	f7f5 fddd 	bl	8000210 <strlen>
 800a656:	f04f 0a00 	mov.w	sl, #0
 800a65a:	4605      	mov	r5, r0
 800a65c:	f04f 0b00 	mov.w	fp, #0
 800a660:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a666:	781a      	ldrb	r2, [r3, #0]
 800a668:	2a2b      	cmp	r2, #43	; 0x2b
 800a66a:	d04c      	beq.n	800a706 <_strtod_l+0xce>
 800a66c:	d839      	bhi.n	800a6e2 <_strtod_l+0xaa>
 800a66e:	2a0d      	cmp	r2, #13
 800a670:	d832      	bhi.n	800a6d8 <_strtod_l+0xa0>
 800a672:	2a08      	cmp	r2, #8
 800a674:	d832      	bhi.n	800a6dc <_strtod_l+0xa4>
 800a676:	2a00      	cmp	r2, #0
 800a678:	d03c      	beq.n	800a6f4 <_strtod_l+0xbc>
 800a67a:	2300      	movs	r3, #0
 800a67c:	930e      	str	r3, [sp, #56]	; 0x38
 800a67e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a680:	7833      	ldrb	r3, [r6, #0]
 800a682:	2b30      	cmp	r3, #48	; 0x30
 800a684:	f040 80b4 	bne.w	800a7f0 <_strtod_l+0x1b8>
 800a688:	7873      	ldrb	r3, [r6, #1]
 800a68a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a68e:	2b58      	cmp	r3, #88	; 0x58
 800a690:	d16c      	bne.n	800a76c <_strtod_l+0x134>
 800a692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	ab1e      	add	r3, sp, #120	; 0x78
 800a698:	9702      	str	r7, [sp, #8]
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	4a8f      	ldr	r2, [pc, #572]	; (800a8dc <_strtod_l+0x2a4>)
 800a69e:	ab1f      	add	r3, sp, #124	; 0x7c
 800a6a0:	a91d      	add	r1, sp, #116	; 0x74
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f001 fd60 	bl	800c168 <__gethex>
 800a6a8:	f010 0707 	ands.w	r7, r0, #7
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	d005      	beq.n	800a6bc <_strtod_l+0x84>
 800a6b0:	2f06      	cmp	r7, #6
 800a6b2:	d12a      	bne.n	800a70a <_strtod_l+0xd2>
 800a6b4:	3601      	adds	r6, #1
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	961d      	str	r6, [sp, #116]	; 0x74
 800a6ba:	930e      	str	r3, [sp, #56]	; 0x38
 800a6bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f040 8596 	bne.w	800b1f0 <_strtod_l+0xbb8>
 800a6c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6c6:	b1db      	cbz	r3, 800a700 <_strtod_l+0xc8>
 800a6c8:	4652      	mov	r2, sl
 800a6ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6ce:	ec43 2b10 	vmov	d0, r2, r3
 800a6d2:	b023      	add	sp, #140	; 0x8c
 800a6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d8:	2a20      	cmp	r2, #32
 800a6da:	d1ce      	bne.n	800a67a <_strtod_l+0x42>
 800a6dc:	3301      	adds	r3, #1
 800a6de:	931d      	str	r3, [sp, #116]	; 0x74
 800a6e0:	e7c0      	b.n	800a664 <_strtod_l+0x2c>
 800a6e2:	2a2d      	cmp	r2, #45	; 0x2d
 800a6e4:	d1c9      	bne.n	800a67a <_strtod_l+0x42>
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	920e      	str	r2, [sp, #56]	; 0x38
 800a6ea:	1c5a      	adds	r2, r3, #1
 800a6ec:	921d      	str	r2, [sp, #116]	; 0x74
 800a6ee:	785b      	ldrb	r3, [r3, #1]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1c4      	bne.n	800a67e <_strtod_l+0x46>
 800a6f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f040 8576 	bne.w	800b1ec <_strtod_l+0xbb4>
 800a700:	4652      	mov	r2, sl
 800a702:	465b      	mov	r3, fp
 800a704:	e7e3      	b.n	800a6ce <_strtod_l+0x96>
 800a706:	2200      	movs	r2, #0
 800a708:	e7ee      	b.n	800a6e8 <_strtod_l+0xb0>
 800a70a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a70c:	b13a      	cbz	r2, 800a71e <_strtod_l+0xe6>
 800a70e:	2135      	movs	r1, #53	; 0x35
 800a710:	a820      	add	r0, sp, #128	; 0x80
 800a712:	f002 fce6 	bl	800d0e2 <__copybits>
 800a716:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a718:	4620      	mov	r0, r4
 800a71a:	f002 f8ab 	bl	800c874 <_Bfree>
 800a71e:	3f01      	subs	r7, #1
 800a720:	2f05      	cmp	r7, #5
 800a722:	d807      	bhi.n	800a734 <_strtod_l+0xfc>
 800a724:	e8df f007 	tbb	[pc, r7]
 800a728:	1d180b0e 	.word	0x1d180b0e
 800a72c:	030e      	.short	0x030e
 800a72e:	f04f 0b00 	mov.w	fp, #0
 800a732:	46da      	mov	sl, fp
 800a734:	0728      	lsls	r0, r5, #28
 800a736:	d5c1      	bpl.n	800a6bc <_strtod_l+0x84>
 800a738:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a73c:	e7be      	b.n	800a6bc <_strtod_l+0x84>
 800a73e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a742:	e7f7      	b.n	800a734 <_strtod_l+0xfc>
 800a744:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a748:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a74a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a74e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a752:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a756:	e7ed      	b.n	800a734 <_strtod_l+0xfc>
 800a758:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a8e0 <_strtod_l+0x2a8>
 800a75c:	f04f 0a00 	mov.w	sl, #0
 800a760:	e7e8      	b.n	800a734 <_strtod_l+0xfc>
 800a762:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a766:	f04f 3aff 	mov.w	sl, #4294967295
 800a76a:	e7e3      	b.n	800a734 <_strtod_l+0xfc>
 800a76c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	921d      	str	r2, [sp, #116]	; 0x74
 800a772:	785b      	ldrb	r3, [r3, #1]
 800a774:	2b30      	cmp	r3, #48	; 0x30
 800a776:	d0f9      	beq.n	800a76c <_strtod_l+0x134>
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d09f      	beq.n	800a6bc <_strtod_l+0x84>
 800a77c:	2301      	movs	r3, #1
 800a77e:	f04f 0900 	mov.w	r9, #0
 800a782:	9304      	str	r3, [sp, #16]
 800a784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a786:	930a      	str	r3, [sp, #40]	; 0x28
 800a788:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a78c:	464f      	mov	r7, r9
 800a78e:	220a      	movs	r2, #10
 800a790:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a792:	7806      	ldrb	r6, [r0, #0]
 800a794:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a798:	b2d9      	uxtb	r1, r3
 800a79a:	2909      	cmp	r1, #9
 800a79c:	d92a      	bls.n	800a7f4 <_strtod_l+0x1bc>
 800a79e:	9907      	ldr	r1, [sp, #28]
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	f003 fa7b 	bl	800dc9c <strncmp>
 800a7a6:	b398      	cbz	r0, 800a810 <_strtod_l+0x1d8>
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	4633      	mov	r3, r6
 800a7ac:	463d      	mov	r5, r7
 800a7ae:	9007      	str	r0, [sp, #28]
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	2b65      	cmp	r3, #101	; 0x65
 800a7b4:	d001      	beq.n	800a7ba <_strtod_l+0x182>
 800a7b6:	2b45      	cmp	r3, #69	; 0x45
 800a7b8:	d118      	bne.n	800a7ec <_strtod_l+0x1b4>
 800a7ba:	b91d      	cbnz	r5, 800a7c4 <_strtod_l+0x18c>
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	4303      	orrs	r3, r0
 800a7c0:	d098      	beq.n	800a6f4 <_strtod_l+0xbc>
 800a7c2:	2500      	movs	r5, #0
 800a7c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a7c8:	f108 0301 	add.w	r3, r8, #1
 800a7cc:	931d      	str	r3, [sp, #116]	; 0x74
 800a7ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a7d2:	2b2b      	cmp	r3, #43	; 0x2b
 800a7d4:	d075      	beq.n	800a8c2 <_strtod_l+0x28a>
 800a7d6:	2b2d      	cmp	r3, #45	; 0x2d
 800a7d8:	d07b      	beq.n	800a8d2 <_strtod_l+0x29a>
 800a7da:	f04f 0c00 	mov.w	ip, #0
 800a7de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a7e2:	2909      	cmp	r1, #9
 800a7e4:	f240 8082 	bls.w	800a8ec <_strtod_l+0x2b4>
 800a7e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a7ec:	2600      	movs	r6, #0
 800a7ee:	e09d      	b.n	800a92c <_strtod_l+0x2f4>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e7c4      	b.n	800a77e <_strtod_l+0x146>
 800a7f4:	2f08      	cmp	r7, #8
 800a7f6:	bfd8      	it	le
 800a7f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a7fa:	f100 0001 	add.w	r0, r0, #1
 800a7fe:	bfda      	itte	le
 800a800:	fb02 3301 	mlale	r3, r2, r1, r3
 800a804:	9309      	strle	r3, [sp, #36]	; 0x24
 800a806:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a80a:	3701      	adds	r7, #1
 800a80c:	901d      	str	r0, [sp, #116]	; 0x74
 800a80e:	e7bf      	b.n	800a790 <_strtod_l+0x158>
 800a810:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a812:	195a      	adds	r2, r3, r5
 800a814:	921d      	str	r2, [sp, #116]	; 0x74
 800a816:	5d5b      	ldrb	r3, [r3, r5]
 800a818:	2f00      	cmp	r7, #0
 800a81a:	d037      	beq.n	800a88c <_strtod_l+0x254>
 800a81c:	9007      	str	r0, [sp, #28]
 800a81e:	463d      	mov	r5, r7
 800a820:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a824:	2a09      	cmp	r2, #9
 800a826:	d912      	bls.n	800a84e <_strtod_l+0x216>
 800a828:	2201      	movs	r2, #1
 800a82a:	e7c2      	b.n	800a7b2 <_strtod_l+0x17a>
 800a82c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	921d      	str	r2, [sp, #116]	; 0x74
 800a832:	785b      	ldrb	r3, [r3, #1]
 800a834:	3001      	adds	r0, #1
 800a836:	2b30      	cmp	r3, #48	; 0x30
 800a838:	d0f8      	beq.n	800a82c <_strtod_l+0x1f4>
 800a83a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a83e:	2a08      	cmp	r2, #8
 800a840:	f200 84db 	bhi.w	800b1fa <_strtod_l+0xbc2>
 800a844:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a846:	9007      	str	r0, [sp, #28]
 800a848:	2000      	movs	r0, #0
 800a84a:	920a      	str	r2, [sp, #40]	; 0x28
 800a84c:	4605      	mov	r5, r0
 800a84e:	3b30      	subs	r3, #48	; 0x30
 800a850:	f100 0201 	add.w	r2, r0, #1
 800a854:	d014      	beq.n	800a880 <_strtod_l+0x248>
 800a856:	9907      	ldr	r1, [sp, #28]
 800a858:	4411      	add	r1, r2
 800a85a:	9107      	str	r1, [sp, #28]
 800a85c:	462a      	mov	r2, r5
 800a85e:	eb00 0e05 	add.w	lr, r0, r5
 800a862:	210a      	movs	r1, #10
 800a864:	4572      	cmp	r2, lr
 800a866:	d113      	bne.n	800a890 <_strtod_l+0x258>
 800a868:	182a      	adds	r2, r5, r0
 800a86a:	2a08      	cmp	r2, #8
 800a86c:	f105 0501 	add.w	r5, r5, #1
 800a870:	4405      	add	r5, r0
 800a872:	dc1c      	bgt.n	800a8ae <_strtod_l+0x276>
 800a874:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a876:	220a      	movs	r2, #10
 800a878:	fb02 3301 	mla	r3, r2, r1, r3
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	2200      	movs	r2, #0
 800a880:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a882:	1c59      	adds	r1, r3, #1
 800a884:	911d      	str	r1, [sp, #116]	; 0x74
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	4610      	mov	r0, r2
 800a88a:	e7c9      	b.n	800a820 <_strtod_l+0x1e8>
 800a88c:	4638      	mov	r0, r7
 800a88e:	e7d2      	b.n	800a836 <_strtod_l+0x1fe>
 800a890:	2a08      	cmp	r2, #8
 800a892:	dc04      	bgt.n	800a89e <_strtod_l+0x266>
 800a894:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a896:	434e      	muls	r6, r1
 800a898:	9609      	str	r6, [sp, #36]	; 0x24
 800a89a:	3201      	adds	r2, #1
 800a89c:	e7e2      	b.n	800a864 <_strtod_l+0x22c>
 800a89e:	f102 0c01 	add.w	ip, r2, #1
 800a8a2:	f1bc 0f10 	cmp.w	ip, #16
 800a8a6:	bfd8      	it	le
 800a8a8:	fb01 f909 	mulle.w	r9, r1, r9
 800a8ac:	e7f5      	b.n	800a89a <_strtod_l+0x262>
 800a8ae:	2d10      	cmp	r5, #16
 800a8b0:	bfdc      	itt	le
 800a8b2:	220a      	movle	r2, #10
 800a8b4:	fb02 3909 	mlale	r9, r2, r9, r3
 800a8b8:	e7e1      	b.n	800a87e <_strtod_l+0x246>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	9307      	str	r3, [sp, #28]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	e77c      	b.n	800a7bc <_strtod_l+0x184>
 800a8c2:	f04f 0c00 	mov.w	ip, #0
 800a8c6:	f108 0302 	add.w	r3, r8, #2
 800a8ca:	931d      	str	r3, [sp, #116]	; 0x74
 800a8cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a8d0:	e785      	b.n	800a7de <_strtod_l+0x1a6>
 800a8d2:	f04f 0c01 	mov.w	ip, #1
 800a8d6:	e7f6      	b.n	800a8c6 <_strtod_l+0x28e>
 800a8d8:	0800ebc0 	.word	0x0800ebc0
 800a8dc:	0800e96c 	.word	0x0800e96c
 800a8e0:	7ff00000 	.word	0x7ff00000
 800a8e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8e6:	1c59      	adds	r1, r3, #1
 800a8e8:	911d      	str	r1, [sp, #116]	; 0x74
 800a8ea:	785b      	ldrb	r3, [r3, #1]
 800a8ec:	2b30      	cmp	r3, #48	; 0x30
 800a8ee:	d0f9      	beq.n	800a8e4 <_strtod_l+0x2ac>
 800a8f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a8f4:	2908      	cmp	r1, #8
 800a8f6:	f63f af79 	bhi.w	800a7ec <_strtod_l+0x1b4>
 800a8fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a8fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a900:	9308      	str	r3, [sp, #32]
 800a902:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a904:	1c59      	adds	r1, r3, #1
 800a906:	911d      	str	r1, [sp, #116]	; 0x74
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a90e:	2e09      	cmp	r6, #9
 800a910:	d937      	bls.n	800a982 <_strtod_l+0x34a>
 800a912:	9e08      	ldr	r6, [sp, #32]
 800a914:	1b89      	subs	r1, r1, r6
 800a916:	2908      	cmp	r1, #8
 800a918:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a91c:	dc02      	bgt.n	800a924 <_strtod_l+0x2ec>
 800a91e:	4576      	cmp	r6, lr
 800a920:	bfa8      	it	ge
 800a922:	4676      	movge	r6, lr
 800a924:	f1bc 0f00 	cmp.w	ip, #0
 800a928:	d000      	beq.n	800a92c <_strtod_l+0x2f4>
 800a92a:	4276      	negs	r6, r6
 800a92c:	2d00      	cmp	r5, #0
 800a92e:	d14f      	bne.n	800a9d0 <_strtod_l+0x398>
 800a930:	9904      	ldr	r1, [sp, #16]
 800a932:	4301      	orrs	r1, r0
 800a934:	f47f aec2 	bne.w	800a6bc <_strtod_l+0x84>
 800a938:	2a00      	cmp	r2, #0
 800a93a:	f47f aedb 	bne.w	800a6f4 <_strtod_l+0xbc>
 800a93e:	2b69      	cmp	r3, #105	; 0x69
 800a940:	d027      	beq.n	800a992 <_strtod_l+0x35a>
 800a942:	dc24      	bgt.n	800a98e <_strtod_l+0x356>
 800a944:	2b49      	cmp	r3, #73	; 0x49
 800a946:	d024      	beq.n	800a992 <_strtod_l+0x35a>
 800a948:	2b4e      	cmp	r3, #78	; 0x4e
 800a94a:	f47f aed3 	bne.w	800a6f4 <_strtod_l+0xbc>
 800a94e:	499e      	ldr	r1, [pc, #632]	; (800abc8 <_strtod_l+0x590>)
 800a950:	a81d      	add	r0, sp, #116	; 0x74
 800a952:	f001 fe61 	bl	800c618 <__match>
 800a956:	2800      	cmp	r0, #0
 800a958:	f43f aecc 	beq.w	800a6f4 <_strtod_l+0xbc>
 800a95c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b28      	cmp	r3, #40	; 0x28
 800a962:	d12d      	bne.n	800a9c0 <_strtod_l+0x388>
 800a964:	4999      	ldr	r1, [pc, #612]	; (800abcc <_strtod_l+0x594>)
 800a966:	aa20      	add	r2, sp, #128	; 0x80
 800a968:	a81d      	add	r0, sp, #116	; 0x74
 800a96a:	f001 fe69 	bl	800c640 <__hexnan>
 800a96e:	2805      	cmp	r0, #5
 800a970:	d126      	bne.n	800a9c0 <_strtod_l+0x388>
 800a972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a974:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a978:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a97c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a980:	e69c      	b.n	800a6bc <_strtod_l+0x84>
 800a982:	210a      	movs	r1, #10
 800a984:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a988:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a98c:	e7b9      	b.n	800a902 <_strtod_l+0x2ca>
 800a98e:	2b6e      	cmp	r3, #110	; 0x6e
 800a990:	e7db      	b.n	800a94a <_strtod_l+0x312>
 800a992:	498f      	ldr	r1, [pc, #572]	; (800abd0 <_strtod_l+0x598>)
 800a994:	a81d      	add	r0, sp, #116	; 0x74
 800a996:	f001 fe3f 	bl	800c618 <__match>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	f43f aeaa 	beq.w	800a6f4 <_strtod_l+0xbc>
 800a9a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9a2:	498c      	ldr	r1, [pc, #560]	; (800abd4 <_strtod_l+0x59c>)
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	a81d      	add	r0, sp, #116	; 0x74
 800a9a8:	931d      	str	r3, [sp, #116]	; 0x74
 800a9aa:	f001 fe35 	bl	800c618 <__match>
 800a9ae:	b910      	cbnz	r0, 800a9b6 <_strtod_l+0x37e>
 800a9b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	931d      	str	r3, [sp, #116]	; 0x74
 800a9b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800abe4 <_strtod_l+0x5ac>
 800a9ba:	f04f 0a00 	mov.w	sl, #0
 800a9be:	e67d      	b.n	800a6bc <_strtod_l+0x84>
 800a9c0:	4885      	ldr	r0, [pc, #532]	; (800abd8 <_strtod_l+0x5a0>)
 800a9c2:	f003 f919 	bl	800dbf8 <nan>
 800a9c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a9ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a9ce:	e675      	b.n	800a6bc <_strtod_l+0x84>
 800a9d0:	9b07      	ldr	r3, [sp, #28]
 800a9d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9d4:	1af3      	subs	r3, r6, r3
 800a9d6:	2f00      	cmp	r7, #0
 800a9d8:	bf08      	it	eq
 800a9da:	462f      	moveq	r7, r5
 800a9dc:	2d10      	cmp	r5, #16
 800a9de:	9308      	str	r3, [sp, #32]
 800a9e0:	46a8      	mov	r8, r5
 800a9e2:	bfa8      	it	ge
 800a9e4:	f04f 0810 	movge.w	r8, #16
 800a9e8:	f7f5 fdac 	bl	8000544 <__aeabi_ui2d>
 800a9ec:	2d09      	cmp	r5, #9
 800a9ee:	4682      	mov	sl, r0
 800a9f0:	468b      	mov	fp, r1
 800a9f2:	dd13      	ble.n	800aa1c <_strtod_l+0x3e4>
 800a9f4:	4b79      	ldr	r3, [pc, #484]	; (800abdc <_strtod_l+0x5a4>)
 800a9f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a9fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a9fe:	f7f5 fe1b 	bl	8000638 <__aeabi_dmul>
 800aa02:	4682      	mov	sl, r0
 800aa04:	4648      	mov	r0, r9
 800aa06:	468b      	mov	fp, r1
 800aa08:	f7f5 fd9c 	bl	8000544 <__aeabi_ui2d>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4650      	mov	r0, sl
 800aa12:	4659      	mov	r1, fp
 800aa14:	f7f5 fc5a 	bl	80002cc <__adddf3>
 800aa18:	4682      	mov	sl, r0
 800aa1a:	468b      	mov	fp, r1
 800aa1c:	2d0f      	cmp	r5, #15
 800aa1e:	dc38      	bgt.n	800aa92 <_strtod_l+0x45a>
 800aa20:	9b08      	ldr	r3, [sp, #32]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f43f ae4a 	beq.w	800a6bc <_strtod_l+0x84>
 800aa28:	dd24      	ble.n	800aa74 <_strtod_l+0x43c>
 800aa2a:	2b16      	cmp	r3, #22
 800aa2c:	dc0b      	bgt.n	800aa46 <_strtod_l+0x40e>
 800aa2e:	4d6b      	ldr	r5, [pc, #428]	; (800abdc <_strtod_l+0x5a4>)
 800aa30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800aa34:	e9d5 0100 	ldrd	r0, r1, [r5]
 800aa38:	4652      	mov	r2, sl
 800aa3a:	465b      	mov	r3, fp
 800aa3c:	f7f5 fdfc 	bl	8000638 <__aeabi_dmul>
 800aa40:	4682      	mov	sl, r0
 800aa42:	468b      	mov	fp, r1
 800aa44:	e63a      	b.n	800a6bc <_strtod_l+0x84>
 800aa46:	9a08      	ldr	r2, [sp, #32]
 800aa48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	db20      	blt.n	800aa92 <_strtod_l+0x45a>
 800aa50:	4c62      	ldr	r4, [pc, #392]	; (800abdc <_strtod_l+0x5a4>)
 800aa52:	f1c5 050f 	rsb	r5, r5, #15
 800aa56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aa5a:	4652      	mov	r2, sl
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa62:	f7f5 fde9 	bl	8000638 <__aeabi_dmul>
 800aa66:	9b08      	ldr	r3, [sp, #32]
 800aa68:	1b5d      	subs	r5, r3, r5
 800aa6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aa6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa72:	e7e3      	b.n	800aa3c <_strtod_l+0x404>
 800aa74:	9b08      	ldr	r3, [sp, #32]
 800aa76:	3316      	adds	r3, #22
 800aa78:	db0b      	blt.n	800aa92 <_strtod_l+0x45a>
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	4a57      	ldr	r2, [pc, #348]	; (800abdc <_strtod_l+0x5a4>)
 800aa7e:	1b9e      	subs	r6, r3, r6
 800aa80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800aa84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa88:	4650      	mov	r0, sl
 800aa8a:	4659      	mov	r1, fp
 800aa8c:	f7f5 fefe 	bl	800088c <__aeabi_ddiv>
 800aa90:	e7d6      	b.n	800aa40 <_strtod_l+0x408>
 800aa92:	9b08      	ldr	r3, [sp, #32]
 800aa94:	eba5 0808 	sub.w	r8, r5, r8
 800aa98:	4498      	add	r8, r3
 800aa9a:	f1b8 0f00 	cmp.w	r8, #0
 800aa9e:	dd71      	ble.n	800ab84 <_strtod_l+0x54c>
 800aaa0:	f018 030f 	ands.w	r3, r8, #15
 800aaa4:	d00a      	beq.n	800aabc <_strtod_l+0x484>
 800aaa6:	494d      	ldr	r1, [pc, #308]	; (800abdc <_strtod_l+0x5a4>)
 800aaa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aaac:	4652      	mov	r2, sl
 800aaae:	465b      	mov	r3, fp
 800aab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aab4:	f7f5 fdc0 	bl	8000638 <__aeabi_dmul>
 800aab8:	4682      	mov	sl, r0
 800aaba:	468b      	mov	fp, r1
 800aabc:	f038 080f 	bics.w	r8, r8, #15
 800aac0:	d04d      	beq.n	800ab5e <_strtod_l+0x526>
 800aac2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aac6:	dd22      	ble.n	800ab0e <_strtod_l+0x4d6>
 800aac8:	2500      	movs	r5, #0
 800aaca:	462e      	mov	r6, r5
 800aacc:	9509      	str	r5, [sp, #36]	; 0x24
 800aace:	9507      	str	r5, [sp, #28]
 800aad0:	2322      	movs	r3, #34	; 0x22
 800aad2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800abe4 <_strtod_l+0x5ac>
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	f04f 0a00 	mov.w	sl, #0
 800aadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f43f adec 	beq.w	800a6bc <_strtod_l+0x84>
 800aae4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aae6:	4620      	mov	r0, r4
 800aae8:	f001 fec4 	bl	800c874 <_Bfree>
 800aaec:	9907      	ldr	r1, [sp, #28]
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f001 fec0 	bl	800c874 <_Bfree>
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f001 febc 	bl	800c874 <_Bfree>
 800aafc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aafe:	4620      	mov	r0, r4
 800ab00:	f001 feb8 	bl	800c874 <_Bfree>
 800ab04:	4629      	mov	r1, r5
 800ab06:	4620      	mov	r0, r4
 800ab08:	f001 feb4 	bl	800c874 <_Bfree>
 800ab0c:	e5d6      	b.n	800a6bc <_strtod_l+0x84>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ab14:	4650      	mov	r0, sl
 800ab16:	4659      	mov	r1, fp
 800ab18:	4699      	mov	r9, r3
 800ab1a:	f1b8 0f01 	cmp.w	r8, #1
 800ab1e:	dc21      	bgt.n	800ab64 <_strtod_l+0x52c>
 800ab20:	b10b      	cbz	r3, 800ab26 <_strtod_l+0x4ee>
 800ab22:	4682      	mov	sl, r0
 800ab24:	468b      	mov	fp, r1
 800ab26:	4b2e      	ldr	r3, [pc, #184]	; (800abe0 <_strtod_l+0x5a8>)
 800ab28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ab2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ab30:	4652      	mov	r2, sl
 800ab32:	465b      	mov	r3, fp
 800ab34:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ab38:	f7f5 fd7e 	bl	8000638 <__aeabi_dmul>
 800ab3c:	4b29      	ldr	r3, [pc, #164]	; (800abe4 <_strtod_l+0x5ac>)
 800ab3e:	460a      	mov	r2, r1
 800ab40:	400b      	ands	r3, r1
 800ab42:	4929      	ldr	r1, [pc, #164]	; (800abe8 <_strtod_l+0x5b0>)
 800ab44:	428b      	cmp	r3, r1
 800ab46:	4682      	mov	sl, r0
 800ab48:	d8be      	bhi.n	800aac8 <_strtod_l+0x490>
 800ab4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ab4e:	428b      	cmp	r3, r1
 800ab50:	bf86      	itte	hi
 800ab52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800abec <_strtod_l+0x5b4>
 800ab56:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9304      	str	r3, [sp, #16]
 800ab62:	e081      	b.n	800ac68 <_strtod_l+0x630>
 800ab64:	f018 0f01 	tst.w	r8, #1
 800ab68:	d007      	beq.n	800ab7a <_strtod_l+0x542>
 800ab6a:	4b1d      	ldr	r3, [pc, #116]	; (800abe0 <_strtod_l+0x5a8>)
 800ab6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f7f5 fd60 	bl	8000638 <__aeabi_dmul>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	f109 0901 	add.w	r9, r9, #1
 800ab7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab82:	e7ca      	b.n	800ab1a <_strtod_l+0x4e2>
 800ab84:	d0eb      	beq.n	800ab5e <_strtod_l+0x526>
 800ab86:	f1c8 0800 	rsb	r8, r8, #0
 800ab8a:	f018 020f 	ands.w	r2, r8, #15
 800ab8e:	d00a      	beq.n	800aba6 <_strtod_l+0x56e>
 800ab90:	4b12      	ldr	r3, [pc, #72]	; (800abdc <_strtod_l+0x5a4>)
 800ab92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab96:	4650      	mov	r0, sl
 800ab98:	4659      	mov	r1, fp
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fe75 	bl	800088c <__aeabi_ddiv>
 800aba2:	4682      	mov	sl, r0
 800aba4:	468b      	mov	fp, r1
 800aba6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800abaa:	d0d8      	beq.n	800ab5e <_strtod_l+0x526>
 800abac:	f1b8 0f1f 	cmp.w	r8, #31
 800abb0:	dd1e      	ble.n	800abf0 <_strtod_l+0x5b8>
 800abb2:	2500      	movs	r5, #0
 800abb4:	462e      	mov	r6, r5
 800abb6:	9509      	str	r5, [sp, #36]	; 0x24
 800abb8:	9507      	str	r5, [sp, #28]
 800abba:	2322      	movs	r3, #34	; 0x22
 800abbc:	f04f 0a00 	mov.w	sl, #0
 800abc0:	f04f 0b00 	mov.w	fp, #0
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	e789      	b.n	800aadc <_strtod_l+0x4a4>
 800abc8:	0800e941 	.word	0x0800e941
 800abcc:	0800e980 	.word	0x0800e980
 800abd0:	0800e939 	.word	0x0800e939
 800abd4:	0800eac4 	.word	0x0800eac4
 800abd8:	0800ed9b 	.word	0x0800ed9b
 800abdc:	0800ec60 	.word	0x0800ec60
 800abe0:	0800ec38 	.word	0x0800ec38
 800abe4:	7ff00000 	.word	0x7ff00000
 800abe8:	7ca00000 	.word	0x7ca00000
 800abec:	7fefffff 	.word	0x7fefffff
 800abf0:	f018 0310 	ands.w	r3, r8, #16
 800abf4:	bf18      	it	ne
 800abf6:	236a      	movne	r3, #106	; 0x6a
 800abf8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800afb0 <_strtod_l+0x978>
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	4650      	mov	r0, sl
 800ac00:	4659      	mov	r1, fp
 800ac02:	2300      	movs	r3, #0
 800ac04:	f018 0f01 	tst.w	r8, #1
 800ac08:	d004      	beq.n	800ac14 <_strtod_l+0x5dc>
 800ac0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac0e:	f7f5 fd13 	bl	8000638 <__aeabi_dmul>
 800ac12:	2301      	movs	r3, #1
 800ac14:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ac18:	f109 0908 	add.w	r9, r9, #8
 800ac1c:	d1f2      	bne.n	800ac04 <_strtod_l+0x5cc>
 800ac1e:	b10b      	cbz	r3, 800ac24 <_strtod_l+0x5ec>
 800ac20:	4682      	mov	sl, r0
 800ac22:	468b      	mov	fp, r1
 800ac24:	9b04      	ldr	r3, [sp, #16]
 800ac26:	b1bb      	cbz	r3, 800ac58 <_strtod_l+0x620>
 800ac28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ac2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	4659      	mov	r1, fp
 800ac34:	dd10      	ble.n	800ac58 <_strtod_l+0x620>
 800ac36:	2b1f      	cmp	r3, #31
 800ac38:	f340 8128 	ble.w	800ae8c <_strtod_l+0x854>
 800ac3c:	2b34      	cmp	r3, #52	; 0x34
 800ac3e:	bfde      	ittt	le
 800ac40:	3b20      	suble	r3, #32
 800ac42:	f04f 32ff 	movle.w	r2, #4294967295
 800ac46:	fa02 f303 	lslle.w	r3, r2, r3
 800ac4a:	f04f 0a00 	mov.w	sl, #0
 800ac4e:	bfcc      	ite	gt
 800ac50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ac54:	ea03 0b01 	andle.w	fp, r3, r1
 800ac58:	2200      	movs	r2, #0
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4650      	mov	r0, sl
 800ac5e:	4659      	mov	r1, fp
 800ac60:	f7f5 ff52 	bl	8000b08 <__aeabi_dcmpeq>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d1a4      	bne.n	800abb2 <_strtod_l+0x57a>
 800ac68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac6e:	462b      	mov	r3, r5
 800ac70:	463a      	mov	r2, r7
 800ac72:	4620      	mov	r0, r4
 800ac74:	f001 fe6a 	bl	800c94c <__s2b>
 800ac78:	9009      	str	r0, [sp, #36]	; 0x24
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	f43f af24 	beq.w	800aac8 <_strtod_l+0x490>
 800ac80:	9b07      	ldr	r3, [sp, #28]
 800ac82:	1b9e      	subs	r6, r3, r6
 800ac84:	9b08      	ldr	r3, [sp, #32]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bfb4      	ite	lt
 800ac8a:	4633      	movlt	r3, r6
 800ac8c:	2300      	movge	r3, #0
 800ac8e:	9310      	str	r3, [sp, #64]	; 0x40
 800ac90:	9b08      	ldr	r3, [sp, #32]
 800ac92:	2500      	movs	r5, #0
 800ac94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac98:	9318      	str	r3, [sp, #96]	; 0x60
 800ac9a:	462e      	mov	r6, r5
 800ac9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac9e:	4620      	mov	r0, r4
 800aca0:	6859      	ldr	r1, [r3, #4]
 800aca2:	f001 fda7 	bl	800c7f4 <_Balloc>
 800aca6:	9007      	str	r0, [sp, #28]
 800aca8:	2800      	cmp	r0, #0
 800acaa:	f43f af11 	beq.w	800aad0 <_strtod_l+0x498>
 800acae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb0:	691a      	ldr	r2, [r3, #16]
 800acb2:	3202      	adds	r2, #2
 800acb4:	f103 010c 	add.w	r1, r3, #12
 800acb8:	0092      	lsls	r2, r2, #2
 800acba:	300c      	adds	r0, #12
 800acbc:	f001 fd8c 	bl	800c7d8 <memcpy>
 800acc0:	ec4b ab10 	vmov	d0, sl, fp
 800acc4:	aa20      	add	r2, sp, #128	; 0x80
 800acc6:	a91f      	add	r1, sp, #124	; 0x7c
 800acc8:	4620      	mov	r0, r4
 800acca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800acce:	f002 f979 	bl	800cfc4 <__d2b>
 800acd2:	901e      	str	r0, [sp, #120]	; 0x78
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f43f aefb 	beq.w	800aad0 <_strtod_l+0x498>
 800acda:	2101      	movs	r1, #1
 800acdc:	4620      	mov	r0, r4
 800acde:	f001 fecf 	bl	800ca80 <__i2b>
 800ace2:	4606      	mov	r6, r0
 800ace4:	2800      	cmp	r0, #0
 800ace6:	f43f aef3 	beq.w	800aad0 <_strtod_l+0x498>
 800acea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800acec:	9904      	ldr	r1, [sp, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bfab      	itete	ge
 800acf2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800acf4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800acf6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800acf8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800acfc:	bfac      	ite	ge
 800acfe:	eb03 0902 	addge.w	r9, r3, r2
 800ad02:	1ad7      	sublt	r7, r2, r3
 800ad04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad06:	eba3 0801 	sub.w	r8, r3, r1
 800ad0a:	4490      	add	r8, r2
 800ad0c:	4ba3      	ldr	r3, [pc, #652]	; (800af9c <_strtod_l+0x964>)
 800ad0e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad12:	4598      	cmp	r8, r3
 800ad14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad18:	f280 80cc 	bge.w	800aeb4 <_strtod_l+0x87c>
 800ad1c:	eba3 0308 	sub.w	r3, r3, r8
 800ad20:	2b1f      	cmp	r3, #31
 800ad22:	eba2 0203 	sub.w	r2, r2, r3
 800ad26:	f04f 0101 	mov.w	r1, #1
 800ad2a:	f300 80b6 	bgt.w	800ae9a <_strtod_l+0x862>
 800ad2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad32:	9311      	str	r3, [sp, #68]	; 0x44
 800ad34:	2300      	movs	r3, #0
 800ad36:	930c      	str	r3, [sp, #48]	; 0x30
 800ad38:	eb09 0802 	add.w	r8, r9, r2
 800ad3c:	9b04      	ldr	r3, [sp, #16]
 800ad3e:	45c1      	cmp	r9, r8
 800ad40:	4417      	add	r7, r2
 800ad42:	441f      	add	r7, r3
 800ad44:	464b      	mov	r3, r9
 800ad46:	bfa8      	it	ge
 800ad48:	4643      	movge	r3, r8
 800ad4a:	42bb      	cmp	r3, r7
 800ad4c:	bfa8      	it	ge
 800ad4e:	463b      	movge	r3, r7
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	bfc2      	ittt	gt
 800ad54:	eba8 0803 	subgt.w	r8, r8, r3
 800ad58:	1aff      	subgt	r7, r7, r3
 800ad5a:	eba9 0903 	subgt.w	r9, r9, r3
 800ad5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dd17      	ble.n	800ad94 <_strtod_l+0x75c>
 800ad64:	4631      	mov	r1, r6
 800ad66:	461a      	mov	r2, r3
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f001 ff45 	bl	800cbf8 <__pow5mult>
 800ad6e:	4606      	mov	r6, r0
 800ad70:	2800      	cmp	r0, #0
 800ad72:	f43f aead 	beq.w	800aad0 <_strtod_l+0x498>
 800ad76:	4601      	mov	r1, r0
 800ad78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f001 fe96 	bl	800caac <__multiply>
 800ad80:	900f      	str	r0, [sp, #60]	; 0x3c
 800ad82:	2800      	cmp	r0, #0
 800ad84:	f43f aea4 	beq.w	800aad0 <_strtod_l+0x498>
 800ad88:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f001 fd72 	bl	800c874 <_Bfree>
 800ad90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad92:	931e      	str	r3, [sp, #120]	; 0x78
 800ad94:	f1b8 0f00 	cmp.w	r8, #0
 800ad98:	f300 8091 	bgt.w	800aebe <_strtod_l+0x886>
 800ad9c:	9b08      	ldr	r3, [sp, #32]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dd08      	ble.n	800adb4 <_strtod_l+0x77c>
 800ada2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ada4:	9907      	ldr	r1, [sp, #28]
 800ada6:	4620      	mov	r0, r4
 800ada8:	f001 ff26 	bl	800cbf8 <__pow5mult>
 800adac:	9007      	str	r0, [sp, #28]
 800adae:	2800      	cmp	r0, #0
 800adb0:	f43f ae8e 	beq.w	800aad0 <_strtod_l+0x498>
 800adb4:	2f00      	cmp	r7, #0
 800adb6:	dd08      	ble.n	800adca <_strtod_l+0x792>
 800adb8:	9907      	ldr	r1, [sp, #28]
 800adba:	463a      	mov	r2, r7
 800adbc:	4620      	mov	r0, r4
 800adbe:	f001 ff75 	bl	800ccac <__lshift>
 800adc2:	9007      	str	r0, [sp, #28]
 800adc4:	2800      	cmp	r0, #0
 800adc6:	f43f ae83 	beq.w	800aad0 <_strtod_l+0x498>
 800adca:	f1b9 0f00 	cmp.w	r9, #0
 800adce:	dd08      	ble.n	800ade2 <_strtod_l+0x7aa>
 800add0:	4631      	mov	r1, r6
 800add2:	464a      	mov	r2, r9
 800add4:	4620      	mov	r0, r4
 800add6:	f001 ff69 	bl	800ccac <__lshift>
 800adda:	4606      	mov	r6, r0
 800addc:	2800      	cmp	r0, #0
 800adde:	f43f ae77 	beq.w	800aad0 <_strtod_l+0x498>
 800ade2:	9a07      	ldr	r2, [sp, #28]
 800ade4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ade6:	4620      	mov	r0, r4
 800ade8:	f001 ffe8 	bl	800cdbc <__mdiff>
 800adec:	4605      	mov	r5, r0
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f ae6e 	beq.w	800aad0 <_strtod_l+0x498>
 800adf4:	68c3      	ldr	r3, [r0, #12]
 800adf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800adf8:	2300      	movs	r3, #0
 800adfa:	60c3      	str	r3, [r0, #12]
 800adfc:	4631      	mov	r1, r6
 800adfe:	f001 ffc1 	bl	800cd84 <__mcmp>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	da65      	bge.n	800aed2 <_strtod_l+0x89a>
 800ae06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae08:	ea53 030a 	orrs.w	r3, r3, sl
 800ae0c:	f040 8087 	bne.w	800af1e <_strtod_l+0x8e6>
 800ae10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f040 8082 	bne.w	800af1e <_strtod_l+0x8e6>
 800ae1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae1e:	0d1b      	lsrs	r3, r3, #20
 800ae20:	051b      	lsls	r3, r3, #20
 800ae22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae26:	d97a      	bls.n	800af1e <_strtod_l+0x8e6>
 800ae28:	696b      	ldr	r3, [r5, #20]
 800ae2a:	b913      	cbnz	r3, 800ae32 <_strtod_l+0x7fa>
 800ae2c:	692b      	ldr	r3, [r5, #16]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	dd75      	ble.n	800af1e <_strtod_l+0x8e6>
 800ae32:	4629      	mov	r1, r5
 800ae34:	2201      	movs	r2, #1
 800ae36:	4620      	mov	r0, r4
 800ae38:	f001 ff38 	bl	800ccac <__lshift>
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4605      	mov	r5, r0
 800ae40:	f001 ffa0 	bl	800cd84 <__mcmp>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	dd6a      	ble.n	800af1e <_strtod_l+0x8e6>
 800ae48:	9904      	ldr	r1, [sp, #16]
 800ae4a:	4a55      	ldr	r2, [pc, #340]	; (800afa0 <_strtod_l+0x968>)
 800ae4c:	465b      	mov	r3, fp
 800ae4e:	2900      	cmp	r1, #0
 800ae50:	f000 8085 	beq.w	800af5e <_strtod_l+0x926>
 800ae54:	ea02 010b 	and.w	r1, r2, fp
 800ae58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae5c:	dc7f      	bgt.n	800af5e <_strtod_l+0x926>
 800ae5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae62:	f77f aeaa 	ble.w	800abba <_strtod_l+0x582>
 800ae66:	4a4f      	ldr	r2, [pc, #316]	; (800afa4 <_strtod_l+0x96c>)
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ae6e:	4650      	mov	r0, sl
 800ae70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ae74:	4659      	mov	r1, fp
 800ae76:	f7f5 fbdf 	bl	8000638 <__aeabi_dmul>
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4303      	orrs	r3, r0
 800ae7e:	bf08      	it	eq
 800ae80:	2322      	moveq	r3, #34	; 0x22
 800ae82:	4682      	mov	sl, r0
 800ae84:	468b      	mov	fp, r1
 800ae86:	bf08      	it	eq
 800ae88:	6023      	streq	r3, [r4, #0]
 800ae8a:	e62b      	b.n	800aae4 <_strtod_l+0x4ac>
 800ae8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae90:	fa02 f303 	lsl.w	r3, r2, r3
 800ae94:	ea03 0a0a 	and.w	sl, r3, sl
 800ae98:	e6de      	b.n	800ac58 <_strtod_l+0x620>
 800ae9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ae9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aea2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aea6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aeaa:	fa01 f308 	lsl.w	r3, r1, r8
 800aeae:	930c      	str	r3, [sp, #48]	; 0x30
 800aeb0:	9111      	str	r1, [sp, #68]	; 0x44
 800aeb2:	e741      	b.n	800ad38 <_strtod_l+0x700>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	930c      	str	r3, [sp, #48]	; 0x30
 800aeb8:	2301      	movs	r3, #1
 800aeba:	9311      	str	r3, [sp, #68]	; 0x44
 800aebc:	e73c      	b.n	800ad38 <_strtod_l+0x700>
 800aebe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aec0:	4642      	mov	r2, r8
 800aec2:	4620      	mov	r0, r4
 800aec4:	f001 fef2 	bl	800ccac <__lshift>
 800aec8:	901e      	str	r0, [sp, #120]	; 0x78
 800aeca:	2800      	cmp	r0, #0
 800aecc:	f47f af66 	bne.w	800ad9c <_strtod_l+0x764>
 800aed0:	e5fe      	b.n	800aad0 <_strtod_l+0x498>
 800aed2:	465f      	mov	r7, fp
 800aed4:	d16e      	bne.n	800afb4 <_strtod_l+0x97c>
 800aed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aedc:	b342      	cbz	r2, 800af30 <_strtod_l+0x8f8>
 800aede:	4a32      	ldr	r2, [pc, #200]	; (800afa8 <_strtod_l+0x970>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d128      	bne.n	800af36 <_strtod_l+0x8fe>
 800aee4:	9b04      	ldr	r3, [sp, #16]
 800aee6:	4650      	mov	r0, sl
 800aee8:	b1eb      	cbz	r3, 800af26 <_strtod_l+0x8ee>
 800aeea:	4a2d      	ldr	r2, [pc, #180]	; (800afa0 <_strtod_l+0x968>)
 800aeec:	403a      	ands	r2, r7
 800aeee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800aef2:	f04f 31ff 	mov.w	r1, #4294967295
 800aef6:	d819      	bhi.n	800af2c <_strtod_l+0x8f4>
 800aef8:	0d12      	lsrs	r2, r2, #20
 800aefa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aefe:	fa01 f303 	lsl.w	r3, r1, r3
 800af02:	4298      	cmp	r0, r3
 800af04:	d117      	bne.n	800af36 <_strtod_l+0x8fe>
 800af06:	4b29      	ldr	r3, [pc, #164]	; (800afac <_strtod_l+0x974>)
 800af08:	429f      	cmp	r7, r3
 800af0a:	d102      	bne.n	800af12 <_strtod_l+0x8da>
 800af0c:	3001      	adds	r0, #1
 800af0e:	f43f addf 	beq.w	800aad0 <_strtod_l+0x498>
 800af12:	4b23      	ldr	r3, [pc, #140]	; (800afa0 <_strtod_l+0x968>)
 800af14:	403b      	ands	r3, r7
 800af16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800af1a:	f04f 0a00 	mov.w	sl, #0
 800af1e:	9b04      	ldr	r3, [sp, #16]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1a0      	bne.n	800ae66 <_strtod_l+0x82e>
 800af24:	e5de      	b.n	800aae4 <_strtod_l+0x4ac>
 800af26:	f04f 33ff 	mov.w	r3, #4294967295
 800af2a:	e7ea      	b.n	800af02 <_strtod_l+0x8ca>
 800af2c:	460b      	mov	r3, r1
 800af2e:	e7e8      	b.n	800af02 <_strtod_l+0x8ca>
 800af30:	ea53 030a 	orrs.w	r3, r3, sl
 800af34:	d088      	beq.n	800ae48 <_strtod_l+0x810>
 800af36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af38:	b1db      	cbz	r3, 800af72 <_strtod_l+0x93a>
 800af3a:	423b      	tst	r3, r7
 800af3c:	d0ef      	beq.n	800af1e <_strtod_l+0x8e6>
 800af3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af40:	9a04      	ldr	r2, [sp, #16]
 800af42:	4650      	mov	r0, sl
 800af44:	4659      	mov	r1, fp
 800af46:	b1c3      	cbz	r3, 800af7a <_strtod_l+0x942>
 800af48:	f7ff fb57 	bl	800a5fa <sulp>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af54:	f7f5 f9ba 	bl	80002cc <__adddf3>
 800af58:	4682      	mov	sl, r0
 800af5a:	468b      	mov	fp, r1
 800af5c:	e7df      	b.n	800af1e <_strtod_l+0x8e6>
 800af5e:	4013      	ands	r3, r2
 800af60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af6c:	f04f 3aff 	mov.w	sl, #4294967295
 800af70:	e7d5      	b.n	800af1e <_strtod_l+0x8e6>
 800af72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af74:	ea13 0f0a 	tst.w	r3, sl
 800af78:	e7e0      	b.n	800af3c <_strtod_l+0x904>
 800af7a:	f7ff fb3e 	bl	800a5fa <sulp>
 800af7e:	4602      	mov	r2, r0
 800af80:	460b      	mov	r3, r1
 800af82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af86:	f7f5 f99f 	bl	80002c8 <__aeabi_dsub>
 800af8a:	2200      	movs	r2, #0
 800af8c:	2300      	movs	r3, #0
 800af8e:	4682      	mov	sl, r0
 800af90:	468b      	mov	fp, r1
 800af92:	f7f5 fdb9 	bl	8000b08 <__aeabi_dcmpeq>
 800af96:	2800      	cmp	r0, #0
 800af98:	d0c1      	beq.n	800af1e <_strtod_l+0x8e6>
 800af9a:	e60e      	b.n	800abba <_strtod_l+0x582>
 800af9c:	fffffc02 	.word	0xfffffc02
 800afa0:	7ff00000 	.word	0x7ff00000
 800afa4:	39500000 	.word	0x39500000
 800afa8:	000fffff 	.word	0x000fffff
 800afac:	7fefffff 	.word	0x7fefffff
 800afb0:	0800e998 	.word	0x0800e998
 800afb4:	4631      	mov	r1, r6
 800afb6:	4628      	mov	r0, r5
 800afb8:	f002 f860 	bl	800d07c <__ratio>
 800afbc:	ec59 8b10 	vmov	r8, r9, d0
 800afc0:	ee10 0a10 	vmov	r0, s0
 800afc4:	2200      	movs	r2, #0
 800afc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afca:	4649      	mov	r1, r9
 800afcc:	f7f5 fdb0 	bl	8000b30 <__aeabi_dcmple>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d07c      	beq.n	800b0ce <_strtod_l+0xa96>
 800afd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d04c      	beq.n	800b074 <_strtod_l+0xa3c>
 800afda:	4b95      	ldr	r3, [pc, #596]	; (800b230 <_strtod_l+0xbf8>)
 800afdc:	2200      	movs	r2, #0
 800afde:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800afe2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b230 <_strtod_l+0xbf8>
 800afe6:	f04f 0800 	mov.w	r8, #0
 800afea:	4b92      	ldr	r3, [pc, #584]	; (800b234 <_strtod_l+0xbfc>)
 800afec:	403b      	ands	r3, r7
 800afee:	9311      	str	r3, [sp, #68]	; 0x44
 800aff0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aff2:	4b91      	ldr	r3, [pc, #580]	; (800b238 <_strtod_l+0xc00>)
 800aff4:	429a      	cmp	r2, r3
 800aff6:	f040 80b2 	bne.w	800b15e <_strtod_l+0xb26>
 800affa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800affe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b002:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b006:	ec4b ab10 	vmov	d0, sl, fp
 800b00a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b00e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b012:	f001 ff5b 	bl	800cecc <__ulp>
 800b016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b01a:	ec53 2b10 	vmov	r2, r3, d0
 800b01e:	f7f5 fb0b 	bl	8000638 <__aeabi_dmul>
 800b022:	4652      	mov	r2, sl
 800b024:	465b      	mov	r3, fp
 800b026:	f7f5 f951 	bl	80002cc <__adddf3>
 800b02a:	460b      	mov	r3, r1
 800b02c:	4981      	ldr	r1, [pc, #516]	; (800b234 <_strtod_l+0xbfc>)
 800b02e:	4a83      	ldr	r2, [pc, #524]	; (800b23c <_strtod_l+0xc04>)
 800b030:	4019      	ands	r1, r3
 800b032:	4291      	cmp	r1, r2
 800b034:	4682      	mov	sl, r0
 800b036:	d95e      	bls.n	800b0f6 <_strtod_l+0xabe>
 800b038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b03a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b03e:	4293      	cmp	r3, r2
 800b040:	d103      	bne.n	800b04a <_strtod_l+0xa12>
 800b042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b044:	3301      	adds	r3, #1
 800b046:	f43f ad43 	beq.w	800aad0 <_strtod_l+0x498>
 800b04a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b248 <_strtod_l+0xc10>
 800b04e:	f04f 3aff 	mov.w	sl, #4294967295
 800b052:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b054:	4620      	mov	r0, r4
 800b056:	f001 fc0d 	bl	800c874 <_Bfree>
 800b05a:	9907      	ldr	r1, [sp, #28]
 800b05c:	4620      	mov	r0, r4
 800b05e:	f001 fc09 	bl	800c874 <_Bfree>
 800b062:	4631      	mov	r1, r6
 800b064:	4620      	mov	r0, r4
 800b066:	f001 fc05 	bl	800c874 <_Bfree>
 800b06a:	4629      	mov	r1, r5
 800b06c:	4620      	mov	r0, r4
 800b06e:	f001 fc01 	bl	800c874 <_Bfree>
 800b072:	e613      	b.n	800ac9c <_strtod_l+0x664>
 800b074:	f1ba 0f00 	cmp.w	sl, #0
 800b078:	d11b      	bne.n	800b0b2 <_strtod_l+0xa7a>
 800b07a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b07e:	b9f3      	cbnz	r3, 800b0be <_strtod_l+0xa86>
 800b080:	4b6b      	ldr	r3, [pc, #428]	; (800b230 <_strtod_l+0xbf8>)
 800b082:	2200      	movs	r2, #0
 800b084:	4640      	mov	r0, r8
 800b086:	4649      	mov	r1, r9
 800b088:	f7f5 fd48 	bl	8000b1c <__aeabi_dcmplt>
 800b08c:	b9d0      	cbnz	r0, 800b0c4 <_strtod_l+0xa8c>
 800b08e:	4640      	mov	r0, r8
 800b090:	4649      	mov	r1, r9
 800b092:	4b6b      	ldr	r3, [pc, #428]	; (800b240 <_strtod_l+0xc08>)
 800b094:	2200      	movs	r2, #0
 800b096:	f7f5 facf 	bl	8000638 <__aeabi_dmul>
 800b09a:	4680      	mov	r8, r0
 800b09c:	4689      	mov	r9, r1
 800b09e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b0a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b0ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b0b0:	e79b      	b.n	800afea <_strtod_l+0x9b2>
 800b0b2:	f1ba 0f01 	cmp.w	sl, #1
 800b0b6:	d102      	bne.n	800b0be <_strtod_l+0xa86>
 800b0b8:	2f00      	cmp	r7, #0
 800b0ba:	f43f ad7e 	beq.w	800abba <_strtod_l+0x582>
 800b0be:	4b61      	ldr	r3, [pc, #388]	; (800b244 <_strtod_l+0xc0c>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	e78c      	b.n	800afde <_strtod_l+0x9a6>
 800b0c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b240 <_strtod_l+0xc08>
 800b0c8:	f04f 0800 	mov.w	r8, #0
 800b0cc:	e7e7      	b.n	800b09e <_strtod_l+0xa66>
 800b0ce:	4b5c      	ldr	r3, [pc, #368]	; (800b240 <_strtod_l+0xc08>)
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f7f5 faaf 	bl	8000638 <__aeabi_dmul>
 800b0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0dc:	4680      	mov	r8, r0
 800b0de:	4689      	mov	r9, r1
 800b0e0:	b933      	cbnz	r3, 800b0f0 <_strtod_l+0xab8>
 800b0e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0e6:	9012      	str	r0, [sp, #72]	; 0x48
 800b0e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b0ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b0ee:	e7dd      	b.n	800b0ac <_strtod_l+0xa74>
 800b0f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b0f4:	e7f9      	b.n	800b0ea <_strtod_l+0xab2>
 800b0f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b0fa:	9b04      	ldr	r3, [sp, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1a8      	bne.n	800b052 <_strtod_l+0xa1a>
 800b100:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b104:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b106:	0d1b      	lsrs	r3, r3, #20
 800b108:	051b      	lsls	r3, r3, #20
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d1a1      	bne.n	800b052 <_strtod_l+0xa1a>
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 fdf1 	bl	8000cf8 <__aeabi_d2lz>
 800b116:	f7f5 fa61 	bl	80005dc <__aeabi_l2d>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4640      	mov	r0, r8
 800b120:	4649      	mov	r1, r9
 800b122:	f7f5 f8d1 	bl	80002c8 <__aeabi_dsub>
 800b126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b128:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b12c:	ea43 030a 	orr.w	r3, r3, sl
 800b130:	4313      	orrs	r3, r2
 800b132:	4680      	mov	r8, r0
 800b134:	4689      	mov	r9, r1
 800b136:	d053      	beq.n	800b1e0 <_strtod_l+0xba8>
 800b138:	a335      	add	r3, pc, #212	; (adr r3, 800b210 <_strtod_l+0xbd8>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 fced 	bl	8000b1c <__aeabi_dcmplt>
 800b142:	2800      	cmp	r0, #0
 800b144:	f47f acce 	bne.w	800aae4 <_strtod_l+0x4ac>
 800b148:	a333      	add	r3, pc, #204	; (adr r3, 800b218 <_strtod_l+0xbe0>)
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	4640      	mov	r0, r8
 800b150:	4649      	mov	r1, r9
 800b152:	f7f5 fd01 	bl	8000b58 <__aeabi_dcmpgt>
 800b156:	2800      	cmp	r0, #0
 800b158:	f43f af7b 	beq.w	800b052 <_strtod_l+0xa1a>
 800b15c:	e4c2      	b.n	800aae4 <_strtod_l+0x4ac>
 800b15e:	9b04      	ldr	r3, [sp, #16]
 800b160:	b333      	cbz	r3, 800b1b0 <_strtod_l+0xb78>
 800b162:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b164:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b168:	d822      	bhi.n	800b1b0 <_strtod_l+0xb78>
 800b16a:	a32d      	add	r3, pc, #180	; (adr r3, 800b220 <_strtod_l+0xbe8>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	4640      	mov	r0, r8
 800b172:	4649      	mov	r1, r9
 800b174:	f7f5 fcdc 	bl	8000b30 <__aeabi_dcmple>
 800b178:	b1a0      	cbz	r0, 800b1a4 <_strtod_l+0xb6c>
 800b17a:	4649      	mov	r1, r9
 800b17c:	4640      	mov	r0, r8
 800b17e:	f7f5 fd33 	bl	8000be8 <__aeabi_d2uiz>
 800b182:	2801      	cmp	r0, #1
 800b184:	bf38      	it	cc
 800b186:	2001      	movcc	r0, #1
 800b188:	f7f5 f9dc 	bl	8000544 <__aeabi_ui2d>
 800b18c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b18e:	4680      	mov	r8, r0
 800b190:	4689      	mov	r9, r1
 800b192:	bb13      	cbnz	r3, 800b1da <_strtod_l+0xba2>
 800b194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b198:	9014      	str	r0, [sp, #80]	; 0x50
 800b19a:	9315      	str	r3, [sp, #84]	; 0x54
 800b19c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b1a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b1ac:	1a9b      	subs	r3, r3, r2
 800b1ae:	930d      	str	r3, [sp, #52]	; 0x34
 800b1b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b1b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b1bc:	f001 fe86 	bl	800cecc <__ulp>
 800b1c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1c4:	ec53 2b10 	vmov	r2, r3, d0
 800b1c8:	f7f5 fa36 	bl	8000638 <__aeabi_dmul>
 800b1cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b1d0:	f7f5 f87c 	bl	80002cc <__adddf3>
 800b1d4:	4682      	mov	sl, r0
 800b1d6:	468b      	mov	fp, r1
 800b1d8:	e78f      	b.n	800b0fa <_strtod_l+0xac2>
 800b1da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b1de:	e7dd      	b.n	800b19c <_strtod_l+0xb64>
 800b1e0:	a311      	add	r3, pc, #68	; (adr r3, 800b228 <_strtod_l+0xbf0>)
 800b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e6:	f7f5 fc99 	bl	8000b1c <__aeabi_dcmplt>
 800b1ea:	e7b4      	b.n	800b156 <_strtod_l+0xb1e>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	930e      	str	r3, [sp, #56]	; 0x38
 800b1f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b1f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	f7ff ba65 	b.w	800a6c4 <_strtod_l+0x8c>
 800b1fa:	2b65      	cmp	r3, #101	; 0x65
 800b1fc:	f43f ab5d 	beq.w	800a8ba <_strtod_l+0x282>
 800b200:	2b45      	cmp	r3, #69	; 0x45
 800b202:	f43f ab5a 	beq.w	800a8ba <_strtod_l+0x282>
 800b206:	2201      	movs	r2, #1
 800b208:	f7ff bb92 	b.w	800a930 <_strtod_l+0x2f8>
 800b20c:	f3af 8000 	nop.w
 800b210:	94a03595 	.word	0x94a03595
 800b214:	3fdfffff 	.word	0x3fdfffff
 800b218:	35afe535 	.word	0x35afe535
 800b21c:	3fe00000 	.word	0x3fe00000
 800b220:	ffc00000 	.word	0xffc00000
 800b224:	41dfffff 	.word	0x41dfffff
 800b228:	94a03595 	.word	0x94a03595
 800b22c:	3fcfffff 	.word	0x3fcfffff
 800b230:	3ff00000 	.word	0x3ff00000
 800b234:	7ff00000 	.word	0x7ff00000
 800b238:	7fe00000 	.word	0x7fe00000
 800b23c:	7c9fffff 	.word	0x7c9fffff
 800b240:	3fe00000 	.word	0x3fe00000
 800b244:	bff00000 	.word	0xbff00000
 800b248:	7fefffff 	.word	0x7fefffff

0800b24c <_strtod_r>:
 800b24c:	4b01      	ldr	r3, [pc, #4]	; (800b254 <_strtod_r+0x8>)
 800b24e:	f7ff b9f3 	b.w	800a638 <_strtod_l>
 800b252:	bf00      	nop
 800b254:	200000d8 	.word	0x200000d8

0800b258 <_strtol_l.isra.0>:
 800b258:	2b01      	cmp	r3, #1
 800b25a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b25e:	d001      	beq.n	800b264 <_strtol_l.isra.0+0xc>
 800b260:	2b24      	cmp	r3, #36	; 0x24
 800b262:	d906      	bls.n	800b272 <_strtol_l.isra.0+0x1a>
 800b264:	f7fe fa86 	bl	8009774 <__errno>
 800b268:	2316      	movs	r3, #22
 800b26a:	6003      	str	r3, [r0, #0]
 800b26c:	2000      	movs	r0, #0
 800b26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b272:	4f3a      	ldr	r7, [pc, #232]	; (800b35c <_strtol_l.isra.0+0x104>)
 800b274:	468e      	mov	lr, r1
 800b276:	4676      	mov	r6, lr
 800b278:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b27c:	5de5      	ldrb	r5, [r4, r7]
 800b27e:	f015 0508 	ands.w	r5, r5, #8
 800b282:	d1f8      	bne.n	800b276 <_strtol_l.isra.0+0x1e>
 800b284:	2c2d      	cmp	r4, #45	; 0x2d
 800b286:	d134      	bne.n	800b2f2 <_strtol_l.isra.0+0x9a>
 800b288:	f89e 4000 	ldrb.w	r4, [lr]
 800b28c:	f04f 0801 	mov.w	r8, #1
 800b290:	f106 0e02 	add.w	lr, r6, #2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d05c      	beq.n	800b352 <_strtol_l.isra.0+0xfa>
 800b298:	2b10      	cmp	r3, #16
 800b29a:	d10c      	bne.n	800b2b6 <_strtol_l.isra.0+0x5e>
 800b29c:	2c30      	cmp	r4, #48	; 0x30
 800b29e:	d10a      	bne.n	800b2b6 <_strtol_l.isra.0+0x5e>
 800b2a0:	f89e 4000 	ldrb.w	r4, [lr]
 800b2a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2a8:	2c58      	cmp	r4, #88	; 0x58
 800b2aa:	d14d      	bne.n	800b348 <_strtol_l.isra.0+0xf0>
 800b2ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b2b0:	2310      	movs	r3, #16
 800b2b2:	f10e 0e02 	add.w	lr, lr, #2
 800b2b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b2ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b2be:	2600      	movs	r6, #0
 800b2c0:	fbbc f9f3 	udiv	r9, ip, r3
 800b2c4:	4635      	mov	r5, r6
 800b2c6:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b2ce:	2f09      	cmp	r7, #9
 800b2d0:	d818      	bhi.n	800b304 <_strtol_l.isra.0+0xac>
 800b2d2:	463c      	mov	r4, r7
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	dd24      	ble.n	800b322 <_strtol_l.isra.0+0xca>
 800b2d8:	2e00      	cmp	r6, #0
 800b2da:	db1f      	blt.n	800b31c <_strtol_l.isra.0+0xc4>
 800b2dc:	45a9      	cmp	r9, r5
 800b2de:	d31d      	bcc.n	800b31c <_strtol_l.isra.0+0xc4>
 800b2e0:	d101      	bne.n	800b2e6 <_strtol_l.isra.0+0x8e>
 800b2e2:	45a2      	cmp	sl, r4
 800b2e4:	db1a      	blt.n	800b31c <_strtol_l.isra.0+0xc4>
 800b2e6:	fb05 4503 	mla	r5, r5, r3, r4
 800b2ea:	2601      	movs	r6, #1
 800b2ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b2f0:	e7eb      	b.n	800b2ca <_strtol_l.isra.0+0x72>
 800b2f2:	2c2b      	cmp	r4, #43	; 0x2b
 800b2f4:	bf08      	it	eq
 800b2f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b2fa:	46a8      	mov	r8, r5
 800b2fc:	bf08      	it	eq
 800b2fe:	f106 0e02 	addeq.w	lr, r6, #2
 800b302:	e7c7      	b.n	800b294 <_strtol_l.isra.0+0x3c>
 800b304:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b308:	2f19      	cmp	r7, #25
 800b30a:	d801      	bhi.n	800b310 <_strtol_l.isra.0+0xb8>
 800b30c:	3c37      	subs	r4, #55	; 0x37
 800b30e:	e7e1      	b.n	800b2d4 <_strtol_l.isra.0+0x7c>
 800b310:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b314:	2f19      	cmp	r7, #25
 800b316:	d804      	bhi.n	800b322 <_strtol_l.isra.0+0xca>
 800b318:	3c57      	subs	r4, #87	; 0x57
 800b31a:	e7db      	b.n	800b2d4 <_strtol_l.isra.0+0x7c>
 800b31c:	f04f 36ff 	mov.w	r6, #4294967295
 800b320:	e7e4      	b.n	800b2ec <_strtol_l.isra.0+0x94>
 800b322:	2e00      	cmp	r6, #0
 800b324:	da05      	bge.n	800b332 <_strtol_l.isra.0+0xda>
 800b326:	2322      	movs	r3, #34	; 0x22
 800b328:	6003      	str	r3, [r0, #0]
 800b32a:	4665      	mov	r5, ip
 800b32c:	b942      	cbnz	r2, 800b340 <_strtol_l.isra.0+0xe8>
 800b32e:	4628      	mov	r0, r5
 800b330:	e79d      	b.n	800b26e <_strtol_l.isra.0+0x16>
 800b332:	f1b8 0f00 	cmp.w	r8, #0
 800b336:	d000      	beq.n	800b33a <_strtol_l.isra.0+0xe2>
 800b338:	426d      	negs	r5, r5
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	d0f7      	beq.n	800b32e <_strtol_l.isra.0+0xd6>
 800b33e:	b10e      	cbz	r6, 800b344 <_strtol_l.isra.0+0xec>
 800b340:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b344:	6011      	str	r1, [r2, #0]
 800b346:	e7f2      	b.n	800b32e <_strtol_l.isra.0+0xd6>
 800b348:	2430      	movs	r4, #48	; 0x30
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1b3      	bne.n	800b2b6 <_strtol_l.isra.0+0x5e>
 800b34e:	2308      	movs	r3, #8
 800b350:	e7b1      	b.n	800b2b6 <_strtol_l.isra.0+0x5e>
 800b352:	2c30      	cmp	r4, #48	; 0x30
 800b354:	d0a4      	beq.n	800b2a0 <_strtol_l.isra.0+0x48>
 800b356:	230a      	movs	r3, #10
 800b358:	e7ad      	b.n	800b2b6 <_strtol_l.isra.0+0x5e>
 800b35a:	bf00      	nop
 800b35c:	0800e9c1 	.word	0x0800e9c1

0800b360 <_strtol_r>:
 800b360:	f7ff bf7a 	b.w	800b258 <_strtol_l.isra.0>

0800b364 <_write_r>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	4d07      	ldr	r5, [pc, #28]	; (800b384 <_write_r+0x20>)
 800b368:	4604      	mov	r4, r0
 800b36a:	4608      	mov	r0, r1
 800b36c:	4611      	mov	r1, r2
 800b36e:	2200      	movs	r2, #0
 800b370:	602a      	str	r2, [r5, #0]
 800b372:	461a      	mov	r2, r3
 800b374:	f7f6 ffa3 	bl	80022be <_write>
 800b378:	1c43      	adds	r3, r0, #1
 800b37a:	d102      	bne.n	800b382 <_write_r+0x1e>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	b103      	cbz	r3, 800b382 <_write_r+0x1e>
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	2000064c 	.word	0x2000064c

0800b388 <_close_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d06      	ldr	r5, [pc, #24]	; (800b3a4 <_close_r+0x1c>)
 800b38c:	2300      	movs	r3, #0
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	f7f6 ffaf 	bl	80022f6 <_close>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_close_r+0x1a>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_close_r+0x1a>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	2000064c 	.word	0x2000064c

0800b3a8 <quorem>:
 800b3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	6903      	ldr	r3, [r0, #16]
 800b3ae:	690c      	ldr	r4, [r1, #16]
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	f2c0 8081 	blt.w	800b4ba <quorem+0x112>
 800b3b8:	3c01      	subs	r4, #1
 800b3ba:	f101 0814 	add.w	r8, r1, #20
 800b3be:	f100 0514 	add.w	r5, r0, #20
 800b3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3e0:	d331      	bcc.n	800b446 <quorem+0x9e>
 800b3e2:	f04f 0e00 	mov.w	lr, #0
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	46ac      	mov	ip, r5
 800b3ea:	46f2      	mov	sl, lr
 800b3ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3f0:	b293      	uxth	r3, r2
 800b3f2:	fb06 e303 	mla	r3, r6, r3, lr
 800b3f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	ebaa 0303 	sub.w	r3, sl, r3
 800b400:	0c12      	lsrs	r2, r2, #16
 800b402:	f8dc a000 	ldr.w	sl, [ip]
 800b406:	fb06 e202 	mla	r2, r6, r2, lr
 800b40a:	fa13 f38a 	uxtah	r3, r3, sl
 800b40e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b412:	fa1f fa82 	uxth.w	sl, r2
 800b416:	f8dc 2000 	ldr.w	r2, [ip]
 800b41a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b41e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b422:	b29b      	uxth	r3, r3
 800b424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b428:	4581      	cmp	r9, r0
 800b42a:	f84c 3b04 	str.w	r3, [ip], #4
 800b42e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b432:	d2db      	bcs.n	800b3ec <quorem+0x44>
 800b434:	f855 300b 	ldr.w	r3, [r5, fp]
 800b438:	b92b      	cbnz	r3, 800b446 <quorem+0x9e>
 800b43a:	9b01      	ldr	r3, [sp, #4]
 800b43c:	3b04      	subs	r3, #4
 800b43e:	429d      	cmp	r5, r3
 800b440:	461a      	mov	r2, r3
 800b442:	d32e      	bcc.n	800b4a2 <quorem+0xfa>
 800b444:	613c      	str	r4, [r7, #16]
 800b446:	4638      	mov	r0, r7
 800b448:	f001 fc9c 	bl	800cd84 <__mcmp>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	db24      	blt.n	800b49a <quorem+0xf2>
 800b450:	3601      	adds	r6, #1
 800b452:	4628      	mov	r0, r5
 800b454:	f04f 0c00 	mov.w	ip, #0
 800b458:	f858 2b04 	ldr.w	r2, [r8], #4
 800b45c:	f8d0 e000 	ldr.w	lr, [r0]
 800b460:	b293      	uxth	r3, r2
 800b462:	ebac 0303 	sub.w	r3, ip, r3
 800b466:	0c12      	lsrs	r2, r2, #16
 800b468:	fa13 f38e 	uxtah	r3, r3, lr
 800b46c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b474:	b29b      	uxth	r3, r3
 800b476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b47a:	45c1      	cmp	r9, r8
 800b47c:	f840 3b04 	str.w	r3, [r0], #4
 800b480:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b484:	d2e8      	bcs.n	800b458 <quorem+0xb0>
 800b486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b48e:	b922      	cbnz	r2, 800b49a <quorem+0xf2>
 800b490:	3b04      	subs	r3, #4
 800b492:	429d      	cmp	r5, r3
 800b494:	461a      	mov	r2, r3
 800b496:	d30a      	bcc.n	800b4ae <quorem+0x106>
 800b498:	613c      	str	r4, [r7, #16]
 800b49a:	4630      	mov	r0, r6
 800b49c:	b003      	add	sp, #12
 800b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a2:	6812      	ldr	r2, [r2, #0]
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	d1cc      	bne.n	800b444 <quorem+0x9c>
 800b4aa:	3c01      	subs	r4, #1
 800b4ac:	e7c7      	b.n	800b43e <quorem+0x96>
 800b4ae:	6812      	ldr	r2, [r2, #0]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	d1f0      	bne.n	800b498 <quorem+0xf0>
 800b4b6:	3c01      	subs	r4, #1
 800b4b8:	e7eb      	b.n	800b492 <quorem+0xea>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e7ee      	b.n	800b49c <quorem+0xf4>
	...

0800b4c0 <_dtoa_r>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	ed2d 8b02 	vpush	{d8}
 800b4c8:	ec57 6b10 	vmov	r6, r7, d0
 800b4cc:	b095      	sub	sp, #84	; 0x54
 800b4ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4d4:	9105      	str	r1, [sp, #20]
 800b4d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b4da:	4604      	mov	r4, r0
 800b4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b4de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4e0:	b975      	cbnz	r5, 800b500 <_dtoa_r+0x40>
 800b4e2:	2010      	movs	r0, #16
 800b4e4:	f001 f95e 	bl	800c7a4 <malloc>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	6260      	str	r0, [r4, #36]	; 0x24
 800b4ec:	b920      	cbnz	r0, 800b4f8 <_dtoa_r+0x38>
 800b4ee:	4bb2      	ldr	r3, [pc, #712]	; (800b7b8 <_dtoa_r+0x2f8>)
 800b4f0:	21ea      	movs	r1, #234	; 0xea
 800b4f2:	48b2      	ldr	r0, [pc, #712]	; (800b7bc <_dtoa_r+0x2fc>)
 800b4f4:	f002 fcaa 	bl	800de4c <__assert_func>
 800b4f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4fc:	6005      	str	r5, [r0, #0]
 800b4fe:	60c5      	str	r5, [r0, #12]
 800b500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b502:	6819      	ldr	r1, [r3, #0]
 800b504:	b151      	cbz	r1, 800b51c <_dtoa_r+0x5c>
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	604a      	str	r2, [r1, #4]
 800b50a:	2301      	movs	r3, #1
 800b50c:	4093      	lsls	r3, r2
 800b50e:	608b      	str	r3, [r1, #8]
 800b510:	4620      	mov	r0, r4
 800b512:	f001 f9af 	bl	800c874 <_Bfree>
 800b516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b518:	2200      	movs	r2, #0
 800b51a:	601a      	str	r2, [r3, #0]
 800b51c:	1e3b      	subs	r3, r7, #0
 800b51e:	bfb9      	ittee	lt
 800b520:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b524:	9303      	strlt	r3, [sp, #12]
 800b526:	2300      	movge	r3, #0
 800b528:	f8c8 3000 	strge.w	r3, [r8]
 800b52c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b530:	4ba3      	ldr	r3, [pc, #652]	; (800b7c0 <_dtoa_r+0x300>)
 800b532:	bfbc      	itt	lt
 800b534:	2201      	movlt	r2, #1
 800b536:	f8c8 2000 	strlt.w	r2, [r8]
 800b53a:	ea33 0309 	bics.w	r3, r3, r9
 800b53e:	d11b      	bne.n	800b578 <_dtoa_r+0xb8>
 800b540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b542:	f242 730f 	movw	r3, #9999	; 0x270f
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b54c:	4333      	orrs	r3, r6
 800b54e:	f000 857a 	beq.w	800c046 <_dtoa_r+0xb86>
 800b552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b554:	b963      	cbnz	r3, 800b570 <_dtoa_r+0xb0>
 800b556:	4b9b      	ldr	r3, [pc, #620]	; (800b7c4 <_dtoa_r+0x304>)
 800b558:	e024      	b.n	800b5a4 <_dtoa_r+0xe4>
 800b55a:	4b9b      	ldr	r3, [pc, #620]	; (800b7c8 <_dtoa_r+0x308>)
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	3308      	adds	r3, #8
 800b560:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	9800      	ldr	r0, [sp, #0]
 800b566:	b015      	add	sp, #84	; 0x54
 800b568:	ecbd 8b02 	vpop	{d8}
 800b56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b570:	4b94      	ldr	r3, [pc, #592]	; (800b7c4 <_dtoa_r+0x304>)
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	3303      	adds	r3, #3
 800b576:	e7f3      	b.n	800b560 <_dtoa_r+0xa0>
 800b578:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b57c:	2200      	movs	r2, #0
 800b57e:	ec51 0b17 	vmov	r0, r1, d7
 800b582:	2300      	movs	r3, #0
 800b584:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b588:	f7f5 fabe 	bl	8000b08 <__aeabi_dcmpeq>
 800b58c:	4680      	mov	r8, r0
 800b58e:	b158      	cbz	r0, 800b5a8 <_dtoa_r+0xe8>
 800b590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b592:	2301      	movs	r3, #1
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 8551 	beq.w	800c040 <_dtoa_r+0xb80>
 800b59e:	488b      	ldr	r0, [pc, #556]	; (800b7cc <_dtoa_r+0x30c>)
 800b5a0:	6018      	str	r0, [r3, #0]
 800b5a2:	1e43      	subs	r3, r0, #1
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	e7dd      	b.n	800b564 <_dtoa_r+0xa4>
 800b5a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b5ac:	aa12      	add	r2, sp, #72	; 0x48
 800b5ae:	a913      	add	r1, sp, #76	; 0x4c
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f001 fd07 	bl	800cfc4 <__d2b>
 800b5b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5ba:	4683      	mov	fp, r0
 800b5bc:	2d00      	cmp	r5, #0
 800b5be:	d07c      	beq.n	800b6ba <_dtoa_r+0x1fa>
 800b5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b5c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b5ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b5d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b5d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5da:	4b7d      	ldr	r3, [pc, #500]	; (800b7d0 <_dtoa_r+0x310>)
 800b5dc:	2200      	movs	r2, #0
 800b5de:	4630      	mov	r0, r6
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	f7f4 fe71 	bl	80002c8 <__aeabi_dsub>
 800b5e6:	a36e      	add	r3, pc, #440	; (adr r3, 800b7a0 <_dtoa_r+0x2e0>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f7f5 f824 	bl	8000638 <__aeabi_dmul>
 800b5f0:	a36d      	add	r3, pc, #436	; (adr r3, 800b7a8 <_dtoa_r+0x2e8>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	f7f4 fe69 	bl	80002cc <__adddf3>
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	460f      	mov	r7, r1
 800b600:	f7f4 ffb0 	bl	8000564 <__aeabi_i2d>
 800b604:	a36a      	add	r3, pc, #424	; (adr r3, 800b7b0 <_dtoa_r+0x2f0>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f5 f815 	bl	8000638 <__aeabi_dmul>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	f7f4 fe59 	bl	80002cc <__adddf3>
 800b61a:	4606      	mov	r6, r0
 800b61c:	460f      	mov	r7, r1
 800b61e:	f7f5 fabb 	bl	8000b98 <__aeabi_d2iz>
 800b622:	2200      	movs	r2, #0
 800b624:	4682      	mov	sl, r0
 800b626:	2300      	movs	r3, #0
 800b628:	4630      	mov	r0, r6
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f5 fa76 	bl	8000b1c <__aeabi_dcmplt>
 800b630:	b148      	cbz	r0, 800b646 <_dtoa_r+0x186>
 800b632:	4650      	mov	r0, sl
 800b634:	f7f4 ff96 	bl	8000564 <__aeabi_i2d>
 800b638:	4632      	mov	r2, r6
 800b63a:	463b      	mov	r3, r7
 800b63c:	f7f5 fa64 	bl	8000b08 <__aeabi_dcmpeq>
 800b640:	b908      	cbnz	r0, 800b646 <_dtoa_r+0x186>
 800b642:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b646:	f1ba 0f16 	cmp.w	sl, #22
 800b64a:	d854      	bhi.n	800b6f6 <_dtoa_r+0x236>
 800b64c:	4b61      	ldr	r3, [pc, #388]	; (800b7d4 <_dtoa_r+0x314>)
 800b64e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b65a:	f7f5 fa5f 	bl	8000b1c <__aeabi_dcmplt>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d04b      	beq.n	800b6fa <_dtoa_r+0x23a>
 800b662:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b666:	2300      	movs	r3, #0
 800b668:	930e      	str	r3, [sp, #56]	; 0x38
 800b66a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b66c:	1b5d      	subs	r5, r3, r5
 800b66e:	1e6b      	subs	r3, r5, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	bf43      	ittte	mi
 800b674:	2300      	movmi	r3, #0
 800b676:	f1c5 0801 	rsbmi	r8, r5, #1
 800b67a:	9304      	strmi	r3, [sp, #16]
 800b67c:	f04f 0800 	movpl.w	r8, #0
 800b680:	f1ba 0f00 	cmp.w	sl, #0
 800b684:	db3b      	blt.n	800b6fe <_dtoa_r+0x23e>
 800b686:	9b04      	ldr	r3, [sp, #16]
 800b688:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b68c:	4453      	add	r3, sl
 800b68e:	9304      	str	r3, [sp, #16]
 800b690:	2300      	movs	r3, #0
 800b692:	9306      	str	r3, [sp, #24]
 800b694:	9b05      	ldr	r3, [sp, #20]
 800b696:	2b09      	cmp	r3, #9
 800b698:	d869      	bhi.n	800b76e <_dtoa_r+0x2ae>
 800b69a:	2b05      	cmp	r3, #5
 800b69c:	bfc4      	itt	gt
 800b69e:	3b04      	subgt	r3, #4
 800b6a0:	9305      	strgt	r3, [sp, #20]
 800b6a2:	9b05      	ldr	r3, [sp, #20]
 800b6a4:	f1a3 0302 	sub.w	r3, r3, #2
 800b6a8:	bfcc      	ite	gt
 800b6aa:	2500      	movgt	r5, #0
 800b6ac:	2501      	movle	r5, #1
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d869      	bhi.n	800b786 <_dtoa_r+0x2c6>
 800b6b2:	e8df f003 	tbb	[pc, r3]
 800b6b6:	4e2c      	.short	0x4e2c
 800b6b8:	5a4c      	.short	0x5a4c
 800b6ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b6be:	441d      	add	r5, r3
 800b6c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	bfc1      	itttt	gt
 800b6c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b6d0:	fa09 f303 	lslgt.w	r3, r9, r3
 800b6d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6d8:	bfda      	itte	le
 800b6da:	f1c3 0320 	rsble	r3, r3, #32
 800b6de:	fa06 f003 	lslle.w	r0, r6, r3
 800b6e2:	4318      	orrgt	r0, r3
 800b6e4:	f7f4 ff2e 	bl	8000544 <__aeabi_ui2d>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b6f0:	3d01      	subs	r5, #1
 800b6f2:	9310      	str	r3, [sp, #64]	; 0x40
 800b6f4:	e771      	b.n	800b5da <_dtoa_r+0x11a>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e7b6      	b.n	800b668 <_dtoa_r+0x1a8>
 800b6fa:	900e      	str	r0, [sp, #56]	; 0x38
 800b6fc:	e7b5      	b.n	800b66a <_dtoa_r+0x1aa>
 800b6fe:	f1ca 0300 	rsb	r3, sl, #0
 800b702:	9306      	str	r3, [sp, #24]
 800b704:	2300      	movs	r3, #0
 800b706:	eba8 080a 	sub.w	r8, r8, sl
 800b70a:	930d      	str	r3, [sp, #52]	; 0x34
 800b70c:	e7c2      	b.n	800b694 <_dtoa_r+0x1d4>
 800b70e:	2300      	movs	r3, #0
 800b710:	9308      	str	r3, [sp, #32]
 800b712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	dc39      	bgt.n	800b78c <_dtoa_r+0x2cc>
 800b718:	f04f 0901 	mov.w	r9, #1
 800b71c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b720:	464b      	mov	r3, r9
 800b722:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b726:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b728:	2200      	movs	r2, #0
 800b72a:	6042      	str	r2, [r0, #4]
 800b72c:	2204      	movs	r2, #4
 800b72e:	f102 0614 	add.w	r6, r2, #20
 800b732:	429e      	cmp	r6, r3
 800b734:	6841      	ldr	r1, [r0, #4]
 800b736:	d92f      	bls.n	800b798 <_dtoa_r+0x2d8>
 800b738:	4620      	mov	r0, r4
 800b73a:	f001 f85b 	bl	800c7f4 <_Balloc>
 800b73e:	9000      	str	r0, [sp, #0]
 800b740:	2800      	cmp	r0, #0
 800b742:	d14b      	bne.n	800b7dc <_dtoa_r+0x31c>
 800b744:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <_dtoa_r+0x318>)
 800b746:	4602      	mov	r2, r0
 800b748:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b74c:	e6d1      	b.n	800b4f2 <_dtoa_r+0x32>
 800b74e:	2301      	movs	r3, #1
 800b750:	e7de      	b.n	800b710 <_dtoa_r+0x250>
 800b752:	2300      	movs	r3, #0
 800b754:	9308      	str	r3, [sp, #32]
 800b756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b758:	eb0a 0903 	add.w	r9, sl, r3
 800b75c:	f109 0301 	add.w	r3, r9, #1
 800b760:	2b01      	cmp	r3, #1
 800b762:	9301      	str	r3, [sp, #4]
 800b764:	bfb8      	it	lt
 800b766:	2301      	movlt	r3, #1
 800b768:	e7dd      	b.n	800b726 <_dtoa_r+0x266>
 800b76a:	2301      	movs	r3, #1
 800b76c:	e7f2      	b.n	800b754 <_dtoa_r+0x294>
 800b76e:	2501      	movs	r5, #1
 800b770:	2300      	movs	r3, #0
 800b772:	9305      	str	r3, [sp, #20]
 800b774:	9508      	str	r5, [sp, #32]
 800b776:	f04f 39ff 	mov.w	r9, #4294967295
 800b77a:	2200      	movs	r2, #0
 800b77c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b780:	2312      	movs	r3, #18
 800b782:	9209      	str	r2, [sp, #36]	; 0x24
 800b784:	e7cf      	b.n	800b726 <_dtoa_r+0x266>
 800b786:	2301      	movs	r3, #1
 800b788:	9308      	str	r3, [sp, #32]
 800b78a:	e7f4      	b.n	800b776 <_dtoa_r+0x2b6>
 800b78c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b790:	f8cd 9004 	str.w	r9, [sp, #4]
 800b794:	464b      	mov	r3, r9
 800b796:	e7c6      	b.n	800b726 <_dtoa_r+0x266>
 800b798:	3101      	adds	r1, #1
 800b79a:	6041      	str	r1, [r0, #4]
 800b79c:	0052      	lsls	r2, r2, #1
 800b79e:	e7c6      	b.n	800b72e <_dtoa_r+0x26e>
 800b7a0:	636f4361 	.word	0x636f4361
 800b7a4:	3fd287a7 	.word	0x3fd287a7
 800b7a8:	8b60c8b3 	.word	0x8b60c8b3
 800b7ac:	3fc68a28 	.word	0x3fc68a28
 800b7b0:	509f79fb 	.word	0x509f79fb
 800b7b4:	3fd34413 	.word	0x3fd34413
 800b7b8:	0800eace 	.word	0x0800eace
 800b7bc:	0800eae5 	.word	0x0800eae5
 800b7c0:	7ff00000 	.word	0x7ff00000
 800b7c4:	0800eaca 	.word	0x0800eaca
 800b7c8:	0800eac1 	.word	0x0800eac1
 800b7cc:	0800ed4a 	.word	0x0800ed4a
 800b7d0:	3ff80000 	.word	0x3ff80000
 800b7d4:	0800ec60 	.word	0x0800ec60
 800b7d8:	0800eb44 	.word	0x0800eb44
 800b7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7de:	9a00      	ldr	r2, [sp, #0]
 800b7e0:	601a      	str	r2, [r3, #0]
 800b7e2:	9b01      	ldr	r3, [sp, #4]
 800b7e4:	2b0e      	cmp	r3, #14
 800b7e6:	f200 80ad 	bhi.w	800b944 <_dtoa_r+0x484>
 800b7ea:	2d00      	cmp	r5, #0
 800b7ec:	f000 80aa 	beq.w	800b944 <_dtoa_r+0x484>
 800b7f0:	f1ba 0f00 	cmp.w	sl, #0
 800b7f4:	dd36      	ble.n	800b864 <_dtoa_r+0x3a4>
 800b7f6:	4ac3      	ldr	r2, [pc, #780]	; (800bb04 <_dtoa_r+0x644>)
 800b7f8:	f00a 030f 	and.w	r3, sl, #15
 800b7fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b800:	ed93 7b00 	vldr	d7, [r3]
 800b804:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b808:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b80c:	eeb0 8a47 	vmov.f32	s16, s14
 800b810:	eef0 8a67 	vmov.f32	s17, s15
 800b814:	d016      	beq.n	800b844 <_dtoa_r+0x384>
 800b816:	4bbc      	ldr	r3, [pc, #752]	; (800bb08 <_dtoa_r+0x648>)
 800b818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b81c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b820:	f7f5 f834 	bl	800088c <__aeabi_ddiv>
 800b824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b828:	f007 070f 	and.w	r7, r7, #15
 800b82c:	2503      	movs	r5, #3
 800b82e:	4eb6      	ldr	r6, [pc, #728]	; (800bb08 <_dtoa_r+0x648>)
 800b830:	b957      	cbnz	r7, 800b848 <_dtoa_r+0x388>
 800b832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b836:	ec53 2b18 	vmov	r2, r3, d8
 800b83a:	f7f5 f827 	bl	800088c <__aeabi_ddiv>
 800b83e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b842:	e029      	b.n	800b898 <_dtoa_r+0x3d8>
 800b844:	2502      	movs	r5, #2
 800b846:	e7f2      	b.n	800b82e <_dtoa_r+0x36e>
 800b848:	07f9      	lsls	r1, r7, #31
 800b84a:	d508      	bpl.n	800b85e <_dtoa_r+0x39e>
 800b84c:	ec51 0b18 	vmov	r0, r1, d8
 800b850:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b854:	f7f4 fef0 	bl	8000638 <__aeabi_dmul>
 800b858:	ec41 0b18 	vmov	d8, r0, r1
 800b85c:	3501      	adds	r5, #1
 800b85e:	107f      	asrs	r7, r7, #1
 800b860:	3608      	adds	r6, #8
 800b862:	e7e5      	b.n	800b830 <_dtoa_r+0x370>
 800b864:	f000 80a6 	beq.w	800b9b4 <_dtoa_r+0x4f4>
 800b868:	f1ca 0600 	rsb	r6, sl, #0
 800b86c:	4ba5      	ldr	r3, [pc, #660]	; (800bb04 <_dtoa_r+0x644>)
 800b86e:	4fa6      	ldr	r7, [pc, #664]	; (800bb08 <_dtoa_r+0x648>)
 800b870:	f006 020f 	and.w	r2, r6, #15
 800b874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b880:	f7f4 feda 	bl	8000638 <__aeabi_dmul>
 800b884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b888:	1136      	asrs	r6, r6, #4
 800b88a:	2300      	movs	r3, #0
 800b88c:	2502      	movs	r5, #2
 800b88e:	2e00      	cmp	r6, #0
 800b890:	f040 8085 	bne.w	800b99e <_dtoa_r+0x4de>
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1d2      	bne.n	800b83e <_dtoa_r+0x37e>
 800b898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 808c 	beq.w	800b9b8 <_dtoa_r+0x4f8>
 800b8a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b8a4:	4b99      	ldr	r3, [pc, #612]	; (800bb0c <_dtoa_r+0x64c>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f5 f936 	bl	8000b1c <__aeabi_dcmplt>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	f000 8081 	beq.w	800b9b8 <_dtoa_r+0x4f8>
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d07d      	beq.n	800b9b8 <_dtoa_r+0x4f8>
 800b8bc:	f1b9 0f00 	cmp.w	r9, #0
 800b8c0:	dd3c      	ble.n	800b93c <_dtoa_r+0x47c>
 800b8c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b8c6:	9307      	str	r3, [sp, #28]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4b91      	ldr	r3, [pc, #580]	; (800bb10 <_dtoa_r+0x650>)
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	f7f4 feb2 	bl	8000638 <__aeabi_dmul>
 800b8d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d8:	3501      	adds	r5, #1
 800b8da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b8de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f7f4 fe3e 	bl	8000564 <__aeabi_i2d>
 800b8e8:	4632      	mov	r2, r6
 800b8ea:	463b      	mov	r3, r7
 800b8ec:	f7f4 fea4 	bl	8000638 <__aeabi_dmul>
 800b8f0:	4b88      	ldr	r3, [pc, #544]	; (800bb14 <_dtoa_r+0x654>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f7f4 fcea 	bl	80002cc <__adddf3>
 800b8f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b8fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b900:	9303      	str	r3, [sp, #12]
 800b902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b904:	2b00      	cmp	r3, #0
 800b906:	d15c      	bne.n	800b9c2 <_dtoa_r+0x502>
 800b908:	4b83      	ldr	r3, [pc, #524]	; (800bb18 <_dtoa_r+0x658>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	4630      	mov	r0, r6
 800b90e:	4639      	mov	r1, r7
 800b910:	f7f4 fcda 	bl	80002c8 <__aeabi_dsub>
 800b914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b918:	4606      	mov	r6, r0
 800b91a:	460f      	mov	r7, r1
 800b91c:	f7f5 f91c 	bl	8000b58 <__aeabi_dcmpgt>
 800b920:	2800      	cmp	r0, #0
 800b922:	f040 8296 	bne.w	800be52 <_dtoa_r+0x992>
 800b926:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b92a:	4630      	mov	r0, r6
 800b92c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b930:	4639      	mov	r1, r7
 800b932:	f7f5 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 800b936:	2800      	cmp	r0, #0
 800b938:	f040 8288 	bne.w	800be4c <_dtoa_r+0x98c>
 800b93c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b940:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b944:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b946:	2b00      	cmp	r3, #0
 800b948:	f2c0 8158 	blt.w	800bbfc <_dtoa_r+0x73c>
 800b94c:	f1ba 0f0e 	cmp.w	sl, #14
 800b950:	f300 8154 	bgt.w	800bbfc <_dtoa_r+0x73c>
 800b954:	4b6b      	ldr	r3, [pc, #428]	; (800bb04 <_dtoa_r+0x644>)
 800b956:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b95a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b960:	2b00      	cmp	r3, #0
 800b962:	f280 80e3 	bge.w	800bb2c <_dtoa_r+0x66c>
 800b966:	9b01      	ldr	r3, [sp, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f300 80df 	bgt.w	800bb2c <_dtoa_r+0x66c>
 800b96e:	f040 826d 	bne.w	800be4c <_dtoa_r+0x98c>
 800b972:	4b69      	ldr	r3, [pc, #420]	; (800bb18 <_dtoa_r+0x658>)
 800b974:	2200      	movs	r2, #0
 800b976:	4640      	mov	r0, r8
 800b978:	4649      	mov	r1, r9
 800b97a:	f7f4 fe5d 	bl	8000638 <__aeabi_dmul>
 800b97e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b982:	f7f5 f8df 	bl	8000b44 <__aeabi_dcmpge>
 800b986:	9e01      	ldr	r6, [sp, #4]
 800b988:	4637      	mov	r7, r6
 800b98a:	2800      	cmp	r0, #0
 800b98c:	f040 8243 	bne.w	800be16 <_dtoa_r+0x956>
 800b990:	9d00      	ldr	r5, [sp, #0]
 800b992:	2331      	movs	r3, #49	; 0x31
 800b994:	f805 3b01 	strb.w	r3, [r5], #1
 800b998:	f10a 0a01 	add.w	sl, sl, #1
 800b99c:	e23f      	b.n	800be1e <_dtoa_r+0x95e>
 800b99e:	07f2      	lsls	r2, r6, #31
 800b9a0:	d505      	bpl.n	800b9ae <_dtoa_r+0x4ee>
 800b9a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9a6:	f7f4 fe47 	bl	8000638 <__aeabi_dmul>
 800b9aa:	3501      	adds	r5, #1
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	1076      	asrs	r6, r6, #1
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	e76c      	b.n	800b88e <_dtoa_r+0x3ce>
 800b9b4:	2502      	movs	r5, #2
 800b9b6:	e76f      	b.n	800b898 <_dtoa_r+0x3d8>
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800b9be:	930c      	str	r3, [sp, #48]	; 0x30
 800b9c0:	e78d      	b.n	800b8de <_dtoa_r+0x41e>
 800b9c2:	9900      	ldr	r1, [sp, #0]
 800b9c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9c8:	4b4e      	ldr	r3, [pc, #312]	; (800bb04 <_dtoa_r+0x644>)
 800b9ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9ce:	4401      	add	r1, r0
 800b9d0:	9102      	str	r1, [sp, #8]
 800b9d2:	9908      	ldr	r1, [sp, #32]
 800b9d4:	eeb0 8a47 	vmov.f32	s16, s14
 800b9d8:	eef0 8a67 	vmov.f32	s17, s15
 800b9dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	d045      	beq.n	800ba74 <_dtoa_r+0x5b4>
 800b9e8:	494c      	ldr	r1, [pc, #304]	; (800bb1c <_dtoa_r+0x65c>)
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	f7f4 ff4e 	bl	800088c <__aeabi_ddiv>
 800b9f0:	ec53 2b18 	vmov	r2, r3, d8
 800b9f4:	f7f4 fc68 	bl	80002c8 <__aeabi_dsub>
 800b9f8:	9d00      	ldr	r5, [sp, #0]
 800b9fa:	ec41 0b18 	vmov	d8, r0, r1
 800b9fe:	4639      	mov	r1, r7
 800ba00:	4630      	mov	r0, r6
 800ba02:	f7f5 f8c9 	bl	8000b98 <__aeabi_d2iz>
 800ba06:	900c      	str	r0, [sp, #48]	; 0x30
 800ba08:	f7f4 fdac 	bl	8000564 <__aeabi_i2d>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4630      	mov	r0, r6
 800ba12:	4639      	mov	r1, r7
 800ba14:	f7f4 fc58 	bl	80002c8 <__aeabi_dsub>
 800ba18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba1a:	3330      	adds	r3, #48	; 0x30
 800ba1c:	f805 3b01 	strb.w	r3, [r5], #1
 800ba20:	ec53 2b18 	vmov	r2, r3, d8
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	f7f5 f878 	bl	8000b1c <__aeabi_dcmplt>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d165      	bne.n	800bafc <_dtoa_r+0x63c>
 800ba30:	4632      	mov	r2, r6
 800ba32:	463b      	mov	r3, r7
 800ba34:	4935      	ldr	r1, [pc, #212]	; (800bb0c <_dtoa_r+0x64c>)
 800ba36:	2000      	movs	r0, #0
 800ba38:	f7f4 fc46 	bl	80002c8 <__aeabi_dsub>
 800ba3c:	ec53 2b18 	vmov	r2, r3, d8
 800ba40:	f7f5 f86c 	bl	8000b1c <__aeabi_dcmplt>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	f040 80b9 	bne.w	800bbbc <_dtoa_r+0x6fc>
 800ba4a:	9b02      	ldr	r3, [sp, #8]
 800ba4c:	429d      	cmp	r5, r3
 800ba4e:	f43f af75 	beq.w	800b93c <_dtoa_r+0x47c>
 800ba52:	4b2f      	ldr	r3, [pc, #188]	; (800bb10 <_dtoa_r+0x650>)
 800ba54:	ec51 0b18 	vmov	r0, r1, d8
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f7f4 fded 	bl	8000638 <__aeabi_dmul>
 800ba5e:	4b2c      	ldr	r3, [pc, #176]	; (800bb10 <_dtoa_r+0x650>)
 800ba60:	ec41 0b18 	vmov	d8, r0, r1
 800ba64:	2200      	movs	r2, #0
 800ba66:	4630      	mov	r0, r6
 800ba68:	4639      	mov	r1, r7
 800ba6a:	f7f4 fde5 	bl	8000638 <__aeabi_dmul>
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460f      	mov	r7, r1
 800ba72:	e7c4      	b.n	800b9fe <_dtoa_r+0x53e>
 800ba74:	ec51 0b17 	vmov	r0, r1, d7
 800ba78:	f7f4 fdde 	bl	8000638 <__aeabi_dmul>
 800ba7c:	9b02      	ldr	r3, [sp, #8]
 800ba7e:	9d00      	ldr	r5, [sp, #0]
 800ba80:	930c      	str	r3, [sp, #48]	; 0x30
 800ba82:	ec41 0b18 	vmov	d8, r0, r1
 800ba86:	4639      	mov	r1, r7
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7f5 f885 	bl	8000b98 <__aeabi_d2iz>
 800ba8e:	9011      	str	r0, [sp, #68]	; 0x44
 800ba90:	f7f4 fd68 	bl	8000564 <__aeabi_i2d>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	4630      	mov	r0, r6
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	f7f4 fc14 	bl	80002c8 <__aeabi_dsub>
 800baa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baa2:	3330      	adds	r3, #48	; 0x30
 800baa4:	f805 3b01 	strb.w	r3, [r5], #1
 800baa8:	9b02      	ldr	r3, [sp, #8]
 800baaa:	429d      	cmp	r5, r3
 800baac:	4606      	mov	r6, r0
 800baae:	460f      	mov	r7, r1
 800bab0:	f04f 0200 	mov.w	r2, #0
 800bab4:	d134      	bne.n	800bb20 <_dtoa_r+0x660>
 800bab6:	4b19      	ldr	r3, [pc, #100]	; (800bb1c <_dtoa_r+0x65c>)
 800bab8:	ec51 0b18 	vmov	r0, r1, d8
 800babc:	f7f4 fc06 	bl	80002cc <__adddf3>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4630      	mov	r0, r6
 800bac6:	4639      	mov	r1, r7
 800bac8:	f7f5 f846 	bl	8000b58 <__aeabi_dcmpgt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d175      	bne.n	800bbbc <_dtoa_r+0x6fc>
 800bad0:	ec53 2b18 	vmov	r2, r3, d8
 800bad4:	4911      	ldr	r1, [pc, #68]	; (800bb1c <_dtoa_r+0x65c>)
 800bad6:	2000      	movs	r0, #0
 800bad8:	f7f4 fbf6 	bl	80002c8 <__aeabi_dsub>
 800badc:	4602      	mov	r2, r0
 800bade:	460b      	mov	r3, r1
 800bae0:	4630      	mov	r0, r6
 800bae2:	4639      	mov	r1, r7
 800bae4:	f7f5 f81a 	bl	8000b1c <__aeabi_dcmplt>
 800bae8:	2800      	cmp	r0, #0
 800baea:	f43f af27 	beq.w	800b93c <_dtoa_r+0x47c>
 800baee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800baf0:	1e6b      	subs	r3, r5, #1
 800baf2:	930c      	str	r3, [sp, #48]	; 0x30
 800baf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800baf8:	2b30      	cmp	r3, #48	; 0x30
 800bafa:	d0f8      	beq.n	800baee <_dtoa_r+0x62e>
 800bafc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bb00:	e04a      	b.n	800bb98 <_dtoa_r+0x6d8>
 800bb02:	bf00      	nop
 800bb04:	0800ec60 	.word	0x0800ec60
 800bb08:	0800ec38 	.word	0x0800ec38
 800bb0c:	3ff00000 	.word	0x3ff00000
 800bb10:	40240000 	.word	0x40240000
 800bb14:	401c0000 	.word	0x401c0000
 800bb18:	40140000 	.word	0x40140000
 800bb1c:	3fe00000 	.word	0x3fe00000
 800bb20:	4baf      	ldr	r3, [pc, #700]	; (800bde0 <_dtoa_r+0x920>)
 800bb22:	f7f4 fd89 	bl	8000638 <__aeabi_dmul>
 800bb26:	4606      	mov	r6, r0
 800bb28:	460f      	mov	r7, r1
 800bb2a:	e7ac      	b.n	800ba86 <_dtoa_r+0x5c6>
 800bb2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb30:	9d00      	ldr	r5, [sp, #0]
 800bb32:	4642      	mov	r2, r8
 800bb34:	464b      	mov	r3, r9
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	f7f4 fea7 	bl	800088c <__aeabi_ddiv>
 800bb3e:	f7f5 f82b 	bl	8000b98 <__aeabi_d2iz>
 800bb42:	9002      	str	r0, [sp, #8]
 800bb44:	f7f4 fd0e 	bl	8000564 <__aeabi_i2d>
 800bb48:	4642      	mov	r2, r8
 800bb4a:	464b      	mov	r3, r9
 800bb4c:	f7f4 fd74 	bl	8000638 <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4630      	mov	r0, r6
 800bb56:	4639      	mov	r1, r7
 800bb58:	f7f4 fbb6 	bl	80002c8 <__aeabi_dsub>
 800bb5c:	9e02      	ldr	r6, [sp, #8]
 800bb5e:	9f01      	ldr	r7, [sp, #4]
 800bb60:	3630      	adds	r6, #48	; 0x30
 800bb62:	f805 6b01 	strb.w	r6, [r5], #1
 800bb66:	9e00      	ldr	r6, [sp, #0]
 800bb68:	1bae      	subs	r6, r5, r6
 800bb6a:	42b7      	cmp	r7, r6
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	d137      	bne.n	800bbe2 <_dtoa_r+0x722>
 800bb72:	f7f4 fbab 	bl	80002cc <__adddf3>
 800bb76:	4642      	mov	r2, r8
 800bb78:	464b      	mov	r3, r9
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	f7f4 ffeb 	bl	8000b58 <__aeabi_dcmpgt>
 800bb82:	b9c8      	cbnz	r0, 800bbb8 <_dtoa_r+0x6f8>
 800bb84:	4642      	mov	r2, r8
 800bb86:	464b      	mov	r3, r9
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 ffbc 	bl	8000b08 <__aeabi_dcmpeq>
 800bb90:	b110      	cbz	r0, 800bb98 <_dtoa_r+0x6d8>
 800bb92:	9b02      	ldr	r3, [sp, #8]
 800bb94:	07d9      	lsls	r1, r3, #31
 800bb96:	d40f      	bmi.n	800bbb8 <_dtoa_r+0x6f8>
 800bb98:	4620      	mov	r0, r4
 800bb9a:	4659      	mov	r1, fp
 800bb9c:	f000 fe6a 	bl	800c874 <_Bfree>
 800bba0:	2300      	movs	r3, #0
 800bba2:	702b      	strb	r3, [r5, #0]
 800bba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bba6:	f10a 0001 	add.w	r0, sl, #1
 800bbaa:	6018      	str	r0, [r3, #0]
 800bbac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f43f acd8 	beq.w	800b564 <_dtoa_r+0xa4>
 800bbb4:	601d      	str	r5, [r3, #0]
 800bbb6:	e4d5      	b.n	800b564 <_dtoa_r+0xa4>
 800bbb8:	f8cd a01c 	str.w	sl, [sp, #28]
 800bbbc:	462b      	mov	r3, r5
 800bbbe:	461d      	mov	r5, r3
 800bbc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbc4:	2a39      	cmp	r2, #57	; 0x39
 800bbc6:	d108      	bne.n	800bbda <_dtoa_r+0x71a>
 800bbc8:	9a00      	ldr	r2, [sp, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d1f7      	bne.n	800bbbe <_dtoa_r+0x6fe>
 800bbce:	9a07      	ldr	r2, [sp, #28]
 800bbd0:	9900      	ldr	r1, [sp, #0]
 800bbd2:	3201      	adds	r2, #1
 800bbd4:	9207      	str	r2, [sp, #28]
 800bbd6:	2230      	movs	r2, #48	; 0x30
 800bbd8:	700a      	strb	r2, [r1, #0]
 800bbda:	781a      	ldrb	r2, [r3, #0]
 800bbdc:	3201      	adds	r2, #1
 800bbde:	701a      	strb	r2, [r3, #0]
 800bbe0:	e78c      	b.n	800bafc <_dtoa_r+0x63c>
 800bbe2:	4b7f      	ldr	r3, [pc, #508]	; (800bde0 <_dtoa_r+0x920>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f7f4 fd27 	bl	8000638 <__aeabi_dmul>
 800bbea:	2200      	movs	r2, #0
 800bbec:	2300      	movs	r3, #0
 800bbee:	4606      	mov	r6, r0
 800bbf0:	460f      	mov	r7, r1
 800bbf2:	f7f4 ff89 	bl	8000b08 <__aeabi_dcmpeq>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d09b      	beq.n	800bb32 <_dtoa_r+0x672>
 800bbfa:	e7cd      	b.n	800bb98 <_dtoa_r+0x6d8>
 800bbfc:	9a08      	ldr	r2, [sp, #32]
 800bbfe:	2a00      	cmp	r2, #0
 800bc00:	f000 80c4 	beq.w	800bd8c <_dtoa_r+0x8cc>
 800bc04:	9a05      	ldr	r2, [sp, #20]
 800bc06:	2a01      	cmp	r2, #1
 800bc08:	f300 80a8 	bgt.w	800bd5c <_dtoa_r+0x89c>
 800bc0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc0e:	2a00      	cmp	r2, #0
 800bc10:	f000 80a0 	beq.w	800bd54 <_dtoa_r+0x894>
 800bc14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc18:	9e06      	ldr	r6, [sp, #24]
 800bc1a:	4645      	mov	r5, r8
 800bc1c:	9a04      	ldr	r2, [sp, #16]
 800bc1e:	2101      	movs	r1, #1
 800bc20:	441a      	add	r2, r3
 800bc22:	4620      	mov	r0, r4
 800bc24:	4498      	add	r8, r3
 800bc26:	9204      	str	r2, [sp, #16]
 800bc28:	f000 ff2a 	bl	800ca80 <__i2b>
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	dd0b      	ble.n	800bc4a <_dtoa_r+0x78a>
 800bc32:	9b04      	ldr	r3, [sp, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dd08      	ble.n	800bc4a <_dtoa_r+0x78a>
 800bc38:	42ab      	cmp	r3, r5
 800bc3a:	9a04      	ldr	r2, [sp, #16]
 800bc3c:	bfa8      	it	ge
 800bc3e:	462b      	movge	r3, r5
 800bc40:	eba8 0803 	sub.w	r8, r8, r3
 800bc44:	1aed      	subs	r5, r5, r3
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	9b06      	ldr	r3, [sp, #24]
 800bc4c:	b1fb      	cbz	r3, 800bc8e <_dtoa_r+0x7ce>
 800bc4e:	9b08      	ldr	r3, [sp, #32]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 809f 	beq.w	800bd94 <_dtoa_r+0x8d4>
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	dd11      	ble.n	800bc7e <_dtoa_r+0x7be>
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f000 ffca 	bl	800cbf8 <__pow5mult>
 800bc64:	465a      	mov	r2, fp
 800bc66:	4601      	mov	r1, r0
 800bc68:	4607      	mov	r7, r0
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 ff1e 	bl	800caac <__multiply>
 800bc70:	4659      	mov	r1, fp
 800bc72:	9007      	str	r0, [sp, #28]
 800bc74:	4620      	mov	r0, r4
 800bc76:	f000 fdfd 	bl	800c874 <_Bfree>
 800bc7a:	9b07      	ldr	r3, [sp, #28]
 800bc7c:	469b      	mov	fp, r3
 800bc7e:	9b06      	ldr	r3, [sp, #24]
 800bc80:	1b9a      	subs	r2, r3, r6
 800bc82:	d004      	beq.n	800bc8e <_dtoa_r+0x7ce>
 800bc84:	4659      	mov	r1, fp
 800bc86:	4620      	mov	r0, r4
 800bc88:	f000 ffb6 	bl	800cbf8 <__pow5mult>
 800bc8c:	4683      	mov	fp, r0
 800bc8e:	2101      	movs	r1, #1
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fef5 	bl	800ca80 <__i2b>
 800bc96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	dd7c      	ble.n	800bd98 <_dtoa_r+0x8d8>
 800bc9e:	461a      	mov	r2, r3
 800bca0:	4601      	mov	r1, r0
 800bca2:	4620      	mov	r0, r4
 800bca4:	f000 ffa8 	bl	800cbf8 <__pow5mult>
 800bca8:	9b05      	ldr	r3, [sp, #20]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	4606      	mov	r6, r0
 800bcae:	dd76      	ble.n	800bd9e <_dtoa_r+0x8de>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	9306      	str	r3, [sp, #24]
 800bcb4:	6933      	ldr	r3, [r6, #16]
 800bcb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bcba:	6918      	ldr	r0, [r3, #16]
 800bcbc:	f000 fe90 	bl	800c9e0 <__hi0bits>
 800bcc0:	f1c0 0020 	rsb	r0, r0, #32
 800bcc4:	9b04      	ldr	r3, [sp, #16]
 800bcc6:	4418      	add	r0, r3
 800bcc8:	f010 001f 	ands.w	r0, r0, #31
 800bccc:	f000 8086 	beq.w	800bddc <_dtoa_r+0x91c>
 800bcd0:	f1c0 0320 	rsb	r3, r0, #32
 800bcd4:	2b04      	cmp	r3, #4
 800bcd6:	dd7f      	ble.n	800bdd8 <_dtoa_r+0x918>
 800bcd8:	f1c0 001c 	rsb	r0, r0, #28
 800bcdc:	9b04      	ldr	r3, [sp, #16]
 800bcde:	4403      	add	r3, r0
 800bce0:	4480      	add	r8, r0
 800bce2:	4405      	add	r5, r0
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	dd05      	ble.n	800bcf8 <_dtoa_r+0x838>
 800bcec:	4659      	mov	r1, fp
 800bcee:	4642      	mov	r2, r8
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 ffdb 	bl	800ccac <__lshift>
 800bcf6:	4683      	mov	fp, r0
 800bcf8:	9b04      	ldr	r3, [sp, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dd05      	ble.n	800bd0a <_dtoa_r+0x84a>
 800bcfe:	4631      	mov	r1, r6
 800bd00:	461a      	mov	r2, r3
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 ffd2 	bl	800ccac <__lshift>
 800bd08:	4606      	mov	r6, r0
 800bd0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d069      	beq.n	800bde4 <_dtoa_r+0x924>
 800bd10:	4631      	mov	r1, r6
 800bd12:	4658      	mov	r0, fp
 800bd14:	f001 f836 	bl	800cd84 <__mcmp>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	da63      	bge.n	800bde4 <_dtoa_r+0x924>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	4659      	mov	r1, fp
 800bd20:	220a      	movs	r2, #10
 800bd22:	4620      	mov	r0, r4
 800bd24:	f000 fdc8 	bl	800c8b8 <__multadd>
 800bd28:	9b08      	ldr	r3, [sp, #32]
 800bd2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd2e:	4683      	mov	fp, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 818f 	beq.w	800c054 <_dtoa_r+0xb94>
 800bd36:	4639      	mov	r1, r7
 800bd38:	2300      	movs	r3, #0
 800bd3a:	220a      	movs	r2, #10
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 fdbb 	bl	800c8b8 <__multadd>
 800bd42:	f1b9 0f00 	cmp.w	r9, #0
 800bd46:	4607      	mov	r7, r0
 800bd48:	f300 808e 	bgt.w	800be68 <_dtoa_r+0x9a8>
 800bd4c:	9b05      	ldr	r3, [sp, #20]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	dc50      	bgt.n	800bdf4 <_dtoa_r+0x934>
 800bd52:	e089      	b.n	800be68 <_dtoa_r+0x9a8>
 800bd54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd5a:	e75d      	b.n	800bc18 <_dtoa_r+0x758>
 800bd5c:	9b01      	ldr	r3, [sp, #4]
 800bd5e:	1e5e      	subs	r6, r3, #1
 800bd60:	9b06      	ldr	r3, [sp, #24]
 800bd62:	42b3      	cmp	r3, r6
 800bd64:	bfbf      	itttt	lt
 800bd66:	9b06      	ldrlt	r3, [sp, #24]
 800bd68:	9606      	strlt	r6, [sp, #24]
 800bd6a:	1af2      	sublt	r2, r6, r3
 800bd6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bd6e:	bfb6      	itet	lt
 800bd70:	189b      	addlt	r3, r3, r2
 800bd72:	1b9e      	subge	r6, r3, r6
 800bd74:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bd76:	9b01      	ldr	r3, [sp, #4]
 800bd78:	bfb8      	it	lt
 800bd7a:	2600      	movlt	r6, #0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	bfb5      	itete	lt
 800bd80:	eba8 0503 	sublt.w	r5, r8, r3
 800bd84:	9b01      	ldrge	r3, [sp, #4]
 800bd86:	2300      	movlt	r3, #0
 800bd88:	4645      	movge	r5, r8
 800bd8a:	e747      	b.n	800bc1c <_dtoa_r+0x75c>
 800bd8c:	9e06      	ldr	r6, [sp, #24]
 800bd8e:	9f08      	ldr	r7, [sp, #32]
 800bd90:	4645      	mov	r5, r8
 800bd92:	e74c      	b.n	800bc2e <_dtoa_r+0x76e>
 800bd94:	9a06      	ldr	r2, [sp, #24]
 800bd96:	e775      	b.n	800bc84 <_dtoa_r+0x7c4>
 800bd98:	9b05      	ldr	r3, [sp, #20]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	dc18      	bgt.n	800bdd0 <_dtoa_r+0x910>
 800bd9e:	9b02      	ldr	r3, [sp, #8]
 800bda0:	b9b3      	cbnz	r3, 800bdd0 <_dtoa_r+0x910>
 800bda2:	9b03      	ldr	r3, [sp, #12]
 800bda4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bda8:	b9a3      	cbnz	r3, 800bdd4 <_dtoa_r+0x914>
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdb0:	0d1b      	lsrs	r3, r3, #20
 800bdb2:	051b      	lsls	r3, r3, #20
 800bdb4:	b12b      	cbz	r3, 800bdc2 <_dtoa_r+0x902>
 800bdb6:	9b04      	ldr	r3, [sp, #16]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	f108 0801 	add.w	r8, r8, #1
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	9306      	str	r3, [sp, #24]
 800bdc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f47f af74 	bne.w	800bcb4 <_dtoa_r+0x7f4>
 800bdcc:	2001      	movs	r0, #1
 800bdce:	e779      	b.n	800bcc4 <_dtoa_r+0x804>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	e7f6      	b.n	800bdc2 <_dtoa_r+0x902>
 800bdd4:	9b02      	ldr	r3, [sp, #8]
 800bdd6:	e7f4      	b.n	800bdc2 <_dtoa_r+0x902>
 800bdd8:	d085      	beq.n	800bce6 <_dtoa_r+0x826>
 800bdda:	4618      	mov	r0, r3
 800bddc:	301c      	adds	r0, #28
 800bdde:	e77d      	b.n	800bcdc <_dtoa_r+0x81c>
 800bde0:	40240000 	.word	0x40240000
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dc38      	bgt.n	800be5c <_dtoa_r+0x99c>
 800bdea:	9b05      	ldr	r3, [sp, #20]
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	dd35      	ble.n	800be5c <_dtoa_r+0x99c>
 800bdf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bdf4:	f1b9 0f00 	cmp.w	r9, #0
 800bdf8:	d10d      	bne.n	800be16 <_dtoa_r+0x956>
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	464b      	mov	r3, r9
 800bdfe:	2205      	movs	r2, #5
 800be00:	4620      	mov	r0, r4
 800be02:	f000 fd59 	bl	800c8b8 <__multadd>
 800be06:	4601      	mov	r1, r0
 800be08:	4606      	mov	r6, r0
 800be0a:	4658      	mov	r0, fp
 800be0c:	f000 ffba 	bl	800cd84 <__mcmp>
 800be10:	2800      	cmp	r0, #0
 800be12:	f73f adbd 	bgt.w	800b990 <_dtoa_r+0x4d0>
 800be16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be18:	9d00      	ldr	r5, [sp, #0]
 800be1a:	ea6f 0a03 	mvn.w	sl, r3
 800be1e:	f04f 0800 	mov.w	r8, #0
 800be22:	4631      	mov	r1, r6
 800be24:	4620      	mov	r0, r4
 800be26:	f000 fd25 	bl	800c874 <_Bfree>
 800be2a:	2f00      	cmp	r7, #0
 800be2c:	f43f aeb4 	beq.w	800bb98 <_dtoa_r+0x6d8>
 800be30:	f1b8 0f00 	cmp.w	r8, #0
 800be34:	d005      	beq.n	800be42 <_dtoa_r+0x982>
 800be36:	45b8      	cmp	r8, r7
 800be38:	d003      	beq.n	800be42 <_dtoa_r+0x982>
 800be3a:	4641      	mov	r1, r8
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 fd19 	bl	800c874 <_Bfree>
 800be42:	4639      	mov	r1, r7
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fd15 	bl	800c874 <_Bfree>
 800be4a:	e6a5      	b.n	800bb98 <_dtoa_r+0x6d8>
 800be4c:	2600      	movs	r6, #0
 800be4e:	4637      	mov	r7, r6
 800be50:	e7e1      	b.n	800be16 <_dtoa_r+0x956>
 800be52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800be54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800be58:	4637      	mov	r7, r6
 800be5a:	e599      	b.n	800b990 <_dtoa_r+0x4d0>
 800be5c:	9b08      	ldr	r3, [sp, #32]
 800be5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 80fd 	beq.w	800c062 <_dtoa_r+0xba2>
 800be68:	2d00      	cmp	r5, #0
 800be6a:	dd05      	ble.n	800be78 <_dtoa_r+0x9b8>
 800be6c:	4639      	mov	r1, r7
 800be6e:	462a      	mov	r2, r5
 800be70:	4620      	mov	r0, r4
 800be72:	f000 ff1b 	bl	800ccac <__lshift>
 800be76:	4607      	mov	r7, r0
 800be78:	9b06      	ldr	r3, [sp, #24]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d05c      	beq.n	800bf38 <_dtoa_r+0xa78>
 800be7e:	6879      	ldr	r1, [r7, #4]
 800be80:	4620      	mov	r0, r4
 800be82:	f000 fcb7 	bl	800c7f4 <_Balloc>
 800be86:	4605      	mov	r5, r0
 800be88:	b928      	cbnz	r0, 800be96 <_dtoa_r+0x9d6>
 800be8a:	4b80      	ldr	r3, [pc, #512]	; (800c08c <_dtoa_r+0xbcc>)
 800be8c:	4602      	mov	r2, r0
 800be8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be92:	f7ff bb2e 	b.w	800b4f2 <_dtoa_r+0x32>
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	3202      	adds	r2, #2
 800be9a:	0092      	lsls	r2, r2, #2
 800be9c:	f107 010c 	add.w	r1, r7, #12
 800bea0:	300c      	adds	r0, #12
 800bea2:	f000 fc99 	bl	800c7d8 <memcpy>
 800bea6:	2201      	movs	r2, #1
 800bea8:	4629      	mov	r1, r5
 800beaa:	4620      	mov	r0, r4
 800beac:	f000 fefe 	bl	800ccac <__lshift>
 800beb0:	9b00      	ldr	r3, [sp, #0]
 800beb2:	3301      	adds	r3, #1
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	9b00      	ldr	r3, [sp, #0]
 800beb8:	444b      	add	r3, r9
 800beba:	9307      	str	r3, [sp, #28]
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	46b8      	mov	r8, r7
 800bec4:	9306      	str	r3, [sp, #24]
 800bec6:	4607      	mov	r7, r0
 800bec8:	9b01      	ldr	r3, [sp, #4]
 800beca:	4631      	mov	r1, r6
 800becc:	3b01      	subs	r3, #1
 800bece:	4658      	mov	r0, fp
 800bed0:	9302      	str	r3, [sp, #8]
 800bed2:	f7ff fa69 	bl	800b3a8 <quorem>
 800bed6:	4603      	mov	r3, r0
 800bed8:	3330      	adds	r3, #48	; 0x30
 800beda:	9004      	str	r0, [sp, #16]
 800bedc:	4641      	mov	r1, r8
 800bede:	4658      	mov	r0, fp
 800bee0:	9308      	str	r3, [sp, #32]
 800bee2:	f000 ff4f 	bl	800cd84 <__mcmp>
 800bee6:	463a      	mov	r2, r7
 800bee8:	4681      	mov	r9, r0
 800beea:	4631      	mov	r1, r6
 800beec:	4620      	mov	r0, r4
 800beee:	f000 ff65 	bl	800cdbc <__mdiff>
 800bef2:	68c2      	ldr	r2, [r0, #12]
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	4605      	mov	r5, r0
 800bef8:	bb02      	cbnz	r2, 800bf3c <_dtoa_r+0xa7c>
 800befa:	4601      	mov	r1, r0
 800befc:	4658      	mov	r0, fp
 800befe:	f000 ff41 	bl	800cd84 <__mcmp>
 800bf02:	9b08      	ldr	r3, [sp, #32]
 800bf04:	4602      	mov	r2, r0
 800bf06:	4629      	mov	r1, r5
 800bf08:	4620      	mov	r0, r4
 800bf0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bf0e:	f000 fcb1 	bl	800c874 <_Bfree>
 800bf12:	9b05      	ldr	r3, [sp, #20]
 800bf14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf16:	9d01      	ldr	r5, [sp, #4]
 800bf18:	ea43 0102 	orr.w	r1, r3, r2
 800bf1c:	9b06      	ldr	r3, [sp, #24]
 800bf1e:	430b      	orrs	r3, r1
 800bf20:	9b08      	ldr	r3, [sp, #32]
 800bf22:	d10d      	bne.n	800bf40 <_dtoa_r+0xa80>
 800bf24:	2b39      	cmp	r3, #57	; 0x39
 800bf26:	d029      	beq.n	800bf7c <_dtoa_r+0xabc>
 800bf28:	f1b9 0f00 	cmp.w	r9, #0
 800bf2c:	dd01      	ble.n	800bf32 <_dtoa_r+0xa72>
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	3331      	adds	r3, #49	; 0x31
 800bf32:	9a02      	ldr	r2, [sp, #8]
 800bf34:	7013      	strb	r3, [r2, #0]
 800bf36:	e774      	b.n	800be22 <_dtoa_r+0x962>
 800bf38:	4638      	mov	r0, r7
 800bf3a:	e7b9      	b.n	800beb0 <_dtoa_r+0x9f0>
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	e7e2      	b.n	800bf06 <_dtoa_r+0xa46>
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	db06      	blt.n	800bf54 <_dtoa_r+0xa94>
 800bf46:	9905      	ldr	r1, [sp, #20]
 800bf48:	ea41 0909 	orr.w	r9, r1, r9
 800bf4c:	9906      	ldr	r1, [sp, #24]
 800bf4e:	ea59 0101 	orrs.w	r1, r9, r1
 800bf52:	d120      	bne.n	800bf96 <_dtoa_r+0xad6>
 800bf54:	2a00      	cmp	r2, #0
 800bf56:	ddec      	ble.n	800bf32 <_dtoa_r+0xa72>
 800bf58:	4659      	mov	r1, fp
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	f000 fea4 	bl	800ccac <__lshift>
 800bf64:	4631      	mov	r1, r6
 800bf66:	4683      	mov	fp, r0
 800bf68:	f000 ff0c 	bl	800cd84 <__mcmp>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	9b01      	ldr	r3, [sp, #4]
 800bf70:	dc02      	bgt.n	800bf78 <_dtoa_r+0xab8>
 800bf72:	d1de      	bne.n	800bf32 <_dtoa_r+0xa72>
 800bf74:	07da      	lsls	r2, r3, #31
 800bf76:	d5dc      	bpl.n	800bf32 <_dtoa_r+0xa72>
 800bf78:	2b39      	cmp	r3, #57	; 0x39
 800bf7a:	d1d8      	bne.n	800bf2e <_dtoa_r+0xa6e>
 800bf7c:	9a02      	ldr	r2, [sp, #8]
 800bf7e:	2339      	movs	r3, #57	; 0x39
 800bf80:	7013      	strb	r3, [r2, #0]
 800bf82:	462b      	mov	r3, r5
 800bf84:	461d      	mov	r5, r3
 800bf86:	3b01      	subs	r3, #1
 800bf88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf8c:	2a39      	cmp	r2, #57	; 0x39
 800bf8e:	d050      	beq.n	800c032 <_dtoa_r+0xb72>
 800bf90:	3201      	adds	r2, #1
 800bf92:	701a      	strb	r2, [r3, #0]
 800bf94:	e745      	b.n	800be22 <_dtoa_r+0x962>
 800bf96:	2a00      	cmp	r2, #0
 800bf98:	dd03      	ble.n	800bfa2 <_dtoa_r+0xae2>
 800bf9a:	2b39      	cmp	r3, #57	; 0x39
 800bf9c:	d0ee      	beq.n	800bf7c <_dtoa_r+0xabc>
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	e7c7      	b.n	800bf32 <_dtoa_r+0xa72>
 800bfa2:	9a01      	ldr	r2, [sp, #4]
 800bfa4:	9907      	ldr	r1, [sp, #28]
 800bfa6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bfaa:	428a      	cmp	r2, r1
 800bfac:	d02a      	beq.n	800c004 <_dtoa_r+0xb44>
 800bfae:	4659      	mov	r1, fp
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	220a      	movs	r2, #10
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 fc7f 	bl	800c8b8 <__multadd>
 800bfba:	45b8      	cmp	r8, r7
 800bfbc:	4683      	mov	fp, r0
 800bfbe:	f04f 0300 	mov.w	r3, #0
 800bfc2:	f04f 020a 	mov.w	r2, #10
 800bfc6:	4641      	mov	r1, r8
 800bfc8:	4620      	mov	r0, r4
 800bfca:	d107      	bne.n	800bfdc <_dtoa_r+0xb1c>
 800bfcc:	f000 fc74 	bl	800c8b8 <__multadd>
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	4607      	mov	r7, r0
 800bfd4:	9b01      	ldr	r3, [sp, #4]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	e775      	b.n	800bec8 <_dtoa_r+0xa08>
 800bfdc:	f000 fc6c 	bl	800c8b8 <__multadd>
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	4680      	mov	r8, r0
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	220a      	movs	r2, #10
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 fc65 	bl	800c8b8 <__multadd>
 800bfee:	4607      	mov	r7, r0
 800bff0:	e7f0      	b.n	800bfd4 <_dtoa_r+0xb14>
 800bff2:	f1b9 0f00 	cmp.w	r9, #0
 800bff6:	9a00      	ldr	r2, [sp, #0]
 800bff8:	bfcc      	ite	gt
 800bffa:	464d      	movgt	r5, r9
 800bffc:	2501      	movle	r5, #1
 800bffe:	4415      	add	r5, r2
 800c000:	f04f 0800 	mov.w	r8, #0
 800c004:	4659      	mov	r1, fp
 800c006:	2201      	movs	r2, #1
 800c008:	4620      	mov	r0, r4
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	f000 fe4e 	bl	800ccac <__lshift>
 800c010:	4631      	mov	r1, r6
 800c012:	4683      	mov	fp, r0
 800c014:	f000 feb6 	bl	800cd84 <__mcmp>
 800c018:	2800      	cmp	r0, #0
 800c01a:	dcb2      	bgt.n	800bf82 <_dtoa_r+0xac2>
 800c01c:	d102      	bne.n	800c024 <_dtoa_r+0xb64>
 800c01e:	9b01      	ldr	r3, [sp, #4]
 800c020:	07db      	lsls	r3, r3, #31
 800c022:	d4ae      	bmi.n	800bf82 <_dtoa_r+0xac2>
 800c024:	462b      	mov	r3, r5
 800c026:	461d      	mov	r5, r3
 800c028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c02c:	2a30      	cmp	r2, #48	; 0x30
 800c02e:	d0fa      	beq.n	800c026 <_dtoa_r+0xb66>
 800c030:	e6f7      	b.n	800be22 <_dtoa_r+0x962>
 800c032:	9a00      	ldr	r2, [sp, #0]
 800c034:	429a      	cmp	r2, r3
 800c036:	d1a5      	bne.n	800bf84 <_dtoa_r+0xac4>
 800c038:	f10a 0a01 	add.w	sl, sl, #1
 800c03c:	2331      	movs	r3, #49	; 0x31
 800c03e:	e779      	b.n	800bf34 <_dtoa_r+0xa74>
 800c040:	4b13      	ldr	r3, [pc, #76]	; (800c090 <_dtoa_r+0xbd0>)
 800c042:	f7ff baaf 	b.w	800b5a4 <_dtoa_r+0xe4>
 800c046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f47f aa86 	bne.w	800b55a <_dtoa_r+0x9a>
 800c04e:	4b11      	ldr	r3, [pc, #68]	; (800c094 <_dtoa_r+0xbd4>)
 800c050:	f7ff baa8 	b.w	800b5a4 <_dtoa_r+0xe4>
 800c054:	f1b9 0f00 	cmp.w	r9, #0
 800c058:	dc03      	bgt.n	800c062 <_dtoa_r+0xba2>
 800c05a:	9b05      	ldr	r3, [sp, #20]
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	f73f aec9 	bgt.w	800bdf4 <_dtoa_r+0x934>
 800c062:	9d00      	ldr	r5, [sp, #0]
 800c064:	4631      	mov	r1, r6
 800c066:	4658      	mov	r0, fp
 800c068:	f7ff f99e 	bl	800b3a8 <quorem>
 800c06c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c070:	f805 3b01 	strb.w	r3, [r5], #1
 800c074:	9a00      	ldr	r2, [sp, #0]
 800c076:	1aaa      	subs	r2, r5, r2
 800c078:	4591      	cmp	r9, r2
 800c07a:	ddba      	ble.n	800bff2 <_dtoa_r+0xb32>
 800c07c:	4659      	mov	r1, fp
 800c07e:	2300      	movs	r3, #0
 800c080:	220a      	movs	r2, #10
 800c082:	4620      	mov	r0, r4
 800c084:	f000 fc18 	bl	800c8b8 <__multadd>
 800c088:	4683      	mov	fp, r0
 800c08a:	e7eb      	b.n	800c064 <_dtoa_r+0xba4>
 800c08c:	0800eb44 	.word	0x0800eb44
 800c090:	0800ed49 	.word	0x0800ed49
 800c094:	0800eac1 	.word	0x0800eac1

0800c098 <rshift>:
 800c098:	6903      	ldr	r3, [r0, #16]
 800c09a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c09e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0a6:	f100 0414 	add.w	r4, r0, #20
 800c0aa:	dd45      	ble.n	800c138 <rshift+0xa0>
 800c0ac:	f011 011f 	ands.w	r1, r1, #31
 800c0b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0b8:	d10c      	bne.n	800c0d4 <rshift+0x3c>
 800c0ba:	f100 0710 	add.w	r7, r0, #16
 800c0be:	4629      	mov	r1, r5
 800c0c0:	42b1      	cmp	r1, r6
 800c0c2:	d334      	bcc.n	800c12e <rshift+0x96>
 800c0c4:	1a9b      	subs	r3, r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	1eea      	subs	r2, r5, #3
 800c0ca:	4296      	cmp	r6, r2
 800c0cc:	bf38      	it	cc
 800c0ce:	2300      	movcc	r3, #0
 800c0d0:	4423      	add	r3, r4
 800c0d2:	e015      	b.n	800c100 <rshift+0x68>
 800c0d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0d8:	f1c1 0820 	rsb	r8, r1, #32
 800c0dc:	40cf      	lsrs	r7, r1
 800c0de:	f105 0e04 	add.w	lr, r5, #4
 800c0e2:	46a1      	mov	r9, r4
 800c0e4:	4576      	cmp	r6, lr
 800c0e6:	46f4      	mov	ip, lr
 800c0e8:	d815      	bhi.n	800c116 <rshift+0x7e>
 800c0ea:	1a9b      	subs	r3, r3, r2
 800c0ec:	009a      	lsls	r2, r3, #2
 800c0ee:	3a04      	subs	r2, #4
 800c0f0:	3501      	adds	r5, #1
 800c0f2:	42ae      	cmp	r6, r5
 800c0f4:	bf38      	it	cc
 800c0f6:	2200      	movcc	r2, #0
 800c0f8:	18a3      	adds	r3, r4, r2
 800c0fa:	50a7      	str	r7, [r4, r2]
 800c0fc:	b107      	cbz	r7, 800c100 <rshift+0x68>
 800c0fe:	3304      	adds	r3, #4
 800c100:	1b1a      	subs	r2, r3, r4
 800c102:	42a3      	cmp	r3, r4
 800c104:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c108:	bf08      	it	eq
 800c10a:	2300      	moveq	r3, #0
 800c10c:	6102      	str	r2, [r0, #16]
 800c10e:	bf08      	it	eq
 800c110:	6143      	streq	r3, [r0, #20]
 800c112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c116:	f8dc c000 	ldr.w	ip, [ip]
 800c11a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c11e:	ea4c 0707 	orr.w	r7, ip, r7
 800c122:	f849 7b04 	str.w	r7, [r9], #4
 800c126:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c12a:	40cf      	lsrs	r7, r1
 800c12c:	e7da      	b.n	800c0e4 <rshift+0x4c>
 800c12e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c132:	f847 cf04 	str.w	ip, [r7, #4]!
 800c136:	e7c3      	b.n	800c0c0 <rshift+0x28>
 800c138:	4623      	mov	r3, r4
 800c13a:	e7e1      	b.n	800c100 <rshift+0x68>

0800c13c <__hexdig_fun>:
 800c13c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c140:	2b09      	cmp	r3, #9
 800c142:	d802      	bhi.n	800c14a <__hexdig_fun+0xe>
 800c144:	3820      	subs	r0, #32
 800c146:	b2c0      	uxtb	r0, r0
 800c148:	4770      	bx	lr
 800c14a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c14e:	2b05      	cmp	r3, #5
 800c150:	d801      	bhi.n	800c156 <__hexdig_fun+0x1a>
 800c152:	3847      	subs	r0, #71	; 0x47
 800c154:	e7f7      	b.n	800c146 <__hexdig_fun+0xa>
 800c156:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c15a:	2b05      	cmp	r3, #5
 800c15c:	d801      	bhi.n	800c162 <__hexdig_fun+0x26>
 800c15e:	3827      	subs	r0, #39	; 0x27
 800c160:	e7f1      	b.n	800c146 <__hexdig_fun+0xa>
 800c162:	2000      	movs	r0, #0
 800c164:	4770      	bx	lr
	...

0800c168 <__gethex>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	ed2d 8b02 	vpush	{d8}
 800c170:	b089      	sub	sp, #36	; 0x24
 800c172:	ee08 0a10 	vmov	s16, r0
 800c176:	9304      	str	r3, [sp, #16]
 800c178:	4bbc      	ldr	r3, [pc, #752]	; (800c46c <__gethex+0x304>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	9301      	str	r3, [sp, #4]
 800c17e:	4618      	mov	r0, r3
 800c180:	468b      	mov	fp, r1
 800c182:	4690      	mov	r8, r2
 800c184:	f7f4 f844 	bl	8000210 <strlen>
 800c188:	9b01      	ldr	r3, [sp, #4]
 800c18a:	f8db 2000 	ldr.w	r2, [fp]
 800c18e:	4403      	add	r3, r0
 800c190:	4682      	mov	sl, r0
 800c192:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c196:	9305      	str	r3, [sp, #20]
 800c198:	1c93      	adds	r3, r2, #2
 800c19a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c19e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c1a2:	32fe      	adds	r2, #254	; 0xfe
 800c1a4:	18d1      	adds	r1, r2, r3
 800c1a6:	461f      	mov	r7, r3
 800c1a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c1ac:	9100      	str	r1, [sp, #0]
 800c1ae:	2830      	cmp	r0, #48	; 0x30
 800c1b0:	d0f8      	beq.n	800c1a4 <__gethex+0x3c>
 800c1b2:	f7ff ffc3 	bl	800c13c <__hexdig_fun>
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d13a      	bne.n	800c232 <__gethex+0xca>
 800c1bc:	9901      	ldr	r1, [sp, #4]
 800c1be:	4652      	mov	r2, sl
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f001 fd6b 	bl	800dc9c <strncmp>
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d168      	bne.n	800c29e <__gethex+0x136>
 800c1cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c1d0:	eb07 060a 	add.w	r6, r7, sl
 800c1d4:	f7ff ffb2 	bl	800c13c <__hexdig_fun>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d062      	beq.n	800c2a2 <__gethex+0x13a>
 800c1dc:	4633      	mov	r3, r6
 800c1de:	7818      	ldrb	r0, [r3, #0]
 800c1e0:	2830      	cmp	r0, #48	; 0x30
 800c1e2:	461f      	mov	r7, r3
 800c1e4:	f103 0301 	add.w	r3, r3, #1
 800c1e8:	d0f9      	beq.n	800c1de <__gethex+0x76>
 800c1ea:	f7ff ffa7 	bl	800c13c <__hexdig_fun>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	fab0 f480 	clz	r4, r0
 800c1f4:	0964      	lsrs	r4, r4, #5
 800c1f6:	4635      	mov	r5, r6
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	463a      	mov	r2, r7
 800c1fc:	4616      	mov	r6, r2
 800c1fe:	3201      	adds	r2, #1
 800c200:	7830      	ldrb	r0, [r6, #0]
 800c202:	f7ff ff9b 	bl	800c13c <__hexdig_fun>
 800c206:	2800      	cmp	r0, #0
 800c208:	d1f8      	bne.n	800c1fc <__gethex+0x94>
 800c20a:	9901      	ldr	r1, [sp, #4]
 800c20c:	4652      	mov	r2, sl
 800c20e:	4630      	mov	r0, r6
 800c210:	f001 fd44 	bl	800dc9c <strncmp>
 800c214:	b980      	cbnz	r0, 800c238 <__gethex+0xd0>
 800c216:	b94d      	cbnz	r5, 800c22c <__gethex+0xc4>
 800c218:	eb06 050a 	add.w	r5, r6, sl
 800c21c:	462a      	mov	r2, r5
 800c21e:	4616      	mov	r6, r2
 800c220:	3201      	adds	r2, #1
 800c222:	7830      	ldrb	r0, [r6, #0]
 800c224:	f7ff ff8a 	bl	800c13c <__hexdig_fun>
 800c228:	2800      	cmp	r0, #0
 800c22a:	d1f8      	bne.n	800c21e <__gethex+0xb6>
 800c22c:	1bad      	subs	r5, r5, r6
 800c22e:	00ad      	lsls	r5, r5, #2
 800c230:	e004      	b.n	800c23c <__gethex+0xd4>
 800c232:	2400      	movs	r4, #0
 800c234:	4625      	mov	r5, r4
 800c236:	e7e0      	b.n	800c1fa <__gethex+0x92>
 800c238:	2d00      	cmp	r5, #0
 800c23a:	d1f7      	bne.n	800c22c <__gethex+0xc4>
 800c23c:	7833      	ldrb	r3, [r6, #0]
 800c23e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c242:	2b50      	cmp	r3, #80	; 0x50
 800c244:	d13b      	bne.n	800c2be <__gethex+0x156>
 800c246:	7873      	ldrb	r3, [r6, #1]
 800c248:	2b2b      	cmp	r3, #43	; 0x2b
 800c24a:	d02c      	beq.n	800c2a6 <__gethex+0x13e>
 800c24c:	2b2d      	cmp	r3, #45	; 0x2d
 800c24e:	d02e      	beq.n	800c2ae <__gethex+0x146>
 800c250:	1c71      	adds	r1, r6, #1
 800c252:	f04f 0900 	mov.w	r9, #0
 800c256:	7808      	ldrb	r0, [r1, #0]
 800c258:	f7ff ff70 	bl	800c13c <__hexdig_fun>
 800c25c:	1e43      	subs	r3, r0, #1
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	2b18      	cmp	r3, #24
 800c262:	d82c      	bhi.n	800c2be <__gethex+0x156>
 800c264:	f1a0 0210 	sub.w	r2, r0, #16
 800c268:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c26c:	f7ff ff66 	bl	800c13c <__hexdig_fun>
 800c270:	1e43      	subs	r3, r0, #1
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b18      	cmp	r3, #24
 800c276:	d91d      	bls.n	800c2b4 <__gethex+0x14c>
 800c278:	f1b9 0f00 	cmp.w	r9, #0
 800c27c:	d000      	beq.n	800c280 <__gethex+0x118>
 800c27e:	4252      	negs	r2, r2
 800c280:	4415      	add	r5, r2
 800c282:	f8cb 1000 	str.w	r1, [fp]
 800c286:	b1e4      	cbz	r4, 800c2c2 <__gethex+0x15a>
 800c288:	9b00      	ldr	r3, [sp, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bf14      	ite	ne
 800c28e:	2700      	movne	r7, #0
 800c290:	2706      	moveq	r7, #6
 800c292:	4638      	mov	r0, r7
 800c294:	b009      	add	sp, #36	; 0x24
 800c296:	ecbd 8b02 	vpop	{d8}
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	463e      	mov	r6, r7
 800c2a0:	4625      	mov	r5, r4
 800c2a2:	2401      	movs	r4, #1
 800c2a4:	e7ca      	b.n	800c23c <__gethex+0xd4>
 800c2a6:	f04f 0900 	mov.w	r9, #0
 800c2aa:	1cb1      	adds	r1, r6, #2
 800c2ac:	e7d3      	b.n	800c256 <__gethex+0xee>
 800c2ae:	f04f 0901 	mov.w	r9, #1
 800c2b2:	e7fa      	b.n	800c2aa <__gethex+0x142>
 800c2b4:	230a      	movs	r3, #10
 800c2b6:	fb03 0202 	mla	r2, r3, r2, r0
 800c2ba:	3a10      	subs	r2, #16
 800c2bc:	e7d4      	b.n	800c268 <__gethex+0x100>
 800c2be:	4631      	mov	r1, r6
 800c2c0:	e7df      	b.n	800c282 <__gethex+0x11a>
 800c2c2:	1bf3      	subs	r3, r6, r7
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	2b07      	cmp	r3, #7
 800c2ca:	dc0b      	bgt.n	800c2e4 <__gethex+0x17c>
 800c2cc:	ee18 0a10 	vmov	r0, s16
 800c2d0:	f000 fa90 	bl	800c7f4 <_Balloc>
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	b940      	cbnz	r0, 800c2ea <__gethex+0x182>
 800c2d8:	4b65      	ldr	r3, [pc, #404]	; (800c470 <__gethex+0x308>)
 800c2da:	4602      	mov	r2, r0
 800c2dc:	21de      	movs	r1, #222	; 0xde
 800c2de:	4865      	ldr	r0, [pc, #404]	; (800c474 <__gethex+0x30c>)
 800c2e0:	f001 fdb4 	bl	800de4c <__assert_func>
 800c2e4:	3101      	adds	r1, #1
 800c2e6:	105b      	asrs	r3, r3, #1
 800c2e8:	e7ee      	b.n	800c2c8 <__gethex+0x160>
 800c2ea:	f100 0914 	add.w	r9, r0, #20
 800c2ee:	f04f 0b00 	mov.w	fp, #0
 800c2f2:	f1ca 0301 	rsb	r3, sl, #1
 800c2f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c2fa:	f8cd b000 	str.w	fp, [sp]
 800c2fe:	9306      	str	r3, [sp, #24]
 800c300:	42b7      	cmp	r7, r6
 800c302:	d340      	bcc.n	800c386 <__gethex+0x21e>
 800c304:	9802      	ldr	r0, [sp, #8]
 800c306:	9b00      	ldr	r3, [sp, #0]
 800c308:	f840 3b04 	str.w	r3, [r0], #4
 800c30c:	eba0 0009 	sub.w	r0, r0, r9
 800c310:	1080      	asrs	r0, r0, #2
 800c312:	0146      	lsls	r6, r0, #5
 800c314:	6120      	str	r0, [r4, #16]
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fb62 	bl	800c9e0 <__hi0bits>
 800c31c:	1a30      	subs	r0, r6, r0
 800c31e:	f8d8 6000 	ldr.w	r6, [r8]
 800c322:	42b0      	cmp	r0, r6
 800c324:	dd63      	ble.n	800c3ee <__gethex+0x286>
 800c326:	1b87      	subs	r7, r0, r6
 800c328:	4639      	mov	r1, r7
 800c32a:	4620      	mov	r0, r4
 800c32c:	f000 fefc 	bl	800d128 <__any_on>
 800c330:	4682      	mov	sl, r0
 800c332:	b1a8      	cbz	r0, 800c360 <__gethex+0x1f8>
 800c334:	1e7b      	subs	r3, r7, #1
 800c336:	1159      	asrs	r1, r3, #5
 800c338:	f003 021f 	and.w	r2, r3, #31
 800c33c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c340:	f04f 0a01 	mov.w	sl, #1
 800c344:	fa0a f202 	lsl.w	r2, sl, r2
 800c348:	420a      	tst	r2, r1
 800c34a:	d009      	beq.n	800c360 <__gethex+0x1f8>
 800c34c:	4553      	cmp	r3, sl
 800c34e:	dd05      	ble.n	800c35c <__gethex+0x1f4>
 800c350:	1eb9      	subs	r1, r7, #2
 800c352:	4620      	mov	r0, r4
 800c354:	f000 fee8 	bl	800d128 <__any_on>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d145      	bne.n	800c3e8 <__gethex+0x280>
 800c35c:	f04f 0a02 	mov.w	sl, #2
 800c360:	4639      	mov	r1, r7
 800c362:	4620      	mov	r0, r4
 800c364:	f7ff fe98 	bl	800c098 <rshift>
 800c368:	443d      	add	r5, r7
 800c36a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c36e:	42ab      	cmp	r3, r5
 800c370:	da4c      	bge.n	800c40c <__gethex+0x2a4>
 800c372:	ee18 0a10 	vmov	r0, s16
 800c376:	4621      	mov	r1, r4
 800c378:	f000 fa7c 	bl	800c874 <_Bfree>
 800c37c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c37e:	2300      	movs	r3, #0
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	27a3      	movs	r7, #163	; 0xa3
 800c384:	e785      	b.n	800c292 <__gethex+0x12a>
 800c386:	1e73      	subs	r3, r6, #1
 800c388:	9a05      	ldr	r2, [sp, #20]
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c390:	4293      	cmp	r3, r2
 800c392:	d019      	beq.n	800c3c8 <__gethex+0x260>
 800c394:	f1bb 0f20 	cmp.w	fp, #32
 800c398:	d107      	bne.n	800c3aa <__gethex+0x242>
 800c39a:	9b02      	ldr	r3, [sp, #8]
 800c39c:	9a00      	ldr	r2, [sp, #0]
 800c39e:	f843 2b04 	str.w	r2, [r3], #4
 800c3a2:	9302      	str	r3, [sp, #8]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	469b      	mov	fp, r3
 800c3aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c3ae:	f7ff fec5 	bl	800c13c <__hexdig_fun>
 800c3b2:	9b00      	ldr	r3, [sp, #0]
 800c3b4:	f000 000f 	and.w	r0, r0, #15
 800c3b8:	fa00 f00b 	lsl.w	r0, r0, fp
 800c3bc:	4303      	orrs	r3, r0
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	f10b 0b04 	add.w	fp, fp, #4
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	e00d      	b.n	800c3e4 <__gethex+0x27c>
 800c3c8:	9b03      	ldr	r3, [sp, #12]
 800c3ca:	9a06      	ldr	r2, [sp, #24]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	42bb      	cmp	r3, r7
 800c3d0:	d3e0      	bcc.n	800c394 <__gethex+0x22c>
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	9901      	ldr	r1, [sp, #4]
 800c3d6:	9307      	str	r3, [sp, #28]
 800c3d8:	4652      	mov	r2, sl
 800c3da:	f001 fc5f 	bl	800dc9c <strncmp>
 800c3de:	9b07      	ldr	r3, [sp, #28]
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d1d7      	bne.n	800c394 <__gethex+0x22c>
 800c3e4:	461e      	mov	r6, r3
 800c3e6:	e78b      	b.n	800c300 <__gethex+0x198>
 800c3e8:	f04f 0a03 	mov.w	sl, #3
 800c3ec:	e7b8      	b.n	800c360 <__gethex+0x1f8>
 800c3ee:	da0a      	bge.n	800c406 <__gethex+0x29e>
 800c3f0:	1a37      	subs	r7, r6, r0
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	ee18 0a10 	vmov	r0, s16
 800c3f8:	463a      	mov	r2, r7
 800c3fa:	f000 fc57 	bl	800ccac <__lshift>
 800c3fe:	1bed      	subs	r5, r5, r7
 800c400:	4604      	mov	r4, r0
 800c402:	f100 0914 	add.w	r9, r0, #20
 800c406:	f04f 0a00 	mov.w	sl, #0
 800c40a:	e7ae      	b.n	800c36a <__gethex+0x202>
 800c40c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c410:	42a8      	cmp	r0, r5
 800c412:	dd72      	ble.n	800c4fa <__gethex+0x392>
 800c414:	1b45      	subs	r5, r0, r5
 800c416:	42ae      	cmp	r6, r5
 800c418:	dc36      	bgt.n	800c488 <__gethex+0x320>
 800c41a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d02a      	beq.n	800c478 <__gethex+0x310>
 800c422:	2b03      	cmp	r3, #3
 800c424:	d02c      	beq.n	800c480 <__gethex+0x318>
 800c426:	2b01      	cmp	r3, #1
 800c428:	d115      	bne.n	800c456 <__gethex+0x2ee>
 800c42a:	42ae      	cmp	r6, r5
 800c42c:	d113      	bne.n	800c456 <__gethex+0x2ee>
 800c42e:	2e01      	cmp	r6, #1
 800c430:	d10b      	bne.n	800c44a <__gethex+0x2e2>
 800c432:	9a04      	ldr	r2, [sp, #16]
 800c434:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c438:	6013      	str	r3, [r2, #0]
 800c43a:	2301      	movs	r3, #1
 800c43c:	6123      	str	r3, [r4, #16]
 800c43e:	f8c9 3000 	str.w	r3, [r9]
 800c442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c444:	2762      	movs	r7, #98	; 0x62
 800c446:	601c      	str	r4, [r3, #0]
 800c448:	e723      	b.n	800c292 <__gethex+0x12a>
 800c44a:	1e71      	subs	r1, r6, #1
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 fe6b 	bl	800d128 <__any_on>
 800c452:	2800      	cmp	r0, #0
 800c454:	d1ed      	bne.n	800c432 <__gethex+0x2ca>
 800c456:	ee18 0a10 	vmov	r0, s16
 800c45a:	4621      	mov	r1, r4
 800c45c:	f000 fa0a 	bl	800c874 <_Bfree>
 800c460:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c462:	2300      	movs	r3, #0
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	2750      	movs	r7, #80	; 0x50
 800c468:	e713      	b.n	800c292 <__gethex+0x12a>
 800c46a:	bf00      	nop
 800c46c:	0800ebc0 	.word	0x0800ebc0
 800c470:	0800eb44 	.word	0x0800eb44
 800c474:	0800eb55 	.word	0x0800eb55
 800c478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1eb      	bne.n	800c456 <__gethex+0x2ee>
 800c47e:	e7d8      	b.n	800c432 <__gethex+0x2ca>
 800c480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1d5      	bne.n	800c432 <__gethex+0x2ca>
 800c486:	e7e6      	b.n	800c456 <__gethex+0x2ee>
 800c488:	1e6f      	subs	r7, r5, #1
 800c48a:	f1ba 0f00 	cmp.w	sl, #0
 800c48e:	d131      	bne.n	800c4f4 <__gethex+0x38c>
 800c490:	b127      	cbz	r7, 800c49c <__gethex+0x334>
 800c492:	4639      	mov	r1, r7
 800c494:	4620      	mov	r0, r4
 800c496:	f000 fe47 	bl	800d128 <__any_on>
 800c49a:	4682      	mov	sl, r0
 800c49c:	117b      	asrs	r3, r7, #5
 800c49e:	2101      	movs	r1, #1
 800c4a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c4a4:	f007 071f 	and.w	r7, r7, #31
 800c4a8:	fa01 f707 	lsl.w	r7, r1, r7
 800c4ac:	421f      	tst	r7, r3
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	bf18      	it	ne
 800c4b4:	f04a 0a02 	orrne.w	sl, sl, #2
 800c4b8:	1b76      	subs	r6, r6, r5
 800c4ba:	f7ff fded 	bl	800c098 <rshift>
 800c4be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c4c2:	2702      	movs	r7, #2
 800c4c4:	f1ba 0f00 	cmp.w	sl, #0
 800c4c8:	d048      	beq.n	800c55c <__gethex+0x3f4>
 800c4ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d015      	beq.n	800c4fe <__gethex+0x396>
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	d017      	beq.n	800c506 <__gethex+0x39e>
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d109      	bne.n	800c4ee <__gethex+0x386>
 800c4da:	f01a 0f02 	tst.w	sl, #2
 800c4de:	d006      	beq.n	800c4ee <__gethex+0x386>
 800c4e0:	f8d9 0000 	ldr.w	r0, [r9]
 800c4e4:	ea4a 0a00 	orr.w	sl, sl, r0
 800c4e8:	f01a 0f01 	tst.w	sl, #1
 800c4ec:	d10e      	bne.n	800c50c <__gethex+0x3a4>
 800c4ee:	f047 0710 	orr.w	r7, r7, #16
 800c4f2:	e033      	b.n	800c55c <__gethex+0x3f4>
 800c4f4:	f04f 0a01 	mov.w	sl, #1
 800c4f8:	e7d0      	b.n	800c49c <__gethex+0x334>
 800c4fa:	2701      	movs	r7, #1
 800c4fc:	e7e2      	b.n	800c4c4 <__gethex+0x35c>
 800c4fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c500:	f1c3 0301 	rsb	r3, r3, #1
 800c504:	9315      	str	r3, [sp, #84]	; 0x54
 800c506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d0f0      	beq.n	800c4ee <__gethex+0x386>
 800c50c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c510:	f104 0314 	add.w	r3, r4, #20
 800c514:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c518:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c51c:	f04f 0c00 	mov.w	ip, #0
 800c520:	4618      	mov	r0, r3
 800c522:	f853 2b04 	ldr.w	r2, [r3], #4
 800c526:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c52a:	d01c      	beq.n	800c566 <__gethex+0x3fe>
 800c52c:	3201      	adds	r2, #1
 800c52e:	6002      	str	r2, [r0, #0]
 800c530:	2f02      	cmp	r7, #2
 800c532:	f104 0314 	add.w	r3, r4, #20
 800c536:	d13f      	bne.n	800c5b8 <__gethex+0x450>
 800c538:	f8d8 2000 	ldr.w	r2, [r8]
 800c53c:	3a01      	subs	r2, #1
 800c53e:	42b2      	cmp	r2, r6
 800c540:	d10a      	bne.n	800c558 <__gethex+0x3f0>
 800c542:	1171      	asrs	r1, r6, #5
 800c544:	2201      	movs	r2, #1
 800c546:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c54a:	f006 061f 	and.w	r6, r6, #31
 800c54e:	fa02 f606 	lsl.w	r6, r2, r6
 800c552:	421e      	tst	r6, r3
 800c554:	bf18      	it	ne
 800c556:	4617      	movne	r7, r2
 800c558:	f047 0720 	orr.w	r7, r7, #32
 800c55c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c55e:	601c      	str	r4, [r3, #0]
 800c560:	9b04      	ldr	r3, [sp, #16]
 800c562:	601d      	str	r5, [r3, #0]
 800c564:	e695      	b.n	800c292 <__gethex+0x12a>
 800c566:	4299      	cmp	r1, r3
 800c568:	f843 cc04 	str.w	ip, [r3, #-4]
 800c56c:	d8d8      	bhi.n	800c520 <__gethex+0x3b8>
 800c56e:	68a3      	ldr	r3, [r4, #8]
 800c570:	459b      	cmp	fp, r3
 800c572:	db19      	blt.n	800c5a8 <__gethex+0x440>
 800c574:	6861      	ldr	r1, [r4, #4]
 800c576:	ee18 0a10 	vmov	r0, s16
 800c57a:	3101      	adds	r1, #1
 800c57c:	f000 f93a 	bl	800c7f4 <_Balloc>
 800c580:	4681      	mov	r9, r0
 800c582:	b918      	cbnz	r0, 800c58c <__gethex+0x424>
 800c584:	4b1a      	ldr	r3, [pc, #104]	; (800c5f0 <__gethex+0x488>)
 800c586:	4602      	mov	r2, r0
 800c588:	2184      	movs	r1, #132	; 0x84
 800c58a:	e6a8      	b.n	800c2de <__gethex+0x176>
 800c58c:	6922      	ldr	r2, [r4, #16]
 800c58e:	3202      	adds	r2, #2
 800c590:	f104 010c 	add.w	r1, r4, #12
 800c594:	0092      	lsls	r2, r2, #2
 800c596:	300c      	adds	r0, #12
 800c598:	f000 f91e 	bl	800c7d8 <memcpy>
 800c59c:	4621      	mov	r1, r4
 800c59e:	ee18 0a10 	vmov	r0, s16
 800c5a2:	f000 f967 	bl	800c874 <_Bfree>
 800c5a6:	464c      	mov	r4, r9
 800c5a8:	6923      	ldr	r3, [r4, #16]
 800c5aa:	1c5a      	adds	r2, r3, #1
 800c5ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5b0:	6122      	str	r2, [r4, #16]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	615a      	str	r2, [r3, #20]
 800c5b6:	e7bb      	b.n	800c530 <__gethex+0x3c8>
 800c5b8:	6922      	ldr	r2, [r4, #16]
 800c5ba:	455a      	cmp	r2, fp
 800c5bc:	dd0b      	ble.n	800c5d6 <__gethex+0x46e>
 800c5be:	2101      	movs	r1, #1
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f7ff fd69 	bl	800c098 <rshift>
 800c5c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5ca:	3501      	adds	r5, #1
 800c5cc:	42ab      	cmp	r3, r5
 800c5ce:	f6ff aed0 	blt.w	800c372 <__gethex+0x20a>
 800c5d2:	2701      	movs	r7, #1
 800c5d4:	e7c0      	b.n	800c558 <__gethex+0x3f0>
 800c5d6:	f016 061f 	ands.w	r6, r6, #31
 800c5da:	d0fa      	beq.n	800c5d2 <__gethex+0x46a>
 800c5dc:	449a      	add	sl, r3
 800c5de:	f1c6 0620 	rsb	r6, r6, #32
 800c5e2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c5e6:	f000 f9fb 	bl	800c9e0 <__hi0bits>
 800c5ea:	42b0      	cmp	r0, r6
 800c5ec:	dbe7      	blt.n	800c5be <__gethex+0x456>
 800c5ee:	e7f0      	b.n	800c5d2 <__gethex+0x46a>
 800c5f0:	0800eb44 	.word	0x0800eb44

0800c5f4 <L_shift>:
 800c5f4:	f1c2 0208 	rsb	r2, r2, #8
 800c5f8:	0092      	lsls	r2, r2, #2
 800c5fa:	b570      	push	{r4, r5, r6, lr}
 800c5fc:	f1c2 0620 	rsb	r6, r2, #32
 800c600:	6843      	ldr	r3, [r0, #4]
 800c602:	6804      	ldr	r4, [r0, #0]
 800c604:	fa03 f506 	lsl.w	r5, r3, r6
 800c608:	432c      	orrs	r4, r5
 800c60a:	40d3      	lsrs	r3, r2
 800c60c:	6004      	str	r4, [r0, #0]
 800c60e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c612:	4288      	cmp	r0, r1
 800c614:	d3f4      	bcc.n	800c600 <L_shift+0xc>
 800c616:	bd70      	pop	{r4, r5, r6, pc}

0800c618 <__match>:
 800c618:	b530      	push	{r4, r5, lr}
 800c61a:	6803      	ldr	r3, [r0, #0]
 800c61c:	3301      	adds	r3, #1
 800c61e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c622:	b914      	cbnz	r4, 800c62a <__match+0x12>
 800c624:	6003      	str	r3, [r0, #0]
 800c626:	2001      	movs	r0, #1
 800c628:	bd30      	pop	{r4, r5, pc}
 800c62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c62e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c632:	2d19      	cmp	r5, #25
 800c634:	bf98      	it	ls
 800c636:	3220      	addls	r2, #32
 800c638:	42a2      	cmp	r2, r4
 800c63a:	d0f0      	beq.n	800c61e <__match+0x6>
 800c63c:	2000      	movs	r0, #0
 800c63e:	e7f3      	b.n	800c628 <__match+0x10>

0800c640 <__hexnan>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	680b      	ldr	r3, [r1, #0]
 800c646:	6801      	ldr	r1, [r0, #0]
 800c648:	115e      	asrs	r6, r3, #5
 800c64a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c64e:	f013 031f 	ands.w	r3, r3, #31
 800c652:	b087      	sub	sp, #28
 800c654:	bf18      	it	ne
 800c656:	3604      	addne	r6, #4
 800c658:	2500      	movs	r5, #0
 800c65a:	1f37      	subs	r7, r6, #4
 800c65c:	4682      	mov	sl, r0
 800c65e:	4690      	mov	r8, r2
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	f846 5c04 	str.w	r5, [r6, #-4]
 800c666:	46b9      	mov	r9, r7
 800c668:	463c      	mov	r4, r7
 800c66a:	9502      	str	r5, [sp, #8]
 800c66c:	46ab      	mov	fp, r5
 800c66e:	784a      	ldrb	r2, [r1, #1]
 800c670:	1c4b      	adds	r3, r1, #1
 800c672:	9303      	str	r3, [sp, #12]
 800c674:	b342      	cbz	r2, 800c6c8 <__hexnan+0x88>
 800c676:	4610      	mov	r0, r2
 800c678:	9105      	str	r1, [sp, #20]
 800c67a:	9204      	str	r2, [sp, #16]
 800c67c:	f7ff fd5e 	bl	800c13c <__hexdig_fun>
 800c680:	2800      	cmp	r0, #0
 800c682:	d14f      	bne.n	800c724 <__hexnan+0xe4>
 800c684:	9a04      	ldr	r2, [sp, #16]
 800c686:	9905      	ldr	r1, [sp, #20]
 800c688:	2a20      	cmp	r2, #32
 800c68a:	d818      	bhi.n	800c6be <__hexnan+0x7e>
 800c68c:	9b02      	ldr	r3, [sp, #8]
 800c68e:	459b      	cmp	fp, r3
 800c690:	dd13      	ble.n	800c6ba <__hexnan+0x7a>
 800c692:	454c      	cmp	r4, r9
 800c694:	d206      	bcs.n	800c6a4 <__hexnan+0x64>
 800c696:	2d07      	cmp	r5, #7
 800c698:	dc04      	bgt.n	800c6a4 <__hexnan+0x64>
 800c69a:	462a      	mov	r2, r5
 800c69c:	4649      	mov	r1, r9
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f7ff ffa8 	bl	800c5f4 <L_shift>
 800c6a4:	4544      	cmp	r4, r8
 800c6a6:	d950      	bls.n	800c74a <__hexnan+0x10a>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f1a4 0904 	sub.w	r9, r4, #4
 800c6ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6b2:	f8cd b008 	str.w	fp, [sp, #8]
 800c6b6:	464c      	mov	r4, r9
 800c6b8:	461d      	mov	r5, r3
 800c6ba:	9903      	ldr	r1, [sp, #12]
 800c6bc:	e7d7      	b.n	800c66e <__hexnan+0x2e>
 800c6be:	2a29      	cmp	r2, #41	; 0x29
 800c6c0:	d156      	bne.n	800c770 <__hexnan+0x130>
 800c6c2:	3102      	adds	r1, #2
 800c6c4:	f8ca 1000 	str.w	r1, [sl]
 800c6c8:	f1bb 0f00 	cmp.w	fp, #0
 800c6cc:	d050      	beq.n	800c770 <__hexnan+0x130>
 800c6ce:	454c      	cmp	r4, r9
 800c6d0:	d206      	bcs.n	800c6e0 <__hexnan+0xa0>
 800c6d2:	2d07      	cmp	r5, #7
 800c6d4:	dc04      	bgt.n	800c6e0 <__hexnan+0xa0>
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	4649      	mov	r1, r9
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7ff ff8a 	bl	800c5f4 <L_shift>
 800c6e0:	4544      	cmp	r4, r8
 800c6e2:	d934      	bls.n	800c74e <__hexnan+0x10e>
 800c6e4:	f1a8 0204 	sub.w	r2, r8, #4
 800c6e8:	4623      	mov	r3, r4
 800c6ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6f2:	429f      	cmp	r7, r3
 800c6f4:	d2f9      	bcs.n	800c6ea <__hexnan+0xaa>
 800c6f6:	1b3b      	subs	r3, r7, r4
 800c6f8:	f023 0303 	bic.w	r3, r3, #3
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	3401      	adds	r4, #1
 800c700:	3e03      	subs	r6, #3
 800c702:	42b4      	cmp	r4, r6
 800c704:	bf88      	it	hi
 800c706:	2304      	movhi	r3, #4
 800c708:	4443      	add	r3, r8
 800c70a:	2200      	movs	r2, #0
 800c70c:	f843 2b04 	str.w	r2, [r3], #4
 800c710:	429f      	cmp	r7, r3
 800c712:	d2fb      	bcs.n	800c70c <__hexnan+0xcc>
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	b91b      	cbnz	r3, 800c720 <__hexnan+0xe0>
 800c718:	4547      	cmp	r7, r8
 800c71a:	d127      	bne.n	800c76c <__hexnan+0x12c>
 800c71c:	2301      	movs	r3, #1
 800c71e:	603b      	str	r3, [r7, #0]
 800c720:	2005      	movs	r0, #5
 800c722:	e026      	b.n	800c772 <__hexnan+0x132>
 800c724:	3501      	adds	r5, #1
 800c726:	2d08      	cmp	r5, #8
 800c728:	f10b 0b01 	add.w	fp, fp, #1
 800c72c:	dd06      	ble.n	800c73c <__hexnan+0xfc>
 800c72e:	4544      	cmp	r4, r8
 800c730:	d9c3      	bls.n	800c6ba <__hexnan+0x7a>
 800c732:	2300      	movs	r3, #0
 800c734:	f844 3c04 	str.w	r3, [r4, #-4]
 800c738:	2501      	movs	r5, #1
 800c73a:	3c04      	subs	r4, #4
 800c73c:	6822      	ldr	r2, [r4, #0]
 800c73e:	f000 000f 	and.w	r0, r0, #15
 800c742:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c746:	6022      	str	r2, [r4, #0]
 800c748:	e7b7      	b.n	800c6ba <__hexnan+0x7a>
 800c74a:	2508      	movs	r5, #8
 800c74c:	e7b5      	b.n	800c6ba <__hexnan+0x7a>
 800c74e:	9b01      	ldr	r3, [sp, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0df      	beq.n	800c714 <__hexnan+0xd4>
 800c754:	f04f 32ff 	mov.w	r2, #4294967295
 800c758:	f1c3 0320 	rsb	r3, r3, #32
 800c75c:	fa22 f303 	lsr.w	r3, r2, r3
 800c760:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c764:	401a      	ands	r2, r3
 800c766:	f846 2c04 	str.w	r2, [r6, #-4]
 800c76a:	e7d3      	b.n	800c714 <__hexnan+0xd4>
 800c76c:	3f04      	subs	r7, #4
 800c76e:	e7d1      	b.n	800c714 <__hexnan+0xd4>
 800c770:	2004      	movs	r0, #4
 800c772:	b007      	add	sp, #28
 800c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c778 <_localeconv_r>:
 800c778:	4800      	ldr	r0, [pc, #0]	; (800c77c <_localeconv_r+0x4>)
 800c77a:	4770      	bx	lr
 800c77c:	200001c8 	.word	0x200001c8

0800c780 <_lseek_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d07      	ldr	r5, [pc, #28]	; (800c7a0 <_lseek_r+0x20>)
 800c784:	4604      	mov	r4, r0
 800c786:	4608      	mov	r0, r1
 800c788:	4611      	mov	r1, r2
 800c78a:	2200      	movs	r2, #0
 800c78c:	602a      	str	r2, [r5, #0]
 800c78e:	461a      	mov	r2, r3
 800c790:	f7f5 fdd8 	bl	8002344 <_lseek>
 800c794:	1c43      	adds	r3, r0, #1
 800c796:	d102      	bne.n	800c79e <_lseek_r+0x1e>
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	b103      	cbz	r3, 800c79e <_lseek_r+0x1e>
 800c79c:	6023      	str	r3, [r4, #0]
 800c79e:	bd38      	pop	{r3, r4, r5, pc}
 800c7a0:	2000064c 	.word	0x2000064c

0800c7a4 <malloc>:
 800c7a4:	4b02      	ldr	r3, [pc, #8]	; (800c7b0 <malloc+0xc>)
 800c7a6:	4601      	mov	r1, r0
 800c7a8:	6818      	ldr	r0, [r3, #0]
 800c7aa:	f000 bd3d 	b.w	800d228 <_malloc_r>
 800c7ae:	bf00      	nop
 800c7b0:	20000070 	.word	0x20000070

0800c7b4 <__ascii_mbtowc>:
 800c7b4:	b082      	sub	sp, #8
 800c7b6:	b901      	cbnz	r1, 800c7ba <__ascii_mbtowc+0x6>
 800c7b8:	a901      	add	r1, sp, #4
 800c7ba:	b142      	cbz	r2, 800c7ce <__ascii_mbtowc+0x1a>
 800c7bc:	b14b      	cbz	r3, 800c7d2 <__ascii_mbtowc+0x1e>
 800c7be:	7813      	ldrb	r3, [r2, #0]
 800c7c0:	600b      	str	r3, [r1, #0]
 800c7c2:	7812      	ldrb	r2, [r2, #0]
 800c7c4:	1e10      	subs	r0, r2, #0
 800c7c6:	bf18      	it	ne
 800c7c8:	2001      	movne	r0, #1
 800c7ca:	b002      	add	sp, #8
 800c7cc:	4770      	bx	lr
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	e7fb      	b.n	800c7ca <__ascii_mbtowc+0x16>
 800c7d2:	f06f 0001 	mvn.w	r0, #1
 800c7d6:	e7f8      	b.n	800c7ca <__ascii_mbtowc+0x16>

0800c7d8 <memcpy>:
 800c7d8:	440a      	add	r2, r1
 800c7da:	4291      	cmp	r1, r2
 800c7dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7e0:	d100      	bne.n	800c7e4 <memcpy+0xc>
 800c7e2:	4770      	bx	lr
 800c7e4:	b510      	push	{r4, lr}
 800c7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ee:	4291      	cmp	r1, r2
 800c7f0:	d1f9      	bne.n	800c7e6 <memcpy+0xe>
 800c7f2:	bd10      	pop	{r4, pc}

0800c7f4 <_Balloc>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	460d      	mov	r5, r1
 800c7fc:	b976      	cbnz	r6, 800c81c <_Balloc+0x28>
 800c7fe:	2010      	movs	r0, #16
 800c800:	f7ff ffd0 	bl	800c7a4 <malloc>
 800c804:	4602      	mov	r2, r0
 800c806:	6260      	str	r0, [r4, #36]	; 0x24
 800c808:	b920      	cbnz	r0, 800c814 <_Balloc+0x20>
 800c80a:	4b18      	ldr	r3, [pc, #96]	; (800c86c <_Balloc+0x78>)
 800c80c:	4818      	ldr	r0, [pc, #96]	; (800c870 <_Balloc+0x7c>)
 800c80e:	2166      	movs	r1, #102	; 0x66
 800c810:	f001 fb1c 	bl	800de4c <__assert_func>
 800c814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c818:	6006      	str	r6, [r0, #0]
 800c81a:	60c6      	str	r6, [r0, #12]
 800c81c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c81e:	68f3      	ldr	r3, [r6, #12]
 800c820:	b183      	cbz	r3, 800c844 <_Balloc+0x50>
 800c822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c82a:	b9b8      	cbnz	r0, 800c85c <_Balloc+0x68>
 800c82c:	2101      	movs	r1, #1
 800c82e:	fa01 f605 	lsl.w	r6, r1, r5
 800c832:	1d72      	adds	r2, r6, #5
 800c834:	0092      	lsls	r2, r2, #2
 800c836:	4620      	mov	r0, r4
 800c838:	f000 fc97 	bl	800d16a <_calloc_r>
 800c83c:	b160      	cbz	r0, 800c858 <_Balloc+0x64>
 800c83e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c842:	e00e      	b.n	800c862 <_Balloc+0x6e>
 800c844:	2221      	movs	r2, #33	; 0x21
 800c846:	2104      	movs	r1, #4
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 fc8e 	bl	800d16a <_calloc_r>
 800c84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c850:	60f0      	str	r0, [r6, #12]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1e4      	bne.n	800c822 <_Balloc+0x2e>
 800c858:	2000      	movs	r0, #0
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	6802      	ldr	r2, [r0, #0]
 800c85e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c862:	2300      	movs	r3, #0
 800c864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c868:	e7f7      	b.n	800c85a <_Balloc+0x66>
 800c86a:	bf00      	nop
 800c86c:	0800eace 	.word	0x0800eace
 800c870:	0800ebd4 	.word	0x0800ebd4

0800c874 <_Bfree>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c878:	4605      	mov	r5, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	b976      	cbnz	r6, 800c89c <_Bfree+0x28>
 800c87e:	2010      	movs	r0, #16
 800c880:	f7ff ff90 	bl	800c7a4 <malloc>
 800c884:	4602      	mov	r2, r0
 800c886:	6268      	str	r0, [r5, #36]	; 0x24
 800c888:	b920      	cbnz	r0, 800c894 <_Bfree+0x20>
 800c88a:	4b09      	ldr	r3, [pc, #36]	; (800c8b0 <_Bfree+0x3c>)
 800c88c:	4809      	ldr	r0, [pc, #36]	; (800c8b4 <_Bfree+0x40>)
 800c88e:	218a      	movs	r1, #138	; 0x8a
 800c890:	f001 fadc 	bl	800de4c <__assert_func>
 800c894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c898:	6006      	str	r6, [r0, #0]
 800c89a:	60c6      	str	r6, [r0, #12]
 800c89c:	b13c      	cbz	r4, 800c8ae <_Bfree+0x3a>
 800c89e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8a0:	6862      	ldr	r2, [r4, #4]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8a8:	6021      	str	r1, [r4, #0]
 800c8aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	0800eace 	.word	0x0800eace
 800c8b4:	0800ebd4 	.word	0x0800ebd4

0800c8b8 <__multadd>:
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	690e      	ldr	r6, [r1, #16]
 800c8be:	4607      	mov	r7, r0
 800c8c0:	4698      	mov	r8, r3
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	f101 0014 	add.w	r0, r1, #20
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	6805      	ldr	r5, [r0, #0]
 800c8cc:	b2a9      	uxth	r1, r5
 800c8ce:	fb02 8101 	mla	r1, r2, r1, r8
 800c8d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c8d6:	0c2d      	lsrs	r5, r5, #16
 800c8d8:	fb02 c505 	mla	r5, r2, r5, ip
 800c8dc:	b289      	uxth	r1, r1
 800c8de:	3301      	adds	r3, #1
 800c8e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c8e4:	429e      	cmp	r6, r3
 800c8e6:	f840 1b04 	str.w	r1, [r0], #4
 800c8ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c8ee:	dcec      	bgt.n	800c8ca <__multadd+0x12>
 800c8f0:	f1b8 0f00 	cmp.w	r8, #0
 800c8f4:	d022      	beq.n	800c93c <__multadd+0x84>
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	42b3      	cmp	r3, r6
 800c8fa:	dc19      	bgt.n	800c930 <__multadd+0x78>
 800c8fc:	6861      	ldr	r1, [r4, #4]
 800c8fe:	4638      	mov	r0, r7
 800c900:	3101      	adds	r1, #1
 800c902:	f7ff ff77 	bl	800c7f4 <_Balloc>
 800c906:	4605      	mov	r5, r0
 800c908:	b928      	cbnz	r0, 800c916 <__multadd+0x5e>
 800c90a:	4602      	mov	r2, r0
 800c90c:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <__multadd+0x8c>)
 800c90e:	480e      	ldr	r0, [pc, #56]	; (800c948 <__multadd+0x90>)
 800c910:	21b5      	movs	r1, #181	; 0xb5
 800c912:	f001 fa9b 	bl	800de4c <__assert_func>
 800c916:	6922      	ldr	r2, [r4, #16]
 800c918:	3202      	adds	r2, #2
 800c91a:	f104 010c 	add.w	r1, r4, #12
 800c91e:	0092      	lsls	r2, r2, #2
 800c920:	300c      	adds	r0, #12
 800c922:	f7ff ff59 	bl	800c7d8 <memcpy>
 800c926:	4621      	mov	r1, r4
 800c928:	4638      	mov	r0, r7
 800c92a:	f7ff ffa3 	bl	800c874 <_Bfree>
 800c92e:	462c      	mov	r4, r5
 800c930:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c934:	3601      	adds	r6, #1
 800c936:	f8c3 8014 	str.w	r8, [r3, #20]
 800c93a:	6126      	str	r6, [r4, #16]
 800c93c:	4620      	mov	r0, r4
 800c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c942:	bf00      	nop
 800c944:	0800eb44 	.word	0x0800eb44
 800c948:	0800ebd4 	.word	0x0800ebd4

0800c94c <__s2b>:
 800c94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c950:	460c      	mov	r4, r1
 800c952:	4615      	mov	r5, r2
 800c954:	461f      	mov	r7, r3
 800c956:	2209      	movs	r2, #9
 800c958:	3308      	adds	r3, #8
 800c95a:	4606      	mov	r6, r0
 800c95c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c960:	2100      	movs	r1, #0
 800c962:	2201      	movs	r2, #1
 800c964:	429a      	cmp	r2, r3
 800c966:	db09      	blt.n	800c97c <__s2b+0x30>
 800c968:	4630      	mov	r0, r6
 800c96a:	f7ff ff43 	bl	800c7f4 <_Balloc>
 800c96e:	b940      	cbnz	r0, 800c982 <__s2b+0x36>
 800c970:	4602      	mov	r2, r0
 800c972:	4b19      	ldr	r3, [pc, #100]	; (800c9d8 <__s2b+0x8c>)
 800c974:	4819      	ldr	r0, [pc, #100]	; (800c9dc <__s2b+0x90>)
 800c976:	21ce      	movs	r1, #206	; 0xce
 800c978:	f001 fa68 	bl	800de4c <__assert_func>
 800c97c:	0052      	lsls	r2, r2, #1
 800c97e:	3101      	adds	r1, #1
 800c980:	e7f0      	b.n	800c964 <__s2b+0x18>
 800c982:	9b08      	ldr	r3, [sp, #32]
 800c984:	6143      	str	r3, [r0, #20]
 800c986:	2d09      	cmp	r5, #9
 800c988:	f04f 0301 	mov.w	r3, #1
 800c98c:	6103      	str	r3, [r0, #16]
 800c98e:	dd16      	ble.n	800c9be <__s2b+0x72>
 800c990:	f104 0909 	add.w	r9, r4, #9
 800c994:	46c8      	mov	r8, r9
 800c996:	442c      	add	r4, r5
 800c998:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c99c:	4601      	mov	r1, r0
 800c99e:	3b30      	subs	r3, #48	; 0x30
 800c9a0:	220a      	movs	r2, #10
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f7ff ff88 	bl	800c8b8 <__multadd>
 800c9a8:	45a0      	cmp	r8, r4
 800c9aa:	d1f5      	bne.n	800c998 <__s2b+0x4c>
 800c9ac:	f1a5 0408 	sub.w	r4, r5, #8
 800c9b0:	444c      	add	r4, r9
 800c9b2:	1b2d      	subs	r5, r5, r4
 800c9b4:	1963      	adds	r3, r4, r5
 800c9b6:	42bb      	cmp	r3, r7
 800c9b8:	db04      	blt.n	800c9c4 <__s2b+0x78>
 800c9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9be:	340a      	adds	r4, #10
 800c9c0:	2509      	movs	r5, #9
 800c9c2:	e7f6      	b.n	800c9b2 <__s2b+0x66>
 800c9c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	3b30      	subs	r3, #48	; 0x30
 800c9cc:	220a      	movs	r2, #10
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f7ff ff72 	bl	800c8b8 <__multadd>
 800c9d4:	e7ee      	b.n	800c9b4 <__s2b+0x68>
 800c9d6:	bf00      	nop
 800c9d8:	0800eb44 	.word	0x0800eb44
 800c9dc:	0800ebd4 	.word	0x0800ebd4

0800c9e0 <__hi0bits>:
 800c9e0:	0c03      	lsrs	r3, r0, #16
 800c9e2:	041b      	lsls	r3, r3, #16
 800c9e4:	b9d3      	cbnz	r3, 800ca1c <__hi0bits+0x3c>
 800c9e6:	0400      	lsls	r0, r0, #16
 800c9e8:	2310      	movs	r3, #16
 800c9ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c9ee:	bf04      	itt	eq
 800c9f0:	0200      	lsleq	r0, r0, #8
 800c9f2:	3308      	addeq	r3, #8
 800c9f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c9f8:	bf04      	itt	eq
 800c9fa:	0100      	lsleq	r0, r0, #4
 800c9fc:	3304      	addeq	r3, #4
 800c9fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca02:	bf04      	itt	eq
 800ca04:	0080      	lsleq	r0, r0, #2
 800ca06:	3302      	addeq	r3, #2
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	db05      	blt.n	800ca18 <__hi0bits+0x38>
 800ca0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca10:	f103 0301 	add.w	r3, r3, #1
 800ca14:	bf08      	it	eq
 800ca16:	2320      	moveq	r3, #32
 800ca18:	4618      	mov	r0, r3
 800ca1a:	4770      	bx	lr
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	e7e4      	b.n	800c9ea <__hi0bits+0xa>

0800ca20 <__lo0bits>:
 800ca20:	6803      	ldr	r3, [r0, #0]
 800ca22:	f013 0207 	ands.w	r2, r3, #7
 800ca26:	4601      	mov	r1, r0
 800ca28:	d00b      	beq.n	800ca42 <__lo0bits+0x22>
 800ca2a:	07da      	lsls	r2, r3, #31
 800ca2c:	d424      	bmi.n	800ca78 <__lo0bits+0x58>
 800ca2e:	0798      	lsls	r0, r3, #30
 800ca30:	bf49      	itett	mi
 800ca32:	085b      	lsrmi	r3, r3, #1
 800ca34:	089b      	lsrpl	r3, r3, #2
 800ca36:	2001      	movmi	r0, #1
 800ca38:	600b      	strmi	r3, [r1, #0]
 800ca3a:	bf5c      	itt	pl
 800ca3c:	600b      	strpl	r3, [r1, #0]
 800ca3e:	2002      	movpl	r0, #2
 800ca40:	4770      	bx	lr
 800ca42:	b298      	uxth	r0, r3
 800ca44:	b9b0      	cbnz	r0, 800ca74 <__lo0bits+0x54>
 800ca46:	0c1b      	lsrs	r3, r3, #16
 800ca48:	2010      	movs	r0, #16
 800ca4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ca4e:	bf04      	itt	eq
 800ca50:	0a1b      	lsreq	r3, r3, #8
 800ca52:	3008      	addeq	r0, #8
 800ca54:	071a      	lsls	r2, r3, #28
 800ca56:	bf04      	itt	eq
 800ca58:	091b      	lsreq	r3, r3, #4
 800ca5a:	3004      	addeq	r0, #4
 800ca5c:	079a      	lsls	r2, r3, #30
 800ca5e:	bf04      	itt	eq
 800ca60:	089b      	lsreq	r3, r3, #2
 800ca62:	3002      	addeq	r0, #2
 800ca64:	07da      	lsls	r2, r3, #31
 800ca66:	d403      	bmi.n	800ca70 <__lo0bits+0x50>
 800ca68:	085b      	lsrs	r3, r3, #1
 800ca6a:	f100 0001 	add.w	r0, r0, #1
 800ca6e:	d005      	beq.n	800ca7c <__lo0bits+0x5c>
 800ca70:	600b      	str	r3, [r1, #0]
 800ca72:	4770      	bx	lr
 800ca74:	4610      	mov	r0, r2
 800ca76:	e7e8      	b.n	800ca4a <__lo0bits+0x2a>
 800ca78:	2000      	movs	r0, #0
 800ca7a:	4770      	bx	lr
 800ca7c:	2020      	movs	r0, #32
 800ca7e:	4770      	bx	lr

0800ca80 <__i2b>:
 800ca80:	b510      	push	{r4, lr}
 800ca82:	460c      	mov	r4, r1
 800ca84:	2101      	movs	r1, #1
 800ca86:	f7ff feb5 	bl	800c7f4 <_Balloc>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	b928      	cbnz	r0, 800ca9a <__i2b+0x1a>
 800ca8e:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <__i2b+0x24>)
 800ca90:	4805      	ldr	r0, [pc, #20]	; (800caa8 <__i2b+0x28>)
 800ca92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca96:	f001 f9d9 	bl	800de4c <__assert_func>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	6144      	str	r4, [r0, #20]
 800ca9e:	6103      	str	r3, [r0, #16]
 800caa0:	bd10      	pop	{r4, pc}
 800caa2:	bf00      	nop
 800caa4:	0800eb44 	.word	0x0800eb44
 800caa8:	0800ebd4 	.word	0x0800ebd4

0800caac <__multiply>:
 800caac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab0:	4614      	mov	r4, r2
 800cab2:	690a      	ldr	r2, [r1, #16]
 800cab4:	6923      	ldr	r3, [r4, #16]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	bfb8      	it	lt
 800caba:	460b      	movlt	r3, r1
 800cabc:	460d      	mov	r5, r1
 800cabe:	bfbc      	itt	lt
 800cac0:	4625      	movlt	r5, r4
 800cac2:	461c      	movlt	r4, r3
 800cac4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cac8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cacc:	68ab      	ldr	r3, [r5, #8]
 800cace:	6869      	ldr	r1, [r5, #4]
 800cad0:	eb0a 0709 	add.w	r7, sl, r9
 800cad4:	42bb      	cmp	r3, r7
 800cad6:	b085      	sub	sp, #20
 800cad8:	bfb8      	it	lt
 800cada:	3101      	addlt	r1, #1
 800cadc:	f7ff fe8a 	bl	800c7f4 <_Balloc>
 800cae0:	b930      	cbnz	r0, 800caf0 <__multiply+0x44>
 800cae2:	4602      	mov	r2, r0
 800cae4:	4b42      	ldr	r3, [pc, #264]	; (800cbf0 <__multiply+0x144>)
 800cae6:	4843      	ldr	r0, [pc, #268]	; (800cbf4 <__multiply+0x148>)
 800cae8:	f240 115d 	movw	r1, #349	; 0x15d
 800caec:	f001 f9ae 	bl	800de4c <__assert_func>
 800caf0:	f100 0614 	add.w	r6, r0, #20
 800caf4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800caf8:	4633      	mov	r3, r6
 800cafa:	2200      	movs	r2, #0
 800cafc:	4543      	cmp	r3, r8
 800cafe:	d31e      	bcc.n	800cb3e <__multiply+0x92>
 800cb00:	f105 0c14 	add.w	ip, r5, #20
 800cb04:	f104 0314 	add.w	r3, r4, #20
 800cb08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cb0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cb10:	9202      	str	r2, [sp, #8]
 800cb12:	ebac 0205 	sub.w	r2, ip, r5
 800cb16:	3a15      	subs	r2, #21
 800cb18:	f022 0203 	bic.w	r2, r2, #3
 800cb1c:	3204      	adds	r2, #4
 800cb1e:	f105 0115 	add.w	r1, r5, #21
 800cb22:	458c      	cmp	ip, r1
 800cb24:	bf38      	it	cc
 800cb26:	2204      	movcc	r2, #4
 800cb28:	9201      	str	r2, [sp, #4]
 800cb2a:	9a02      	ldr	r2, [sp, #8]
 800cb2c:	9303      	str	r3, [sp, #12]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d808      	bhi.n	800cb44 <__multiply+0x98>
 800cb32:	2f00      	cmp	r7, #0
 800cb34:	dc55      	bgt.n	800cbe2 <__multiply+0x136>
 800cb36:	6107      	str	r7, [r0, #16]
 800cb38:	b005      	add	sp, #20
 800cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3e:	f843 2b04 	str.w	r2, [r3], #4
 800cb42:	e7db      	b.n	800cafc <__multiply+0x50>
 800cb44:	f8b3 a000 	ldrh.w	sl, [r3]
 800cb48:	f1ba 0f00 	cmp.w	sl, #0
 800cb4c:	d020      	beq.n	800cb90 <__multiply+0xe4>
 800cb4e:	f105 0e14 	add.w	lr, r5, #20
 800cb52:	46b1      	mov	r9, r6
 800cb54:	2200      	movs	r2, #0
 800cb56:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cb5a:	f8d9 b000 	ldr.w	fp, [r9]
 800cb5e:	b2a1      	uxth	r1, r4
 800cb60:	fa1f fb8b 	uxth.w	fp, fp
 800cb64:	fb0a b101 	mla	r1, sl, r1, fp
 800cb68:	4411      	add	r1, r2
 800cb6a:	f8d9 2000 	ldr.w	r2, [r9]
 800cb6e:	0c24      	lsrs	r4, r4, #16
 800cb70:	0c12      	lsrs	r2, r2, #16
 800cb72:	fb0a 2404 	mla	r4, sl, r4, r2
 800cb76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cb7a:	b289      	uxth	r1, r1
 800cb7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cb80:	45f4      	cmp	ip, lr
 800cb82:	f849 1b04 	str.w	r1, [r9], #4
 800cb86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cb8a:	d8e4      	bhi.n	800cb56 <__multiply+0xaa>
 800cb8c:	9901      	ldr	r1, [sp, #4]
 800cb8e:	5072      	str	r2, [r6, r1]
 800cb90:	9a03      	ldr	r2, [sp, #12]
 800cb92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb96:	3304      	adds	r3, #4
 800cb98:	f1b9 0f00 	cmp.w	r9, #0
 800cb9c:	d01f      	beq.n	800cbde <__multiply+0x132>
 800cb9e:	6834      	ldr	r4, [r6, #0]
 800cba0:	f105 0114 	add.w	r1, r5, #20
 800cba4:	46b6      	mov	lr, r6
 800cba6:	f04f 0a00 	mov.w	sl, #0
 800cbaa:	880a      	ldrh	r2, [r1, #0]
 800cbac:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cbb0:	fb09 b202 	mla	r2, r9, r2, fp
 800cbb4:	4492      	add	sl, r2
 800cbb6:	b2a4      	uxth	r4, r4
 800cbb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cbbc:	f84e 4b04 	str.w	r4, [lr], #4
 800cbc0:	f851 4b04 	ldr.w	r4, [r1], #4
 800cbc4:	f8be 2000 	ldrh.w	r2, [lr]
 800cbc8:	0c24      	lsrs	r4, r4, #16
 800cbca:	fb09 2404 	mla	r4, r9, r4, r2
 800cbce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cbd2:	458c      	cmp	ip, r1
 800cbd4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cbd8:	d8e7      	bhi.n	800cbaa <__multiply+0xfe>
 800cbda:	9a01      	ldr	r2, [sp, #4]
 800cbdc:	50b4      	str	r4, [r6, r2]
 800cbde:	3604      	adds	r6, #4
 800cbe0:	e7a3      	b.n	800cb2a <__multiply+0x7e>
 800cbe2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1a5      	bne.n	800cb36 <__multiply+0x8a>
 800cbea:	3f01      	subs	r7, #1
 800cbec:	e7a1      	b.n	800cb32 <__multiply+0x86>
 800cbee:	bf00      	nop
 800cbf0:	0800eb44 	.word	0x0800eb44
 800cbf4:	0800ebd4 	.word	0x0800ebd4

0800cbf8 <__pow5mult>:
 800cbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbfc:	4615      	mov	r5, r2
 800cbfe:	f012 0203 	ands.w	r2, r2, #3
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	d007      	beq.n	800cc18 <__pow5mult+0x20>
 800cc08:	4c25      	ldr	r4, [pc, #148]	; (800cca0 <__pow5mult+0xa8>)
 800cc0a:	3a01      	subs	r2, #1
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc12:	f7ff fe51 	bl	800c8b8 <__multadd>
 800cc16:	4607      	mov	r7, r0
 800cc18:	10ad      	asrs	r5, r5, #2
 800cc1a:	d03d      	beq.n	800cc98 <__pow5mult+0xa0>
 800cc1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc1e:	b97c      	cbnz	r4, 800cc40 <__pow5mult+0x48>
 800cc20:	2010      	movs	r0, #16
 800cc22:	f7ff fdbf 	bl	800c7a4 <malloc>
 800cc26:	4602      	mov	r2, r0
 800cc28:	6270      	str	r0, [r6, #36]	; 0x24
 800cc2a:	b928      	cbnz	r0, 800cc38 <__pow5mult+0x40>
 800cc2c:	4b1d      	ldr	r3, [pc, #116]	; (800cca4 <__pow5mult+0xac>)
 800cc2e:	481e      	ldr	r0, [pc, #120]	; (800cca8 <__pow5mult+0xb0>)
 800cc30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cc34:	f001 f90a 	bl	800de4c <__assert_func>
 800cc38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc3c:	6004      	str	r4, [r0, #0]
 800cc3e:	60c4      	str	r4, [r0, #12]
 800cc40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cc44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc48:	b94c      	cbnz	r4, 800cc5e <__pow5mult+0x66>
 800cc4a:	f240 2171 	movw	r1, #625	; 0x271
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f7ff ff16 	bl	800ca80 <__i2b>
 800cc54:	2300      	movs	r3, #0
 800cc56:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	6003      	str	r3, [r0, #0]
 800cc5e:	f04f 0900 	mov.w	r9, #0
 800cc62:	07eb      	lsls	r3, r5, #31
 800cc64:	d50a      	bpl.n	800cc7c <__pow5mult+0x84>
 800cc66:	4639      	mov	r1, r7
 800cc68:	4622      	mov	r2, r4
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f7ff ff1e 	bl	800caac <__multiply>
 800cc70:	4639      	mov	r1, r7
 800cc72:	4680      	mov	r8, r0
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff fdfd 	bl	800c874 <_Bfree>
 800cc7a:	4647      	mov	r7, r8
 800cc7c:	106d      	asrs	r5, r5, #1
 800cc7e:	d00b      	beq.n	800cc98 <__pow5mult+0xa0>
 800cc80:	6820      	ldr	r0, [r4, #0]
 800cc82:	b938      	cbnz	r0, 800cc94 <__pow5mult+0x9c>
 800cc84:	4622      	mov	r2, r4
 800cc86:	4621      	mov	r1, r4
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7ff ff0f 	bl	800caac <__multiply>
 800cc8e:	6020      	str	r0, [r4, #0]
 800cc90:	f8c0 9000 	str.w	r9, [r0]
 800cc94:	4604      	mov	r4, r0
 800cc96:	e7e4      	b.n	800cc62 <__pow5mult+0x6a>
 800cc98:	4638      	mov	r0, r7
 800cc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc9e:	bf00      	nop
 800cca0:	0800ed28 	.word	0x0800ed28
 800cca4:	0800eace 	.word	0x0800eace
 800cca8:	0800ebd4 	.word	0x0800ebd4

0800ccac <__lshift>:
 800ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	6849      	ldr	r1, [r1, #4]
 800ccb4:	6923      	ldr	r3, [r4, #16]
 800ccb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ccba:	68a3      	ldr	r3, [r4, #8]
 800ccbc:	4607      	mov	r7, r0
 800ccbe:	4691      	mov	r9, r2
 800ccc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ccc4:	f108 0601 	add.w	r6, r8, #1
 800ccc8:	42b3      	cmp	r3, r6
 800ccca:	db0b      	blt.n	800cce4 <__lshift+0x38>
 800cccc:	4638      	mov	r0, r7
 800ccce:	f7ff fd91 	bl	800c7f4 <_Balloc>
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	b948      	cbnz	r0, 800ccea <__lshift+0x3e>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	4b28      	ldr	r3, [pc, #160]	; (800cd7c <__lshift+0xd0>)
 800ccda:	4829      	ldr	r0, [pc, #164]	; (800cd80 <__lshift+0xd4>)
 800ccdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cce0:	f001 f8b4 	bl	800de4c <__assert_func>
 800cce4:	3101      	adds	r1, #1
 800cce6:	005b      	lsls	r3, r3, #1
 800cce8:	e7ee      	b.n	800ccc8 <__lshift+0x1c>
 800ccea:	2300      	movs	r3, #0
 800ccec:	f100 0114 	add.w	r1, r0, #20
 800ccf0:	f100 0210 	add.w	r2, r0, #16
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	4553      	cmp	r3, sl
 800ccf8:	db33      	blt.n	800cd62 <__lshift+0xb6>
 800ccfa:	6920      	ldr	r0, [r4, #16]
 800ccfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd00:	f104 0314 	add.w	r3, r4, #20
 800cd04:	f019 091f 	ands.w	r9, r9, #31
 800cd08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd10:	d02b      	beq.n	800cd6a <__lshift+0xbe>
 800cd12:	f1c9 0e20 	rsb	lr, r9, #32
 800cd16:	468a      	mov	sl, r1
 800cd18:	2200      	movs	r2, #0
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	fa00 f009 	lsl.w	r0, r0, r9
 800cd20:	4302      	orrs	r2, r0
 800cd22:	f84a 2b04 	str.w	r2, [sl], #4
 800cd26:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd2a:	459c      	cmp	ip, r3
 800cd2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd30:	d8f3      	bhi.n	800cd1a <__lshift+0x6e>
 800cd32:	ebac 0304 	sub.w	r3, ip, r4
 800cd36:	3b15      	subs	r3, #21
 800cd38:	f023 0303 	bic.w	r3, r3, #3
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	f104 0015 	add.w	r0, r4, #21
 800cd42:	4584      	cmp	ip, r0
 800cd44:	bf38      	it	cc
 800cd46:	2304      	movcc	r3, #4
 800cd48:	50ca      	str	r2, [r1, r3]
 800cd4a:	b10a      	cbz	r2, 800cd50 <__lshift+0xa4>
 800cd4c:	f108 0602 	add.w	r6, r8, #2
 800cd50:	3e01      	subs	r6, #1
 800cd52:	4638      	mov	r0, r7
 800cd54:	612e      	str	r6, [r5, #16]
 800cd56:	4621      	mov	r1, r4
 800cd58:	f7ff fd8c 	bl	800c874 <_Bfree>
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd62:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd66:	3301      	adds	r3, #1
 800cd68:	e7c5      	b.n	800ccf6 <__lshift+0x4a>
 800cd6a:	3904      	subs	r1, #4
 800cd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd70:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd74:	459c      	cmp	ip, r3
 800cd76:	d8f9      	bhi.n	800cd6c <__lshift+0xc0>
 800cd78:	e7ea      	b.n	800cd50 <__lshift+0xa4>
 800cd7a:	bf00      	nop
 800cd7c:	0800eb44 	.word	0x0800eb44
 800cd80:	0800ebd4 	.word	0x0800ebd4

0800cd84 <__mcmp>:
 800cd84:	b530      	push	{r4, r5, lr}
 800cd86:	6902      	ldr	r2, [r0, #16]
 800cd88:	690c      	ldr	r4, [r1, #16]
 800cd8a:	1b12      	subs	r2, r2, r4
 800cd8c:	d10e      	bne.n	800cdac <__mcmp+0x28>
 800cd8e:	f100 0314 	add.w	r3, r0, #20
 800cd92:	3114      	adds	r1, #20
 800cd94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cda0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cda4:	42a5      	cmp	r5, r4
 800cda6:	d003      	beq.n	800cdb0 <__mcmp+0x2c>
 800cda8:	d305      	bcc.n	800cdb6 <__mcmp+0x32>
 800cdaa:	2201      	movs	r2, #1
 800cdac:	4610      	mov	r0, r2
 800cdae:	bd30      	pop	{r4, r5, pc}
 800cdb0:	4283      	cmp	r3, r0
 800cdb2:	d3f3      	bcc.n	800cd9c <__mcmp+0x18>
 800cdb4:	e7fa      	b.n	800cdac <__mcmp+0x28>
 800cdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdba:	e7f7      	b.n	800cdac <__mcmp+0x28>

0800cdbc <__mdiff>:
 800cdbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	4617      	mov	r7, r2
 800cdca:	f7ff ffdb 	bl	800cd84 <__mcmp>
 800cdce:	1e05      	subs	r5, r0, #0
 800cdd0:	d110      	bne.n	800cdf4 <__mdiff+0x38>
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f7ff fd0d 	bl	800c7f4 <_Balloc>
 800cdda:	b930      	cbnz	r0, 800cdea <__mdiff+0x2e>
 800cddc:	4b39      	ldr	r3, [pc, #228]	; (800cec4 <__mdiff+0x108>)
 800cdde:	4602      	mov	r2, r0
 800cde0:	f240 2132 	movw	r1, #562	; 0x232
 800cde4:	4838      	ldr	r0, [pc, #224]	; (800cec8 <__mdiff+0x10c>)
 800cde6:	f001 f831 	bl	800de4c <__assert_func>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cdf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf4:	bfa4      	itt	ge
 800cdf6:	463b      	movge	r3, r7
 800cdf8:	4627      	movge	r7, r4
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	bfa6      	itte	ge
 800ce00:	461c      	movge	r4, r3
 800ce02:	2500      	movge	r5, #0
 800ce04:	2501      	movlt	r5, #1
 800ce06:	f7ff fcf5 	bl	800c7f4 <_Balloc>
 800ce0a:	b920      	cbnz	r0, 800ce16 <__mdiff+0x5a>
 800ce0c:	4b2d      	ldr	r3, [pc, #180]	; (800cec4 <__mdiff+0x108>)
 800ce0e:	4602      	mov	r2, r0
 800ce10:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce14:	e7e6      	b.n	800cde4 <__mdiff+0x28>
 800ce16:	693e      	ldr	r6, [r7, #16]
 800ce18:	60c5      	str	r5, [r0, #12]
 800ce1a:	6925      	ldr	r5, [r4, #16]
 800ce1c:	f107 0114 	add.w	r1, r7, #20
 800ce20:	f104 0914 	add.w	r9, r4, #20
 800ce24:	f100 0e14 	add.w	lr, r0, #20
 800ce28:	f107 0210 	add.w	r2, r7, #16
 800ce2c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ce30:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ce34:	46f2      	mov	sl, lr
 800ce36:	2700      	movs	r7, #0
 800ce38:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ce40:	fa1f f883 	uxth.w	r8, r3
 800ce44:	fa17 f78b 	uxtah	r7, r7, fp
 800ce48:	0c1b      	lsrs	r3, r3, #16
 800ce4a:	eba7 0808 	sub.w	r8, r7, r8
 800ce4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce56:	fa1f f888 	uxth.w	r8, r8
 800ce5a:	141f      	asrs	r7, r3, #16
 800ce5c:	454d      	cmp	r5, r9
 800ce5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce62:	f84a 3b04 	str.w	r3, [sl], #4
 800ce66:	d8e7      	bhi.n	800ce38 <__mdiff+0x7c>
 800ce68:	1b2b      	subs	r3, r5, r4
 800ce6a:	3b15      	subs	r3, #21
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	3304      	adds	r3, #4
 800ce72:	3415      	adds	r4, #21
 800ce74:	42a5      	cmp	r5, r4
 800ce76:	bf38      	it	cc
 800ce78:	2304      	movcc	r3, #4
 800ce7a:	4419      	add	r1, r3
 800ce7c:	4473      	add	r3, lr
 800ce7e:	469e      	mov	lr, r3
 800ce80:	460d      	mov	r5, r1
 800ce82:	4565      	cmp	r5, ip
 800ce84:	d30e      	bcc.n	800cea4 <__mdiff+0xe8>
 800ce86:	f10c 0203 	add.w	r2, ip, #3
 800ce8a:	1a52      	subs	r2, r2, r1
 800ce8c:	f022 0203 	bic.w	r2, r2, #3
 800ce90:	3903      	subs	r1, #3
 800ce92:	458c      	cmp	ip, r1
 800ce94:	bf38      	it	cc
 800ce96:	2200      	movcc	r2, #0
 800ce98:	441a      	add	r2, r3
 800ce9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce9e:	b17b      	cbz	r3, 800cec0 <__mdiff+0x104>
 800cea0:	6106      	str	r6, [r0, #16]
 800cea2:	e7a5      	b.n	800cdf0 <__mdiff+0x34>
 800cea4:	f855 8b04 	ldr.w	r8, [r5], #4
 800cea8:	fa17 f488 	uxtah	r4, r7, r8
 800ceac:	1422      	asrs	r2, r4, #16
 800ceae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ceb2:	b2a4      	uxth	r4, r4
 800ceb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ceb8:	f84e 4b04 	str.w	r4, [lr], #4
 800cebc:	1417      	asrs	r7, r2, #16
 800cebe:	e7e0      	b.n	800ce82 <__mdiff+0xc6>
 800cec0:	3e01      	subs	r6, #1
 800cec2:	e7ea      	b.n	800ce9a <__mdiff+0xde>
 800cec4:	0800eb44 	.word	0x0800eb44
 800cec8:	0800ebd4 	.word	0x0800ebd4

0800cecc <__ulp>:
 800cecc:	b082      	sub	sp, #8
 800cece:	ed8d 0b00 	vstr	d0, [sp]
 800ced2:	9b01      	ldr	r3, [sp, #4]
 800ced4:	4912      	ldr	r1, [pc, #72]	; (800cf20 <__ulp+0x54>)
 800ced6:	4019      	ands	r1, r3
 800ced8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cedc:	2900      	cmp	r1, #0
 800cede:	dd05      	ble.n	800ceec <__ulp+0x20>
 800cee0:	2200      	movs	r2, #0
 800cee2:	460b      	mov	r3, r1
 800cee4:	ec43 2b10 	vmov	d0, r2, r3
 800cee8:	b002      	add	sp, #8
 800ceea:	4770      	bx	lr
 800ceec:	4249      	negs	r1, r1
 800ceee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cef2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cef6:	f04f 0200 	mov.w	r2, #0
 800cefa:	f04f 0300 	mov.w	r3, #0
 800cefe:	da04      	bge.n	800cf0a <__ulp+0x3e>
 800cf00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cf04:	fa41 f300 	asr.w	r3, r1, r0
 800cf08:	e7ec      	b.n	800cee4 <__ulp+0x18>
 800cf0a:	f1a0 0114 	sub.w	r1, r0, #20
 800cf0e:	291e      	cmp	r1, #30
 800cf10:	bfda      	itte	le
 800cf12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cf16:	fa20 f101 	lsrle.w	r1, r0, r1
 800cf1a:	2101      	movgt	r1, #1
 800cf1c:	460a      	mov	r2, r1
 800cf1e:	e7e1      	b.n	800cee4 <__ulp+0x18>
 800cf20:	7ff00000 	.word	0x7ff00000

0800cf24 <__b2d>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	6905      	ldr	r5, [r0, #16]
 800cf28:	f100 0714 	add.w	r7, r0, #20
 800cf2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cf30:	1f2e      	subs	r6, r5, #4
 800cf32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cf36:	4620      	mov	r0, r4
 800cf38:	f7ff fd52 	bl	800c9e0 <__hi0bits>
 800cf3c:	f1c0 0320 	rsb	r3, r0, #32
 800cf40:	280a      	cmp	r0, #10
 800cf42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cfc0 <__b2d+0x9c>
 800cf46:	600b      	str	r3, [r1, #0]
 800cf48:	dc14      	bgt.n	800cf74 <__b2d+0x50>
 800cf4a:	f1c0 0e0b 	rsb	lr, r0, #11
 800cf4e:	fa24 f10e 	lsr.w	r1, r4, lr
 800cf52:	42b7      	cmp	r7, r6
 800cf54:	ea41 030c 	orr.w	r3, r1, ip
 800cf58:	bf34      	ite	cc
 800cf5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf5e:	2100      	movcs	r1, #0
 800cf60:	3015      	adds	r0, #21
 800cf62:	fa04 f000 	lsl.w	r0, r4, r0
 800cf66:	fa21 f10e 	lsr.w	r1, r1, lr
 800cf6a:	ea40 0201 	orr.w	r2, r0, r1
 800cf6e:	ec43 2b10 	vmov	d0, r2, r3
 800cf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf74:	42b7      	cmp	r7, r6
 800cf76:	bf3a      	itte	cc
 800cf78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf7c:	f1a5 0608 	subcc.w	r6, r5, #8
 800cf80:	2100      	movcs	r1, #0
 800cf82:	380b      	subs	r0, #11
 800cf84:	d017      	beq.n	800cfb6 <__b2d+0x92>
 800cf86:	f1c0 0c20 	rsb	ip, r0, #32
 800cf8a:	fa04 f500 	lsl.w	r5, r4, r0
 800cf8e:	42be      	cmp	r6, r7
 800cf90:	fa21 f40c 	lsr.w	r4, r1, ip
 800cf94:	ea45 0504 	orr.w	r5, r5, r4
 800cf98:	bf8c      	ite	hi
 800cf9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cf9e:	2400      	movls	r4, #0
 800cfa0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cfa4:	fa01 f000 	lsl.w	r0, r1, r0
 800cfa8:	fa24 f40c 	lsr.w	r4, r4, ip
 800cfac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cfb0:	ea40 0204 	orr.w	r2, r0, r4
 800cfb4:	e7db      	b.n	800cf6e <__b2d+0x4a>
 800cfb6:	ea44 030c 	orr.w	r3, r4, ip
 800cfba:	460a      	mov	r2, r1
 800cfbc:	e7d7      	b.n	800cf6e <__b2d+0x4a>
 800cfbe:	bf00      	nop
 800cfc0:	3ff00000 	.word	0x3ff00000

0800cfc4 <__d2b>:
 800cfc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfc8:	4689      	mov	r9, r1
 800cfca:	2101      	movs	r1, #1
 800cfcc:	ec57 6b10 	vmov	r6, r7, d0
 800cfd0:	4690      	mov	r8, r2
 800cfd2:	f7ff fc0f 	bl	800c7f4 <_Balloc>
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	b930      	cbnz	r0, 800cfe8 <__d2b+0x24>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	4b25      	ldr	r3, [pc, #148]	; (800d074 <__d2b+0xb0>)
 800cfde:	4826      	ldr	r0, [pc, #152]	; (800d078 <__d2b+0xb4>)
 800cfe0:	f240 310a 	movw	r1, #778	; 0x30a
 800cfe4:	f000 ff32 	bl	800de4c <__assert_func>
 800cfe8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cfec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cff0:	bb35      	cbnz	r5, 800d040 <__d2b+0x7c>
 800cff2:	2e00      	cmp	r6, #0
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	d028      	beq.n	800d04a <__d2b+0x86>
 800cff8:	4668      	mov	r0, sp
 800cffa:	9600      	str	r6, [sp, #0]
 800cffc:	f7ff fd10 	bl	800ca20 <__lo0bits>
 800d000:	9900      	ldr	r1, [sp, #0]
 800d002:	b300      	cbz	r0, 800d046 <__d2b+0x82>
 800d004:	9a01      	ldr	r2, [sp, #4]
 800d006:	f1c0 0320 	rsb	r3, r0, #32
 800d00a:	fa02 f303 	lsl.w	r3, r2, r3
 800d00e:	430b      	orrs	r3, r1
 800d010:	40c2      	lsrs	r2, r0
 800d012:	6163      	str	r3, [r4, #20]
 800d014:	9201      	str	r2, [sp, #4]
 800d016:	9b01      	ldr	r3, [sp, #4]
 800d018:	61a3      	str	r3, [r4, #24]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	bf14      	ite	ne
 800d01e:	2202      	movne	r2, #2
 800d020:	2201      	moveq	r2, #1
 800d022:	6122      	str	r2, [r4, #16]
 800d024:	b1d5      	cbz	r5, 800d05c <__d2b+0x98>
 800d026:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d02a:	4405      	add	r5, r0
 800d02c:	f8c9 5000 	str.w	r5, [r9]
 800d030:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d034:	f8c8 0000 	str.w	r0, [r8]
 800d038:	4620      	mov	r0, r4
 800d03a:	b003      	add	sp, #12
 800d03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d044:	e7d5      	b.n	800cff2 <__d2b+0x2e>
 800d046:	6161      	str	r1, [r4, #20]
 800d048:	e7e5      	b.n	800d016 <__d2b+0x52>
 800d04a:	a801      	add	r0, sp, #4
 800d04c:	f7ff fce8 	bl	800ca20 <__lo0bits>
 800d050:	9b01      	ldr	r3, [sp, #4]
 800d052:	6163      	str	r3, [r4, #20]
 800d054:	2201      	movs	r2, #1
 800d056:	6122      	str	r2, [r4, #16]
 800d058:	3020      	adds	r0, #32
 800d05a:	e7e3      	b.n	800d024 <__d2b+0x60>
 800d05c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d060:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d064:	f8c9 0000 	str.w	r0, [r9]
 800d068:	6918      	ldr	r0, [r3, #16]
 800d06a:	f7ff fcb9 	bl	800c9e0 <__hi0bits>
 800d06e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d072:	e7df      	b.n	800d034 <__d2b+0x70>
 800d074:	0800eb44 	.word	0x0800eb44
 800d078:	0800ebd4 	.word	0x0800ebd4

0800d07c <__ratio>:
 800d07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	4688      	mov	r8, r1
 800d082:	4669      	mov	r1, sp
 800d084:	4681      	mov	r9, r0
 800d086:	f7ff ff4d 	bl	800cf24 <__b2d>
 800d08a:	a901      	add	r1, sp, #4
 800d08c:	4640      	mov	r0, r8
 800d08e:	ec55 4b10 	vmov	r4, r5, d0
 800d092:	f7ff ff47 	bl	800cf24 <__b2d>
 800d096:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d09a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d09e:	eba3 0c02 	sub.w	ip, r3, r2
 800d0a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0a6:	1a9b      	subs	r3, r3, r2
 800d0a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d0ac:	ec51 0b10 	vmov	r0, r1, d0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	bfd6      	itet	le
 800d0b4:	460a      	movle	r2, r1
 800d0b6:	462a      	movgt	r2, r5
 800d0b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d0bc:	468b      	mov	fp, r1
 800d0be:	462f      	mov	r7, r5
 800d0c0:	bfd4      	ite	le
 800d0c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d0c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	ee10 2a10 	vmov	r2, s0
 800d0d0:	465b      	mov	r3, fp
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	f7f3 fbda 	bl	800088c <__aeabi_ddiv>
 800d0d8:	ec41 0b10 	vmov	d0, r0, r1
 800d0dc:	b003      	add	sp, #12
 800d0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0e2 <__copybits>:
 800d0e2:	3901      	subs	r1, #1
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	1149      	asrs	r1, r1, #5
 800d0e8:	6914      	ldr	r4, [r2, #16]
 800d0ea:	3101      	adds	r1, #1
 800d0ec:	f102 0314 	add.w	r3, r2, #20
 800d0f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0f8:	1f05      	subs	r5, r0, #4
 800d0fa:	42a3      	cmp	r3, r4
 800d0fc:	d30c      	bcc.n	800d118 <__copybits+0x36>
 800d0fe:	1aa3      	subs	r3, r4, r2
 800d100:	3b11      	subs	r3, #17
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	3211      	adds	r2, #17
 800d108:	42a2      	cmp	r2, r4
 800d10a:	bf88      	it	hi
 800d10c:	2300      	movhi	r3, #0
 800d10e:	4418      	add	r0, r3
 800d110:	2300      	movs	r3, #0
 800d112:	4288      	cmp	r0, r1
 800d114:	d305      	bcc.n	800d122 <__copybits+0x40>
 800d116:	bd70      	pop	{r4, r5, r6, pc}
 800d118:	f853 6b04 	ldr.w	r6, [r3], #4
 800d11c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d120:	e7eb      	b.n	800d0fa <__copybits+0x18>
 800d122:	f840 3b04 	str.w	r3, [r0], #4
 800d126:	e7f4      	b.n	800d112 <__copybits+0x30>

0800d128 <__any_on>:
 800d128:	f100 0214 	add.w	r2, r0, #20
 800d12c:	6900      	ldr	r0, [r0, #16]
 800d12e:	114b      	asrs	r3, r1, #5
 800d130:	4298      	cmp	r0, r3
 800d132:	b510      	push	{r4, lr}
 800d134:	db11      	blt.n	800d15a <__any_on+0x32>
 800d136:	dd0a      	ble.n	800d14e <__any_on+0x26>
 800d138:	f011 011f 	ands.w	r1, r1, #31
 800d13c:	d007      	beq.n	800d14e <__any_on+0x26>
 800d13e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d142:	fa24 f001 	lsr.w	r0, r4, r1
 800d146:	fa00 f101 	lsl.w	r1, r0, r1
 800d14a:	428c      	cmp	r4, r1
 800d14c:	d10b      	bne.n	800d166 <__any_on+0x3e>
 800d14e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d152:	4293      	cmp	r3, r2
 800d154:	d803      	bhi.n	800d15e <__any_on+0x36>
 800d156:	2000      	movs	r0, #0
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	4603      	mov	r3, r0
 800d15c:	e7f7      	b.n	800d14e <__any_on+0x26>
 800d15e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d162:	2900      	cmp	r1, #0
 800d164:	d0f5      	beq.n	800d152 <__any_on+0x2a>
 800d166:	2001      	movs	r0, #1
 800d168:	e7f6      	b.n	800d158 <__any_on+0x30>

0800d16a <_calloc_r>:
 800d16a:	b513      	push	{r0, r1, r4, lr}
 800d16c:	434a      	muls	r2, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	9201      	str	r2, [sp, #4]
 800d172:	f000 f859 	bl	800d228 <_malloc_r>
 800d176:	4604      	mov	r4, r0
 800d178:	b118      	cbz	r0, 800d182 <_calloc_r+0x18>
 800d17a:	9a01      	ldr	r2, [sp, #4]
 800d17c:	2100      	movs	r1, #0
 800d17e:	f7fc fb23 	bl	80097c8 <memset>
 800d182:	4620      	mov	r0, r4
 800d184:	b002      	add	sp, #8
 800d186:	bd10      	pop	{r4, pc}

0800d188 <_free_r>:
 800d188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d18a:	2900      	cmp	r1, #0
 800d18c:	d048      	beq.n	800d220 <_free_r+0x98>
 800d18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d192:	9001      	str	r0, [sp, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	f1a1 0404 	sub.w	r4, r1, #4
 800d19a:	bfb8      	it	lt
 800d19c:	18e4      	addlt	r4, r4, r3
 800d19e:	f001 f859 	bl	800e254 <__malloc_lock>
 800d1a2:	4a20      	ldr	r2, [pc, #128]	; (800d224 <_free_r+0x9c>)
 800d1a4:	9801      	ldr	r0, [sp, #4]
 800d1a6:	6813      	ldr	r3, [r2, #0]
 800d1a8:	4615      	mov	r5, r2
 800d1aa:	b933      	cbnz	r3, 800d1ba <_free_r+0x32>
 800d1ac:	6063      	str	r3, [r4, #4]
 800d1ae:	6014      	str	r4, [r2, #0]
 800d1b0:	b003      	add	sp, #12
 800d1b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1b6:	f001 b853 	b.w	800e260 <__malloc_unlock>
 800d1ba:	42a3      	cmp	r3, r4
 800d1bc:	d90b      	bls.n	800d1d6 <_free_r+0x4e>
 800d1be:	6821      	ldr	r1, [r4, #0]
 800d1c0:	1862      	adds	r2, r4, r1
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	bf04      	itt	eq
 800d1c6:	681a      	ldreq	r2, [r3, #0]
 800d1c8:	685b      	ldreq	r3, [r3, #4]
 800d1ca:	6063      	str	r3, [r4, #4]
 800d1cc:	bf04      	itt	eq
 800d1ce:	1852      	addeq	r2, r2, r1
 800d1d0:	6022      	streq	r2, [r4, #0]
 800d1d2:	602c      	str	r4, [r5, #0]
 800d1d4:	e7ec      	b.n	800d1b0 <_free_r+0x28>
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	b10b      	cbz	r3, 800d1e0 <_free_r+0x58>
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	d9fa      	bls.n	800d1d6 <_free_r+0x4e>
 800d1e0:	6811      	ldr	r1, [r2, #0]
 800d1e2:	1855      	adds	r5, r2, r1
 800d1e4:	42a5      	cmp	r5, r4
 800d1e6:	d10b      	bne.n	800d200 <_free_r+0x78>
 800d1e8:	6824      	ldr	r4, [r4, #0]
 800d1ea:	4421      	add	r1, r4
 800d1ec:	1854      	adds	r4, r2, r1
 800d1ee:	42a3      	cmp	r3, r4
 800d1f0:	6011      	str	r1, [r2, #0]
 800d1f2:	d1dd      	bne.n	800d1b0 <_free_r+0x28>
 800d1f4:	681c      	ldr	r4, [r3, #0]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	6053      	str	r3, [r2, #4]
 800d1fa:	4421      	add	r1, r4
 800d1fc:	6011      	str	r1, [r2, #0]
 800d1fe:	e7d7      	b.n	800d1b0 <_free_r+0x28>
 800d200:	d902      	bls.n	800d208 <_free_r+0x80>
 800d202:	230c      	movs	r3, #12
 800d204:	6003      	str	r3, [r0, #0]
 800d206:	e7d3      	b.n	800d1b0 <_free_r+0x28>
 800d208:	6825      	ldr	r5, [r4, #0]
 800d20a:	1961      	adds	r1, r4, r5
 800d20c:	428b      	cmp	r3, r1
 800d20e:	bf04      	itt	eq
 800d210:	6819      	ldreq	r1, [r3, #0]
 800d212:	685b      	ldreq	r3, [r3, #4]
 800d214:	6063      	str	r3, [r4, #4]
 800d216:	bf04      	itt	eq
 800d218:	1949      	addeq	r1, r1, r5
 800d21a:	6021      	streq	r1, [r4, #0]
 800d21c:	6054      	str	r4, [r2, #4]
 800d21e:	e7c7      	b.n	800d1b0 <_free_r+0x28>
 800d220:	b003      	add	sp, #12
 800d222:	bd30      	pop	{r4, r5, pc}
 800d224:	2000028c 	.word	0x2000028c

0800d228 <_malloc_r>:
 800d228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22a:	1ccd      	adds	r5, r1, #3
 800d22c:	f025 0503 	bic.w	r5, r5, #3
 800d230:	3508      	adds	r5, #8
 800d232:	2d0c      	cmp	r5, #12
 800d234:	bf38      	it	cc
 800d236:	250c      	movcc	r5, #12
 800d238:	2d00      	cmp	r5, #0
 800d23a:	4606      	mov	r6, r0
 800d23c:	db01      	blt.n	800d242 <_malloc_r+0x1a>
 800d23e:	42a9      	cmp	r1, r5
 800d240:	d903      	bls.n	800d24a <_malloc_r+0x22>
 800d242:	230c      	movs	r3, #12
 800d244:	6033      	str	r3, [r6, #0]
 800d246:	2000      	movs	r0, #0
 800d248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d24a:	f001 f803 	bl	800e254 <__malloc_lock>
 800d24e:	4921      	ldr	r1, [pc, #132]	; (800d2d4 <_malloc_r+0xac>)
 800d250:	680a      	ldr	r2, [r1, #0]
 800d252:	4614      	mov	r4, r2
 800d254:	b99c      	cbnz	r4, 800d27e <_malloc_r+0x56>
 800d256:	4f20      	ldr	r7, [pc, #128]	; (800d2d8 <_malloc_r+0xb0>)
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	b923      	cbnz	r3, 800d266 <_malloc_r+0x3e>
 800d25c:	4621      	mov	r1, r4
 800d25e:	4630      	mov	r0, r6
 800d260:	f000 fcd2 	bl	800dc08 <_sbrk_r>
 800d264:	6038      	str	r0, [r7, #0]
 800d266:	4629      	mov	r1, r5
 800d268:	4630      	mov	r0, r6
 800d26a:	f000 fccd 	bl	800dc08 <_sbrk_r>
 800d26e:	1c43      	adds	r3, r0, #1
 800d270:	d123      	bne.n	800d2ba <_malloc_r+0x92>
 800d272:	230c      	movs	r3, #12
 800d274:	6033      	str	r3, [r6, #0]
 800d276:	4630      	mov	r0, r6
 800d278:	f000 fff2 	bl	800e260 <__malloc_unlock>
 800d27c:	e7e3      	b.n	800d246 <_malloc_r+0x1e>
 800d27e:	6823      	ldr	r3, [r4, #0]
 800d280:	1b5b      	subs	r3, r3, r5
 800d282:	d417      	bmi.n	800d2b4 <_malloc_r+0x8c>
 800d284:	2b0b      	cmp	r3, #11
 800d286:	d903      	bls.n	800d290 <_malloc_r+0x68>
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	441c      	add	r4, r3
 800d28c:	6025      	str	r5, [r4, #0]
 800d28e:	e004      	b.n	800d29a <_malloc_r+0x72>
 800d290:	6863      	ldr	r3, [r4, #4]
 800d292:	42a2      	cmp	r2, r4
 800d294:	bf0c      	ite	eq
 800d296:	600b      	streq	r3, [r1, #0]
 800d298:	6053      	strne	r3, [r2, #4]
 800d29a:	4630      	mov	r0, r6
 800d29c:	f000 ffe0 	bl	800e260 <__malloc_unlock>
 800d2a0:	f104 000b 	add.w	r0, r4, #11
 800d2a4:	1d23      	adds	r3, r4, #4
 800d2a6:	f020 0007 	bic.w	r0, r0, #7
 800d2aa:	1ac2      	subs	r2, r0, r3
 800d2ac:	d0cc      	beq.n	800d248 <_malloc_r+0x20>
 800d2ae:	1a1b      	subs	r3, r3, r0
 800d2b0:	50a3      	str	r3, [r4, r2]
 800d2b2:	e7c9      	b.n	800d248 <_malloc_r+0x20>
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	6864      	ldr	r4, [r4, #4]
 800d2b8:	e7cc      	b.n	800d254 <_malloc_r+0x2c>
 800d2ba:	1cc4      	adds	r4, r0, #3
 800d2bc:	f024 0403 	bic.w	r4, r4, #3
 800d2c0:	42a0      	cmp	r0, r4
 800d2c2:	d0e3      	beq.n	800d28c <_malloc_r+0x64>
 800d2c4:	1a21      	subs	r1, r4, r0
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f000 fc9e 	bl	800dc08 <_sbrk_r>
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	d1dd      	bne.n	800d28c <_malloc_r+0x64>
 800d2d0:	e7cf      	b.n	800d272 <_malloc_r+0x4a>
 800d2d2:	bf00      	nop
 800d2d4:	2000028c 	.word	0x2000028c
 800d2d8:	20000290 	.word	0x20000290

0800d2dc <__ssputs_r>:
 800d2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e0:	688e      	ldr	r6, [r1, #8]
 800d2e2:	429e      	cmp	r6, r3
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	4690      	mov	r8, r2
 800d2ea:	461f      	mov	r7, r3
 800d2ec:	d838      	bhi.n	800d360 <__ssputs_r+0x84>
 800d2ee:	898a      	ldrh	r2, [r1, #12]
 800d2f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2f4:	d032      	beq.n	800d35c <__ssputs_r+0x80>
 800d2f6:	6825      	ldr	r5, [r4, #0]
 800d2f8:	6909      	ldr	r1, [r1, #16]
 800d2fa:	eba5 0901 	sub.w	r9, r5, r1
 800d2fe:	6965      	ldr	r5, [r4, #20]
 800d300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d308:	3301      	adds	r3, #1
 800d30a:	444b      	add	r3, r9
 800d30c:	106d      	asrs	r5, r5, #1
 800d30e:	429d      	cmp	r5, r3
 800d310:	bf38      	it	cc
 800d312:	461d      	movcc	r5, r3
 800d314:	0553      	lsls	r3, r2, #21
 800d316:	d531      	bpl.n	800d37c <__ssputs_r+0xa0>
 800d318:	4629      	mov	r1, r5
 800d31a:	f7ff ff85 	bl	800d228 <_malloc_r>
 800d31e:	4606      	mov	r6, r0
 800d320:	b950      	cbnz	r0, 800d338 <__ssputs_r+0x5c>
 800d322:	230c      	movs	r3, #12
 800d324:	f8ca 3000 	str.w	r3, [sl]
 800d328:	89a3      	ldrh	r3, [r4, #12]
 800d32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	f04f 30ff 	mov.w	r0, #4294967295
 800d334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d338:	6921      	ldr	r1, [r4, #16]
 800d33a:	464a      	mov	r2, r9
 800d33c:	f7ff fa4c 	bl	800c7d8 <memcpy>
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	6126      	str	r6, [r4, #16]
 800d34e:	6165      	str	r5, [r4, #20]
 800d350:	444e      	add	r6, r9
 800d352:	eba5 0509 	sub.w	r5, r5, r9
 800d356:	6026      	str	r6, [r4, #0]
 800d358:	60a5      	str	r5, [r4, #8]
 800d35a:	463e      	mov	r6, r7
 800d35c:	42be      	cmp	r6, r7
 800d35e:	d900      	bls.n	800d362 <__ssputs_r+0x86>
 800d360:	463e      	mov	r6, r7
 800d362:	4632      	mov	r2, r6
 800d364:	6820      	ldr	r0, [r4, #0]
 800d366:	4641      	mov	r1, r8
 800d368:	f000 ff5a 	bl	800e220 <memmove>
 800d36c:	68a3      	ldr	r3, [r4, #8]
 800d36e:	6822      	ldr	r2, [r4, #0]
 800d370:	1b9b      	subs	r3, r3, r6
 800d372:	4432      	add	r2, r6
 800d374:	60a3      	str	r3, [r4, #8]
 800d376:	6022      	str	r2, [r4, #0]
 800d378:	2000      	movs	r0, #0
 800d37a:	e7db      	b.n	800d334 <__ssputs_r+0x58>
 800d37c:	462a      	mov	r2, r5
 800d37e:	f000 ff75 	bl	800e26c <_realloc_r>
 800d382:	4606      	mov	r6, r0
 800d384:	2800      	cmp	r0, #0
 800d386:	d1e1      	bne.n	800d34c <__ssputs_r+0x70>
 800d388:	6921      	ldr	r1, [r4, #16]
 800d38a:	4650      	mov	r0, sl
 800d38c:	f7ff fefc 	bl	800d188 <_free_r>
 800d390:	e7c7      	b.n	800d322 <__ssputs_r+0x46>
	...

0800d394 <_svfiprintf_r>:
 800d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d398:	4698      	mov	r8, r3
 800d39a:	898b      	ldrh	r3, [r1, #12]
 800d39c:	061b      	lsls	r3, r3, #24
 800d39e:	b09d      	sub	sp, #116	; 0x74
 800d3a0:	4607      	mov	r7, r0
 800d3a2:	460d      	mov	r5, r1
 800d3a4:	4614      	mov	r4, r2
 800d3a6:	d50e      	bpl.n	800d3c6 <_svfiprintf_r+0x32>
 800d3a8:	690b      	ldr	r3, [r1, #16]
 800d3aa:	b963      	cbnz	r3, 800d3c6 <_svfiprintf_r+0x32>
 800d3ac:	2140      	movs	r1, #64	; 0x40
 800d3ae:	f7ff ff3b 	bl	800d228 <_malloc_r>
 800d3b2:	6028      	str	r0, [r5, #0]
 800d3b4:	6128      	str	r0, [r5, #16]
 800d3b6:	b920      	cbnz	r0, 800d3c2 <_svfiprintf_r+0x2e>
 800d3b8:	230c      	movs	r3, #12
 800d3ba:	603b      	str	r3, [r7, #0]
 800d3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c0:	e0d1      	b.n	800d566 <_svfiprintf_r+0x1d2>
 800d3c2:	2340      	movs	r3, #64	; 0x40
 800d3c4:	616b      	str	r3, [r5, #20]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ca:	2320      	movs	r3, #32
 800d3cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3d4:	2330      	movs	r3, #48	; 0x30
 800d3d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d580 <_svfiprintf_r+0x1ec>
 800d3da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3de:	f04f 0901 	mov.w	r9, #1
 800d3e2:	4623      	mov	r3, r4
 800d3e4:	469a      	mov	sl, r3
 800d3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ea:	b10a      	cbz	r2, 800d3f0 <_svfiprintf_r+0x5c>
 800d3ec:	2a25      	cmp	r2, #37	; 0x25
 800d3ee:	d1f9      	bne.n	800d3e4 <_svfiprintf_r+0x50>
 800d3f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3f4:	d00b      	beq.n	800d40e <_svfiprintf_r+0x7a>
 800d3f6:	465b      	mov	r3, fp
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	f7ff ff6d 	bl	800d2dc <__ssputs_r>
 800d402:	3001      	adds	r0, #1
 800d404:	f000 80aa 	beq.w	800d55c <_svfiprintf_r+0x1c8>
 800d408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d40a:	445a      	add	r2, fp
 800d40c:	9209      	str	r2, [sp, #36]	; 0x24
 800d40e:	f89a 3000 	ldrb.w	r3, [sl]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 80a2 	beq.w	800d55c <_svfiprintf_r+0x1c8>
 800d418:	2300      	movs	r3, #0
 800d41a:	f04f 32ff 	mov.w	r2, #4294967295
 800d41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d422:	f10a 0a01 	add.w	sl, sl, #1
 800d426:	9304      	str	r3, [sp, #16]
 800d428:	9307      	str	r3, [sp, #28]
 800d42a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d42e:	931a      	str	r3, [sp, #104]	; 0x68
 800d430:	4654      	mov	r4, sl
 800d432:	2205      	movs	r2, #5
 800d434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d438:	4851      	ldr	r0, [pc, #324]	; (800d580 <_svfiprintf_r+0x1ec>)
 800d43a:	f7f2 fef1 	bl	8000220 <memchr>
 800d43e:	9a04      	ldr	r2, [sp, #16]
 800d440:	b9d8      	cbnz	r0, 800d47a <_svfiprintf_r+0xe6>
 800d442:	06d0      	lsls	r0, r2, #27
 800d444:	bf44      	itt	mi
 800d446:	2320      	movmi	r3, #32
 800d448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d44c:	0711      	lsls	r1, r2, #28
 800d44e:	bf44      	itt	mi
 800d450:	232b      	movmi	r3, #43	; 0x2b
 800d452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d456:	f89a 3000 	ldrb.w	r3, [sl]
 800d45a:	2b2a      	cmp	r3, #42	; 0x2a
 800d45c:	d015      	beq.n	800d48a <_svfiprintf_r+0xf6>
 800d45e:	9a07      	ldr	r2, [sp, #28]
 800d460:	4654      	mov	r4, sl
 800d462:	2000      	movs	r0, #0
 800d464:	f04f 0c0a 	mov.w	ip, #10
 800d468:	4621      	mov	r1, r4
 800d46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d46e:	3b30      	subs	r3, #48	; 0x30
 800d470:	2b09      	cmp	r3, #9
 800d472:	d94e      	bls.n	800d512 <_svfiprintf_r+0x17e>
 800d474:	b1b0      	cbz	r0, 800d4a4 <_svfiprintf_r+0x110>
 800d476:	9207      	str	r2, [sp, #28]
 800d478:	e014      	b.n	800d4a4 <_svfiprintf_r+0x110>
 800d47a:	eba0 0308 	sub.w	r3, r0, r8
 800d47e:	fa09 f303 	lsl.w	r3, r9, r3
 800d482:	4313      	orrs	r3, r2
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	46a2      	mov	sl, r4
 800d488:	e7d2      	b.n	800d430 <_svfiprintf_r+0x9c>
 800d48a:	9b03      	ldr	r3, [sp, #12]
 800d48c:	1d19      	adds	r1, r3, #4
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	9103      	str	r1, [sp, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	bfbb      	ittet	lt
 800d496:	425b      	neglt	r3, r3
 800d498:	f042 0202 	orrlt.w	r2, r2, #2
 800d49c:	9307      	strge	r3, [sp, #28]
 800d49e:	9307      	strlt	r3, [sp, #28]
 800d4a0:	bfb8      	it	lt
 800d4a2:	9204      	strlt	r2, [sp, #16]
 800d4a4:	7823      	ldrb	r3, [r4, #0]
 800d4a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d4a8:	d10c      	bne.n	800d4c4 <_svfiprintf_r+0x130>
 800d4aa:	7863      	ldrb	r3, [r4, #1]
 800d4ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d4ae:	d135      	bne.n	800d51c <_svfiprintf_r+0x188>
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	9203      	str	r2, [sp, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	bfb8      	it	lt
 800d4bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4c0:	3402      	adds	r4, #2
 800d4c2:	9305      	str	r3, [sp, #20]
 800d4c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d590 <_svfiprintf_r+0x1fc>
 800d4c8:	7821      	ldrb	r1, [r4, #0]
 800d4ca:	2203      	movs	r2, #3
 800d4cc:	4650      	mov	r0, sl
 800d4ce:	f7f2 fea7 	bl	8000220 <memchr>
 800d4d2:	b140      	cbz	r0, 800d4e6 <_svfiprintf_r+0x152>
 800d4d4:	2340      	movs	r3, #64	; 0x40
 800d4d6:	eba0 000a 	sub.w	r0, r0, sl
 800d4da:	fa03 f000 	lsl.w	r0, r3, r0
 800d4de:	9b04      	ldr	r3, [sp, #16]
 800d4e0:	4303      	orrs	r3, r0
 800d4e2:	3401      	adds	r4, #1
 800d4e4:	9304      	str	r3, [sp, #16]
 800d4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ea:	4826      	ldr	r0, [pc, #152]	; (800d584 <_svfiprintf_r+0x1f0>)
 800d4ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4f0:	2206      	movs	r2, #6
 800d4f2:	f7f2 fe95 	bl	8000220 <memchr>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d038      	beq.n	800d56c <_svfiprintf_r+0x1d8>
 800d4fa:	4b23      	ldr	r3, [pc, #140]	; (800d588 <_svfiprintf_r+0x1f4>)
 800d4fc:	bb1b      	cbnz	r3, 800d546 <_svfiprintf_r+0x1b2>
 800d4fe:	9b03      	ldr	r3, [sp, #12]
 800d500:	3307      	adds	r3, #7
 800d502:	f023 0307 	bic.w	r3, r3, #7
 800d506:	3308      	adds	r3, #8
 800d508:	9303      	str	r3, [sp, #12]
 800d50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50c:	4433      	add	r3, r6
 800d50e:	9309      	str	r3, [sp, #36]	; 0x24
 800d510:	e767      	b.n	800d3e2 <_svfiprintf_r+0x4e>
 800d512:	fb0c 3202 	mla	r2, ip, r2, r3
 800d516:	460c      	mov	r4, r1
 800d518:	2001      	movs	r0, #1
 800d51a:	e7a5      	b.n	800d468 <_svfiprintf_r+0xd4>
 800d51c:	2300      	movs	r3, #0
 800d51e:	3401      	adds	r4, #1
 800d520:	9305      	str	r3, [sp, #20]
 800d522:	4619      	mov	r1, r3
 800d524:	f04f 0c0a 	mov.w	ip, #10
 800d528:	4620      	mov	r0, r4
 800d52a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d52e:	3a30      	subs	r2, #48	; 0x30
 800d530:	2a09      	cmp	r2, #9
 800d532:	d903      	bls.n	800d53c <_svfiprintf_r+0x1a8>
 800d534:	2b00      	cmp	r3, #0
 800d536:	d0c5      	beq.n	800d4c4 <_svfiprintf_r+0x130>
 800d538:	9105      	str	r1, [sp, #20]
 800d53a:	e7c3      	b.n	800d4c4 <_svfiprintf_r+0x130>
 800d53c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d540:	4604      	mov	r4, r0
 800d542:	2301      	movs	r3, #1
 800d544:	e7f0      	b.n	800d528 <_svfiprintf_r+0x194>
 800d546:	ab03      	add	r3, sp, #12
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	462a      	mov	r2, r5
 800d54c:	4b0f      	ldr	r3, [pc, #60]	; (800d58c <_svfiprintf_r+0x1f8>)
 800d54e:	a904      	add	r1, sp, #16
 800d550:	4638      	mov	r0, r7
 800d552:	f7fc f9e1 	bl	8009918 <_printf_float>
 800d556:	1c42      	adds	r2, r0, #1
 800d558:	4606      	mov	r6, r0
 800d55a:	d1d6      	bne.n	800d50a <_svfiprintf_r+0x176>
 800d55c:	89ab      	ldrh	r3, [r5, #12]
 800d55e:	065b      	lsls	r3, r3, #25
 800d560:	f53f af2c 	bmi.w	800d3bc <_svfiprintf_r+0x28>
 800d564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d566:	b01d      	add	sp, #116	; 0x74
 800d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56c:	ab03      	add	r3, sp, #12
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	462a      	mov	r2, r5
 800d572:	4b06      	ldr	r3, [pc, #24]	; (800d58c <_svfiprintf_r+0x1f8>)
 800d574:	a904      	add	r1, sp, #16
 800d576:	4638      	mov	r0, r7
 800d578:	f7fc fc72 	bl	8009e60 <_printf_i>
 800d57c:	e7eb      	b.n	800d556 <_svfiprintf_r+0x1c2>
 800d57e:	bf00      	nop
 800d580:	0800ed34 	.word	0x0800ed34
 800d584:	0800ed3e 	.word	0x0800ed3e
 800d588:	08009919 	.word	0x08009919
 800d58c:	0800d2dd 	.word	0x0800d2dd
 800d590:	0800ed3a 	.word	0x0800ed3a

0800d594 <_sungetc_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	1c4b      	adds	r3, r1, #1
 800d598:	4614      	mov	r4, r2
 800d59a:	d103      	bne.n	800d5a4 <_sungetc_r+0x10>
 800d59c:	f04f 35ff 	mov.w	r5, #4294967295
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	8993      	ldrh	r3, [r2, #12]
 800d5a6:	f023 0320 	bic.w	r3, r3, #32
 800d5aa:	8193      	strh	r3, [r2, #12]
 800d5ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5ae:	6852      	ldr	r2, [r2, #4]
 800d5b0:	b2cd      	uxtb	r5, r1
 800d5b2:	b18b      	cbz	r3, 800d5d8 <_sungetc_r+0x44>
 800d5b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	dd08      	ble.n	800d5cc <_sungetc_r+0x38>
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	1e5a      	subs	r2, r3, #1
 800d5be:	6022      	str	r2, [r4, #0]
 800d5c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d5c4:	6863      	ldr	r3, [r4, #4]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	6063      	str	r3, [r4, #4]
 800d5ca:	e7e9      	b.n	800d5a0 <_sungetc_r+0xc>
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	f000 fbf5 	bl	800ddbc <__submore>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d0f1      	beq.n	800d5ba <_sungetc_r+0x26>
 800d5d6:	e7e1      	b.n	800d59c <_sungetc_r+0x8>
 800d5d8:	6921      	ldr	r1, [r4, #16]
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	b151      	cbz	r1, 800d5f4 <_sungetc_r+0x60>
 800d5de:	4299      	cmp	r1, r3
 800d5e0:	d208      	bcs.n	800d5f4 <_sungetc_r+0x60>
 800d5e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d5e6:	42a9      	cmp	r1, r5
 800d5e8:	d104      	bne.n	800d5f4 <_sungetc_r+0x60>
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	3201      	adds	r2, #1
 800d5ee:	6023      	str	r3, [r4, #0]
 800d5f0:	6062      	str	r2, [r4, #4]
 800d5f2:	e7d5      	b.n	800d5a0 <_sungetc_r+0xc>
 800d5f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d5f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5fc:	6363      	str	r3, [r4, #52]	; 0x34
 800d5fe:	2303      	movs	r3, #3
 800d600:	63a3      	str	r3, [r4, #56]	; 0x38
 800d602:	4623      	mov	r3, r4
 800d604:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	2301      	movs	r3, #1
 800d60c:	e7dc      	b.n	800d5c8 <_sungetc_r+0x34>

0800d60e <__ssrefill_r>:
 800d60e:	b510      	push	{r4, lr}
 800d610:	460c      	mov	r4, r1
 800d612:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d614:	b169      	cbz	r1, 800d632 <__ssrefill_r+0x24>
 800d616:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d61a:	4299      	cmp	r1, r3
 800d61c:	d001      	beq.n	800d622 <__ssrefill_r+0x14>
 800d61e:	f7ff fdb3 	bl	800d188 <_free_r>
 800d622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d624:	6063      	str	r3, [r4, #4]
 800d626:	2000      	movs	r0, #0
 800d628:	6360      	str	r0, [r4, #52]	; 0x34
 800d62a:	b113      	cbz	r3, 800d632 <__ssrefill_r+0x24>
 800d62c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d62e:	6023      	str	r3, [r4, #0]
 800d630:	bd10      	pop	{r4, pc}
 800d632:	6923      	ldr	r3, [r4, #16]
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	2300      	movs	r3, #0
 800d638:	6063      	str	r3, [r4, #4]
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	f043 0320 	orr.w	r3, r3, #32
 800d640:	81a3      	strh	r3, [r4, #12]
 800d642:	f04f 30ff 	mov.w	r0, #4294967295
 800d646:	e7f3      	b.n	800d630 <__ssrefill_r+0x22>

0800d648 <__ssvfiscanf_r>:
 800d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64c:	460c      	mov	r4, r1
 800d64e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800d652:	2100      	movs	r1, #0
 800d654:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d658:	49b2      	ldr	r1, [pc, #712]	; (800d924 <__ssvfiscanf_r+0x2dc>)
 800d65a:	91a0      	str	r1, [sp, #640]	; 0x280
 800d65c:	f10d 0804 	add.w	r8, sp, #4
 800d660:	49b1      	ldr	r1, [pc, #708]	; (800d928 <__ssvfiscanf_r+0x2e0>)
 800d662:	4fb2      	ldr	r7, [pc, #712]	; (800d92c <__ssvfiscanf_r+0x2e4>)
 800d664:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800d930 <__ssvfiscanf_r+0x2e8>
 800d668:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d66c:	4606      	mov	r6, r0
 800d66e:	91a1      	str	r1, [sp, #644]	; 0x284
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	f892 a000 	ldrb.w	sl, [r2]
 800d676:	f1ba 0f00 	cmp.w	sl, #0
 800d67a:	f000 8151 	beq.w	800d920 <__ssvfiscanf_r+0x2d8>
 800d67e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800d682:	f013 0308 	ands.w	r3, r3, #8
 800d686:	f102 0501 	add.w	r5, r2, #1
 800d68a:	d019      	beq.n	800d6c0 <__ssvfiscanf_r+0x78>
 800d68c:	6863      	ldr	r3, [r4, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	dd0f      	ble.n	800d6b2 <__ssvfiscanf_r+0x6a>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	781a      	ldrb	r2, [r3, #0]
 800d696:	5cba      	ldrb	r2, [r7, r2]
 800d698:	0712      	lsls	r2, r2, #28
 800d69a:	d401      	bmi.n	800d6a0 <__ssvfiscanf_r+0x58>
 800d69c:	462a      	mov	r2, r5
 800d69e:	e7e8      	b.n	800d672 <__ssvfiscanf_r+0x2a>
 800d6a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d6a2:	3201      	adds	r2, #1
 800d6a4:	9245      	str	r2, [sp, #276]	; 0x114
 800d6a6:	6862      	ldr	r2, [r4, #4]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	3a01      	subs	r2, #1
 800d6ac:	6062      	str	r2, [r4, #4]
 800d6ae:	6023      	str	r3, [r4, #0]
 800d6b0:	e7ec      	b.n	800d68c <__ssvfiscanf_r+0x44>
 800d6b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	4798      	blx	r3
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d0e9      	beq.n	800d692 <__ssvfiscanf_r+0x4a>
 800d6be:	e7ed      	b.n	800d69c <__ssvfiscanf_r+0x54>
 800d6c0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800d6c4:	f040 8083 	bne.w	800d7ce <__ssvfiscanf_r+0x186>
 800d6c8:	9341      	str	r3, [sp, #260]	; 0x104
 800d6ca:	9343      	str	r3, [sp, #268]	; 0x10c
 800d6cc:	7853      	ldrb	r3, [r2, #1]
 800d6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d6d0:	bf02      	ittt	eq
 800d6d2:	2310      	moveq	r3, #16
 800d6d4:	1c95      	addeq	r5, r2, #2
 800d6d6:	9341      	streq	r3, [sp, #260]	; 0x104
 800d6d8:	220a      	movs	r2, #10
 800d6da:	46ab      	mov	fp, r5
 800d6dc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800d6e0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d6e4:	2b09      	cmp	r3, #9
 800d6e6:	d91d      	bls.n	800d724 <__ssvfiscanf_r+0xdc>
 800d6e8:	4891      	ldr	r0, [pc, #580]	; (800d930 <__ssvfiscanf_r+0x2e8>)
 800d6ea:	2203      	movs	r2, #3
 800d6ec:	f7f2 fd98 	bl	8000220 <memchr>
 800d6f0:	b140      	cbz	r0, 800d704 <__ssvfiscanf_r+0xbc>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	eba0 0009 	sub.w	r0, r0, r9
 800d6f8:	fa03 f000 	lsl.w	r0, r3, r0
 800d6fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d6fe:	4318      	orrs	r0, r3
 800d700:	9041      	str	r0, [sp, #260]	; 0x104
 800d702:	465d      	mov	r5, fp
 800d704:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d708:	2b78      	cmp	r3, #120	; 0x78
 800d70a:	d806      	bhi.n	800d71a <__ssvfiscanf_r+0xd2>
 800d70c:	2b57      	cmp	r3, #87	; 0x57
 800d70e:	d810      	bhi.n	800d732 <__ssvfiscanf_r+0xea>
 800d710:	2b25      	cmp	r3, #37	; 0x25
 800d712:	d05c      	beq.n	800d7ce <__ssvfiscanf_r+0x186>
 800d714:	d856      	bhi.n	800d7c4 <__ssvfiscanf_r+0x17c>
 800d716:	2b00      	cmp	r3, #0
 800d718:	d074      	beq.n	800d804 <__ssvfiscanf_r+0x1bc>
 800d71a:	2303      	movs	r3, #3
 800d71c:	9347      	str	r3, [sp, #284]	; 0x11c
 800d71e:	230a      	movs	r3, #10
 800d720:	9342      	str	r3, [sp, #264]	; 0x108
 800d722:	e081      	b.n	800d828 <__ssvfiscanf_r+0x1e0>
 800d724:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d726:	fb02 1303 	mla	r3, r2, r3, r1
 800d72a:	3b30      	subs	r3, #48	; 0x30
 800d72c:	9343      	str	r3, [sp, #268]	; 0x10c
 800d72e:	465d      	mov	r5, fp
 800d730:	e7d3      	b.n	800d6da <__ssvfiscanf_r+0x92>
 800d732:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d736:	2a20      	cmp	r2, #32
 800d738:	d8ef      	bhi.n	800d71a <__ssvfiscanf_r+0xd2>
 800d73a:	a101      	add	r1, pc, #4	; (adr r1, 800d740 <__ssvfiscanf_r+0xf8>)
 800d73c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d740:	0800d813 	.word	0x0800d813
 800d744:	0800d71b 	.word	0x0800d71b
 800d748:	0800d71b 	.word	0x0800d71b
 800d74c:	0800d871 	.word	0x0800d871
 800d750:	0800d71b 	.word	0x0800d71b
 800d754:	0800d71b 	.word	0x0800d71b
 800d758:	0800d71b 	.word	0x0800d71b
 800d75c:	0800d71b 	.word	0x0800d71b
 800d760:	0800d71b 	.word	0x0800d71b
 800d764:	0800d71b 	.word	0x0800d71b
 800d768:	0800d71b 	.word	0x0800d71b
 800d76c:	0800d887 	.word	0x0800d887
 800d770:	0800d85d 	.word	0x0800d85d
 800d774:	0800d7cb 	.word	0x0800d7cb
 800d778:	0800d7cb 	.word	0x0800d7cb
 800d77c:	0800d7cb 	.word	0x0800d7cb
 800d780:	0800d71b 	.word	0x0800d71b
 800d784:	0800d861 	.word	0x0800d861
 800d788:	0800d71b 	.word	0x0800d71b
 800d78c:	0800d71b 	.word	0x0800d71b
 800d790:	0800d71b 	.word	0x0800d71b
 800d794:	0800d71b 	.word	0x0800d71b
 800d798:	0800d897 	.word	0x0800d897
 800d79c:	0800d869 	.word	0x0800d869
 800d7a0:	0800d80b 	.word	0x0800d80b
 800d7a4:	0800d71b 	.word	0x0800d71b
 800d7a8:	0800d71b 	.word	0x0800d71b
 800d7ac:	0800d893 	.word	0x0800d893
 800d7b0:	0800d71b 	.word	0x0800d71b
 800d7b4:	0800d85d 	.word	0x0800d85d
 800d7b8:	0800d71b 	.word	0x0800d71b
 800d7bc:	0800d71b 	.word	0x0800d71b
 800d7c0:	0800d813 	.word	0x0800d813
 800d7c4:	3b45      	subs	r3, #69	; 0x45
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	d8a7      	bhi.n	800d71a <__ssvfiscanf_r+0xd2>
 800d7ca:	2305      	movs	r3, #5
 800d7cc:	e02b      	b.n	800d826 <__ssvfiscanf_r+0x1de>
 800d7ce:	6863      	ldr	r3, [r4, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	dd0d      	ble.n	800d7f0 <__ssvfiscanf_r+0x1a8>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	781a      	ldrb	r2, [r3, #0]
 800d7d8:	4552      	cmp	r2, sl
 800d7da:	f040 80a1 	bne.w	800d920 <__ssvfiscanf_r+0x2d8>
 800d7de:	3301      	adds	r3, #1
 800d7e0:	6862      	ldr	r2, [r4, #4]
 800d7e2:	6023      	str	r3, [r4, #0]
 800d7e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d7e6:	3a01      	subs	r2, #1
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	6062      	str	r2, [r4, #4]
 800d7ec:	9345      	str	r3, [sp, #276]	; 0x114
 800d7ee:	e755      	b.n	800d69c <__ssvfiscanf_r+0x54>
 800d7f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	4798      	blx	r3
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d0eb      	beq.n	800d7d4 <__ssvfiscanf_r+0x18c>
 800d7fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f040 8084 	bne.w	800d90c <__ssvfiscanf_r+0x2c4>
 800d804:	f04f 30ff 	mov.w	r0, #4294967295
 800d808:	e086      	b.n	800d918 <__ssvfiscanf_r+0x2d0>
 800d80a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d80c:	f042 0220 	orr.w	r2, r2, #32
 800d810:	9241      	str	r2, [sp, #260]	; 0x104
 800d812:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d818:	9241      	str	r2, [sp, #260]	; 0x104
 800d81a:	2210      	movs	r2, #16
 800d81c:	2b6f      	cmp	r3, #111	; 0x6f
 800d81e:	9242      	str	r2, [sp, #264]	; 0x108
 800d820:	bf34      	ite	cc
 800d822:	2303      	movcc	r3, #3
 800d824:	2304      	movcs	r3, #4
 800d826:	9347      	str	r3, [sp, #284]	; 0x11c
 800d828:	6863      	ldr	r3, [r4, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dd41      	ble.n	800d8b2 <__ssvfiscanf_r+0x26a>
 800d82e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d830:	0659      	lsls	r1, r3, #25
 800d832:	d404      	bmi.n	800d83e <__ssvfiscanf_r+0x1f6>
 800d834:	6823      	ldr	r3, [r4, #0]
 800d836:	781a      	ldrb	r2, [r3, #0]
 800d838:	5cba      	ldrb	r2, [r7, r2]
 800d83a:	0712      	lsls	r2, r2, #28
 800d83c:	d440      	bmi.n	800d8c0 <__ssvfiscanf_r+0x278>
 800d83e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d840:	2b02      	cmp	r3, #2
 800d842:	dc4f      	bgt.n	800d8e4 <__ssvfiscanf_r+0x29c>
 800d844:	466b      	mov	r3, sp
 800d846:	4622      	mov	r2, r4
 800d848:	a941      	add	r1, sp, #260	; 0x104
 800d84a:	4630      	mov	r0, r6
 800d84c:	f000 f874 	bl	800d938 <_scanf_chars>
 800d850:	2801      	cmp	r0, #1
 800d852:	d065      	beq.n	800d920 <__ssvfiscanf_r+0x2d8>
 800d854:	2802      	cmp	r0, #2
 800d856:	f47f af21 	bne.w	800d69c <__ssvfiscanf_r+0x54>
 800d85a:	e7cf      	b.n	800d7fc <__ssvfiscanf_r+0x1b4>
 800d85c:	220a      	movs	r2, #10
 800d85e:	e7dd      	b.n	800d81c <__ssvfiscanf_r+0x1d4>
 800d860:	2300      	movs	r3, #0
 800d862:	9342      	str	r3, [sp, #264]	; 0x108
 800d864:	2303      	movs	r3, #3
 800d866:	e7de      	b.n	800d826 <__ssvfiscanf_r+0x1de>
 800d868:	2308      	movs	r3, #8
 800d86a:	9342      	str	r3, [sp, #264]	; 0x108
 800d86c:	2304      	movs	r3, #4
 800d86e:	e7da      	b.n	800d826 <__ssvfiscanf_r+0x1de>
 800d870:	4629      	mov	r1, r5
 800d872:	4640      	mov	r0, r8
 800d874:	f000 f9d8 	bl	800dc28 <__sccl>
 800d878:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d87e:	9341      	str	r3, [sp, #260]	; 0x104
 800d880:	4605      	mov	r5, r0
 800d882:	2301      	movs	r3, #1
 800d884:	e7cf      	b.n	800d826 <__ssvfiscanf_r+0x1de>
 800d886:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d88c:	9341      	str	r3, [sp, #260]	; 0x104
 800d88e:	2300      	movs	r3, #0
 800d890:	e7c9      	b.n	800d826 <__ssvfiscanf_r+0x1de>
 800d892:	2302      	movs	r3, #2
 800d894:	e7c7      	b.n	800d826 <__ssvfiscanf_r+0x1de>
 800d896:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d898:	06c3      	lsls	r3, r0, #27
 800d89a:	f53f aeff 	bmi.w	800d69c <__ssvfiscanf_r+0x54>
 800d89e:	9b00      	ldr	r3, [sp, #0]
 800d8a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d8a2:	1d19      	adds	r1, r3, #4
 800d8a4:	9100      	str	r1, [sp, #0]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	07c0      	lsls	r0, r0, #31
 800d8aa:	bf4c      	ite	mi
 800d8ac:	801a      	strhmi	r2, [r3, #0]
 800d8ae:	601a      	strpl	r2, [r3, #0]
 800d8b0:	e6f4      	b.n	800d69c <__ssvfiscanf_r+0x54>
 800d8b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d8b4:	4621      	mov	r1, r4
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	4798      	blx	r3
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d0b7      	beq.n	800d82e <__ssvfiscanf_r+0x1e6>
 800d8be:	e79d      	b.n	800d7fc <__ssvfiscanf_r+0x1b4>
 800d8c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d8c2:	3201      	adds	r2, #1
 800d8c4:	9245      	str	r2, [sp, #276]	; 0x114
 800d8c6:	6862      	ldr	r2, [r4, #4]
 800d8c8:	3a01      	subs	r2, #1
 800d8ca:	2a00      	cmp	r2, #0
 800d8cc:	6062      	str	r2, [r4, #4]
 800d8ce:	dd02      	ble.n	800d8d6 <__ssvfiscanf_r+0x28e>
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	6023      	str	r3, [r4, #0]
 800d8d4:	e7ae      	b.n	800d834 <__ssvfiscanf_r+0x1ec>
 800d8d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d8d8:	4621      	mov	r1, r4
 800d8da:	4630      	mov	r0, r6
 800d8dc:	4798      	blx	r3
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d0a8      	beq.n	800d834 <__ssvfiscanf_r+0x1ec>
 800d8e2:	e78b      	b.n	800d7fc <__ssvfiscanf_r+0x1b4>
 800d8e4:	2b04      	cmp	r3, #4
 800d8e6:	dc06      	bgt.n	800d8f6 <__ssvfiscanf_r+0x2ae>
 800d8e8:	466b      	mov	r3, sp
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	a941      	add	r1, sp, #260	; 0x104
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f000 f87a 	bl	800d9e8 <_scanf_i>
 800d8f4:	e7ac      	b.n	800d850 <__ssvfiscanf_r+0x208>
 800d8f6:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <__ssvfiscanf_r+0x2ec>)
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f43f aecf 	beq.w	800d69c <__ssvfiscanf_r+0x54>
 800d8fe:	466b      	mov	r3, sp
 800d900:	4622      	mov	r2, r4
 800d902:	a941      	add	r1, sp, #260	; 0x104
 800d904:	4630      	mov	r0, r6
 800d906:	f7fc fbd1 	bl	800a0ac <_scanf_float>
 800d90a:	e7a1      	b.n	800d850 <__ssvfiscanf_r+0x208>
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d912:	bf18      	it	ne
 800d914:	f04f 30ff 	movne.w	r0, #4294967295
 800d918:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d920:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d922:	e7f9      	b.n	800d918 <__ssvfiscanf_r+0x2d0>
 800d924:	0800d595 	.word	0x0800d595
 800d928:	0800d60f 	.word	0x0800d60f
 800d92c:	0800e9c1 	.word	0x0800e9c1
 800d930:	0800ed3a 	.word	0x0800ed3a
 800d934:	0800a0ad 	.word	0x0800a0ad

0800d938 <_scanf_chars>:
 800d938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d93c:	4615      	mov	r5, r2
 800d93e:	688a      	ldr	r2, [r1, #8]
 800d940:	4680      	mov	r8, r0
 800d942:	460c      	mov	r4, r1
 800d944:	b932      	cbnz	r2, 800d954 <_scanf_chars+0x1c>
 800d946:	698a      	ldr	r2, [r1, #24]
 800d948:	2a00      	cmp	r2, #0
 800d94a:	bf0c      	ite	eq
 800d94c:	2201      	moveq	r2, #1
 800d94e:	f04f 32ff 	movne.w	r2, #4294967295
 800d952:	608a      	str	r2, [r1, #8]
 800d954:	6822      	ldr	r2, [r4, #0]
 800d956:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d9e4 <_scanf_chars+0xac>
 800d95a:	06d1      	lsls	r1, r2, #27
 800d95c:	bf5f      	itttt	pl
 800d95e:	681a      	ldrpl	r2, [r3, #0]
 800d960:	1d11      	addpl	r1, r2, #4
 800d962:	6019      	strpl	r1, [r3, #0]
 800d964:	6816      	ldrpl	r6, [r2, #0]
 800d966:	2700      	movs	r7, #0
 800d968:	69a0      	ldr	r0, [r4, #24]
 800d96a:	b188      	cbz	r0, 800d990 <_scanf_chars+0x58>
 800d96c:	2801      	cmp	r0, #1
 800d96e:	d107      	bne.n	800d980 <_scanf_chars+0x48>
 800d970:	682b      	ldr	r3, [r5, #0]
 800d972:	781a      	ldrb	r2, [r3, #0]
 800d974:	6963      	ldr	r3, [r4, #20]
 800d976:	5c9b      	ldrb	r3, [r3, r2]
 800d978:	b953      	cbnz	r3, 800d990 <_scanf_chars+0x58>
 800d97a:	bb27      	cbnz	r7, 800d9c6 <_scanf_chars+0x8e>
 800d97c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d980:	2802      	cmp	r0, #2
 800d982:	d120      	bne.n	800d9c6 <_scanf_chars+0x8e>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d98c:	071b      	lsls	r3, r3, #28
 800d98e:	d41a      	bmi.n	800d9c6 <_scanf_chars+0x8e>
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	06da      	lsls	r2, r3, #27
 800d994:	bf5e      	ittt	pl
 800d996:	682b      	ldrpl	r3, [r5, #0]
 800d998:	781b      	ldrbpl	r3, [r3, #0]
 800d99a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d99e:	682a      	ldr	r2, [r5, #0]
 800d9a0:	686b      	ldr	r3, [r5, #4]
 800d9a2:	3201      	adds	r2, #1
 800d9a4:	602a      	str	r2, [r5, #0]
 800d9a6:	68a2      	ldr	r2, [r4, #8]
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	3a01      	subs	r2, #1
 800d9ac:	606b      	str	r3, [r5, #4]
 800d9ae:	3701      	adds	r7, #1
 800d9b0:	60a2      	str	r2, [r4, #8]
 800d9b2:	b142      	cbz	r2, 800d9c6 <_scanf_chars+0x8e>
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	dcd7      	bgt.n	800d968 <_scanf_chars+0x30>
 800d9b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d9bc:	4629      	mov	r1, r5
 800d9be:	4640      	mov	r0, r8
 800d9c0:	4798      	blx	r3
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d0d0      	beq.n	800d968 <_scanf_chars+0x30>
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	f013 0310 	ands.w	r3, r3, #16
 800d9cc:	d105      	bne.n	800d9da <_scanf_chars+0xa2>
 800d9ce:	68e2      	ldr	r2, [r4, #12]
 800d9d0:	3201      	adds	r2, #1
 800d9d2:	60e2      	str	r2, [r4, #12]
 800d9d4:	69a2      	ldr	r2, [r4, #24]
 800d9d6:	b102      	cbz	r2, 800d9da <_scanf_chars+0xa2>
 800d9d8:	7033      	strb	r3, [r6, #0]
 800d9da:	6923      	ldr	r3, [r4, #16]
 800d9dc:	441f      	add	r7, r3
 800d9de:	6127      	str	r7, [r4, #16]
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	e7cb      	b.n	800d97c <_scanf_chars+0x44>
 800d9e4:	0800e9c1 	.word	0x0800e9c1

0800d9e8 <_scanf_i>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	4698      	mov	r8, r3
 800d9ee:	4b74      	ldr	r3, [pc, #464]	; (800dbc0 <_scanf_i+0x1d8>)
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	4682      	mov	sl, r0
 800d9f4:	4616      	mov	r6, r2
 800d9f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9fa:	b087      	sub	sp, #28
 800d9fc:	ab03      	add	r3, sp, #12
 800d9fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800da02:	4b70      	ldr	r3, [pc, #448]	; (800dbc4 <_scanf_i+0x1dc>)
 800da04:	69a1      	ldr	r1, [r4, #24]
 800da06:	4a70      	ldr	r2, [pc, #448]	; (800dbc8 <_scanf_i+0x1e0>)
 800da08:	2903      	cmp	r1, #3
 800da0a:	bf18      	it	ne
 800da0c:	461a      	movne	r2, r3
 800da0e:	68a3      	ldr	r3, [r4, #8]
 800da10:	9201      	str	r2, [sp, #4]
 800da12:	1e5a      	subs	r2, r3, #1
 800da14:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800da18:	bf88      	it	hi
 800da1a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800da1e:	4627      	mov	r7, r4
 800da20:	bf82      	ittt	hi
 800da22:	eb03 0905 	addhi.w	r9, r3, r5
 800da26:	f240 135d 	movwhi	r3, #349	; 0x15d
 800da2a:	60a3      	strhi	r3, [r4, #8]
 800da2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800da30:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800da34:	bf98      	it	ls
 800da36:	f04f 0900 	movls.w	r9, #0
 800da3a:	6023      	str	r3, [r4, #0]
 800da3c:	463d      	mov	r5, r7
 800da3e:	f04f 0b00 	mov.w	fp, #0
 800da42:	6831      	ldr	r1, [r6, #0]
 800da44:	ab03      	add	r3, sp, #12
 800da46:	7809      	ldrb	r1, [r1, #0]
 800da48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800da4c:	2202      	movs	r2, #2
 800da4e:	f7f2 fbe7 	bl	8000220 <memchr>
 800da52:	b328      	cbz	r0, 800daa0 <_scanf_i+0xb8>
 800da54:	f1bb 0f01 	cmp.w	fp, #1
 800da58:	d159      	bne.n	800db0e <_scanf_i+0x126>
 800da5a:	6862      	ldr	r2, [r4, #4]
 800da5c:	b92a      	cbnz	r2, 800da6a <_scanf_i+0x82>
 800da5e:	6822      	ldr	r2, [r4, #0]
 800da60:	2308      	movs	r3, #8
 800da62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da66:	6063      	str	r3, [r4, #4]
 800da68:	6022      	str	r2, [r4, #0]
 800da6a:	6822      	ldr	r2, [r4, #0]
 800da6c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800da70:	6022      	str	r2, [r4, #0]
 800da72:	68a2      	ldr	r2, [r4, #8]
 800da74:	1e51      	subs	r1, r2, #1
 800da76:	60a1      	str	r1, [r4, #8]
 800da78:	b192      	cbz	r2, 800daa0 <_scanf_i+0xb8>
 800da7a:	6832      	ldr	r2, [r6, #0]
 800da7c:	1c51      	adds	r1, r2, #1
 800da7e:	6031      	str	r1, [r6, #0]
 800da80:	7812      	ldrb	r2, [r2, #0]
 800da82:	f805 2b01 	strb.w	r2, [r5], #1
 800da86:	6872      	ldr	r2, [r6, #4]
 800da88:	3a01      	subs	r2, #1
 800da8a:	2a00      	cmp	r2, #0
 800da8c:	6072      	str	r2, [r6, #4]
 800da8e:	dc07      	bgt.n	800daa0 <_scanf_i+0xb8>
 800da90:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800da94:	4631      	mov	r1, r6
 800da96:	4650      	mov	r0, sl
 800da98:	4790      	blx	r2
 800da9a:	2800      	cmp	r0, #0
 800da9c:	f040 8085 	bne.w	800dbaa <_scanf_i+0x1c2>
 800daa0:	f10b 0b01 	add.w	fp, fp, #1
 800daa4:	f1bb 0f03 	cmp.w	fp, #3
 800daa8:	d1cb      	bne.n	800da42 <_scanf_i+0x5a>
 800daaa:	6863      	ldr	r3, [r4, #4]
 800daac:	b90b      	cbnz	r3, 800dab2 <_scanf_i+0xca>
 800daae:	230a      	movs	r3, #10
 800dab0:	6063      	str	r3, [r4, #4]
 800dab2:	6863      	ldr	r3, [r4, #4]
 800dab4:	4945      	ldr	r1, [pc, #276]	; (800dbcc <_scanf_i+0x1e4>)
 800dab6:	6960      	ldr	r0, [r4, #20]
 800dab8:	1ac9      	subs	r1, r1, r3
 800daba:	f000 f8b5 	bl	800dc28 <__sccl>
 800dabe:	f04f 0b00 	mov.w	fp, #0
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	6822      	ldr	r2, [r4, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d03d      	beq.n	800db46 <_scanf_i+0x15e>
 800daca:	6831      	ldr	r1, [r6, #0]
 800dacc:	6960      	ldr	r0, [r4, #20]
 800dace:	f891 c000 	ldrb.w	ip, [r1]
 800dad2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d035      	beq.n	800db46 <_scanf_i+0x15e>
 800dada:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800dade:	d124      	bne.n	800db2a <_scanf_i+0x142>
 800dae0:	0510      	lsls	r0, r2, #20
 800dae2:	d522      	bpl.n	800db2a <_scanf_i+0x142>
 800dae4:	f10b 0b01 	add.w	fp, fp, #1
 800dae8:	f1b9 0f00 	cmp.w	r9, #0
 800daec:	d003      	beq.n	800daf6 <_scanf_i+0x10e>
 800daee:	3301      	adds	r3, #1
 800daf0:	f109 39ff 	add.w	r9, r9, #4294967295
 800daf4:	60a3      	str	r3, [r4, #8]
 800daf6:	6873      	ldr	r3, [r6, #4]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	6073      	str	r3, [r6, #4]
 800dafe:	dd1b      	ble.n	800db38 <_scanf_i+0x150>
 800db00:	6833      	ldr	r3, [r6, #0]
 800db02:	3301      	adds	r3, #1
 800db04:	6033      	str	r3, [r6, #0]
 800db06:	68a3      	ldr	r3, [r4, #8]
 800db08:	3b01      	subs	r3, #1
 800db0a:	60a3      	str	r3, [r4, #8]
 800db0c:	e7d9      	b.n	800dac2 <_scanf_i+0xda>
 800db0e:	f1bb 0f02 	cmp.w	fp, #2
 800db12:	d1ae      	bne.n	800da72 <_scanf_i+0x8a>
 800db14:	6822      	ldr	r2, [r4, #0]
 800db16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800db1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800db1e:	d1bf      	bne.n	800daa0 <_scanf_i+0xb8>
 800db20:	2310      	movs	r3, #16
 800db22:	6063      	str	r3, [r4, #4]
 800db24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db28:	e7a2      	b.n	800da70 <_scanf_i+0x88>
 800db2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800db2e:	6022      	str	r2, [r4, #0]
 800db30:	780b      	ldrb	r3, [r1, #0]
 800db32:	f805 3b01 	strb.w	r3, [r5], #1
 800db36:	e7de      	b.n	800daf6 <_scanf_i+0x10e>
 800db38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800db3c:	4631      	mov	r1, r6
 800db3e:	4650      	mov	r0, sl
 800db40:	4798      	blx	r3
 800db42:	2800      	cmp	r0, #0
 800db44:	d0df      	beq.n	800db06 <_scanf_i+0x11e>
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	05d9      	lsls	r1, r3, #23
 800db4a:	d50d      	bpl.n	800db68 <_scanf_i+0x180>
 800db4c:	42bd      	cmp	r5, r7
 800db4e:	d909      	bls.n	800db64 <_scanf_i+0x17c>
 800db50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800db54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db58:	4632      	mov	r2, r6
 800db5a:	4650      	mov	r0, sl
 800db5c:	4798      	blx	r3
 800db5e:	f105 39ff 	add.w	r9, r5, #4294967295
 800db62:	464d      	mov	r5, r9
 800db64:	42bd      	cmp	r5, r7
 800db66:	d028      	beq.n	800dbba <_scanf_i+0x1d2>
 800db68:	6822      	ldr	r2, [r4, #0]
 800db6a:	f012 0210 	ands.w	r2, r2, #16
 800db6e:	d113      	bne.n	800db98 <_scanf_i+0x1b0>
 800db70:	702a      	strb	r2, [r5, #0]
 800db72:	6863      	ldr	r3, [r4, #4]
 800db74:	9e01      	ldr	r6, [sp, #4]
 800db76:	4639      	mov	r1, r7
 800db78:	4650      	mov	r0, sl
 800db7a:	47b0      	blx	r6
 800db7c:	f8d8 3000 	ldr.w	r3, [r8]
 800db80:	6821      	ldr	r1, [r4, #0]
 800db82:	1d1a      	adds	r2, r3, #4
 800db84:	f8c8 2000 	str.w	r2, [r8]
 800db88:	f011 0f20 	tst.w	r1, #32
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	d00f      	beq.n	800dbb0 <_scanf_i+0x1c8>
 800db90:	6018      	str	r0, [r3, #0]
 800db92:	68e3      	ldr	r3, [r4, #12]
 800db94:	3301      	adds	r3, #1
 800db96:	60e3      	str	r3, [r4, #12]
 800db98:	1bed      	subs	r5, r5, r7
 800db9a:	44ab      	add	fp, r5
 800db9c:	6925      	ldr	r5, [r4, #16]
 800db9e:	445d      	add	r5, fp
 800dba0:	6125      	str	r5, [r4, #16]
 800dba2:	2000      	movs	r0, #0
 800dba4:	b007      	add	sp, #28
 800dba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbaa:	f04f 0b00 	mov.w	fp, #0
 800dbae:	e7ca      	b.n	800db46 <_scanf_i+0x15e>
 800dbb0:	07ca      	lsls	r2, r1, #31
 800dbb2:	bf4c      	ite	mi
 800dbb4:	8018      	strhmi	r0, [r3, #0]
 800dbb6:	6018      	strpl	r0, [r3, #0]
 800dbb8:	e7eb      	b.n	800db92 <_scanf_i+0x1aa>
 800dbba:	2001      	movs	r0, #1
 800dbbc:	e7f2      	b.n	800dba4 <_scanf_i+0x1bc>
 800dbbe:	bf00      	nop
 800dbc0:	0800e900 	.word	0x0800e900
 800dbc4:	0800ddb9 	.word	0x0800ddb9
 800dbc8:	0800b361 	.word	0x0800b361
 800dbcc:	0800ed5e 	.word	0x0800ed5e

0800dbd0 <_read_r>:
 800dbd0:	b538      	push	{r3, r4, r5, lr}
 800dbd2:	4d07      	ldr	r5, [pc, #28]	; (800dbf0 <_read_r+0x20>)
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	4608      	mov	r0, r1
 800dbd8:	4611      	mov	r1, r2
 800dbda:	2200      	movs	r2, #0
 800dbdc:	602a      	str	r2, [r5, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	f7f4 fb50 	bl	8002284 <_read>
 800dbe4:	1c43      	adds	r3, r0, #1
 800dbe6:	d102      	bne.n	800dbee <_read_r+0x1e>
 800dbe8:	682b      	ldr	r3, [r5, #0]
 800dbea:	b103      	cbz	r3, 800dbee <_read_r+0x1e>
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	bd38      	pop	{r3, r4, r5, pc}
 800dbf0:	2000064c 	.word	0x2000064c
 800dbf4:	00000000 	.word	0x00000000

0800dbf8 <nan>:
 800dbf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dc00 <nan+0x8>
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	00000000 	.word	0x00000000
 800dc04:	7ff80000 	.word	0x7ff80000

0800dc08 <_sbrk_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4d06      	ldr	r5, [pc, #24]	; (800dc24 <_sbrk_r+0x1c>)
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	4604      	mov	r4, r0
 800dc10:	4608      	mov	r0, r1
 800dc12:	602b      	str	r3, [r5, #0]
 800dc14:	f7f4 fba4 	bl	8002360 <_sbrk>
 800dc18:	1c43      	adds	r3, r0, #1
 800dc1a:	d102      	bne.n	800dc22 <_sbrk_r+0x1a>
 800dc1c:	682b      	ldr	r3, [r5, #0]
 800dc1e:	b103      	cbz	r3, 800dc22 <_sbrk_r+0x1a>
 800dc20:	6023      	str	r3, [r4, #0]
 800dc22:	bd38      	pop	{r3, r4, r5, pc}
 800dc24:	2000064c 	.word	0x2000064c

0800dc28 <__sccl>:
 800dc28:	b570      	push	{r4, r5, r6, lr}
 800dc2a:	780b      	ldrb	r3, [r1, #0]
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	2b5e      	cmp	r3, #94	; 0x5e
 800dc30:	bf0b      	itete	eq
 800dc32:	784b      	ldrbeq	r3, [r1, #1]
 800dc34:	1c48      	addne	r0, r1, #1
 800dc36:	1c88      	addeq	r0, r1, #2
 800dc38:	2200      	movne	r2, #0
 800dc3a:	bf08      	it	eq
 800dc3c:	2201      	moveq	r2, #1
 800dc3e:	1e61      	subs	r1, r4, #1
 800dc40:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dc44:	f801 2f01 	strb.w	r2, [r1, #1]!
 800dc48:	42a9      	cmp	r1, r5
 800dc4a:	d1fb      	bne.n	800dc44 <__sccl+0x1c>
 800dc4c:	b90b      	cbnz	r3, 800dc52 <__sccl+0x2a>
 800dc4e:	3801      	subs	r0, #1
 800dc50:	bd70      	pop	{r4, r5, r6, pc}
 800dc52:	f082 0101 	eor.w	r1, r2, #1
 800dc56:	54e1      	strb	r1, [r4, r3]
 800dc58:	1c42      	adds	r2, r0, #1
 800dc5a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800dc5e:	2d2d      	cmp	r5, #45	; 0x2d
 800dc60:	f102 36ff 	add.w	r6, r2, #4294967295
 800dc64:	4610      	mov	r0, r2
 800dc66:	d006      	beq.n	800dc76 <__sccl+0x4e>
 800dc68:	2d5d      	cmp	r5, #93	; 0x5d
 800dc6a:	d0f1      	beq.n	800dc50 <__sccl+0x28>
 800dc6c:	b90d      	cbnz	r5, 800dc72 <__sccl+0x4a>
 800dc6e:	4630      	mov	r0, r6
 800dc70:	e7ee      	b.n	800dc50 <__sccl+0x28>
 800dc72:	462b      	mov	r3, r5
 800dc74:	e7ef      	b.n	800dc56 <__sccl+0x2e>
 800dc76:	7816      	ldrb	r6, [r2, #0]
 800dc78:	2e5d      	cmp	r6, #93	; 0x5d
 800dc7a:	d0fa      	beq.n	800dc72 <__sccl+0x4a>
 800dc7c:	42b3      	cmp	r3, r6
 800dc7e:	dcf8      	bgt.n	800dc72 <__sccl+0x4a>
 800dc80:	4618      	mov	r0, r3
 800dc82:	3001      	adds	r0, #1
 800dc84:	4286      	cmp	r6, r0
 800dc86:	5421      	strb	r1, [r4, r0]
 800dc88:	dcfb      	bgt.n	800dc82 <__sccl+0x5a>
 800dc8a:	43d8      	mvns	r0, r3
 800dc8c:	4430      	add	r0, r6
 800dc8e:	1c5d      	adds	r5, r3, #1
 800dc90:	42b3      	cmp	r3, r6
 800dc92:	bfa8      	it	ge
 800dc94:	2000      	movge	r0, #0
 800dc96:	182b      	adds	r3, r5, r0
 800dc98:	3202      	adds	r2, #2
 800dc9a:	e7de      	b.n	800dc5a <__sccl+0x32>

0800dc9c <strncmp>:
 800dc9c:	b510      	push	{r4, lr}
 800dc9e:	b16a      	cbz	r2, 800dcbc <strncmp+0x20>
 800dca0:	3901      	subs	r1, #1
 800dca2:	1884      	adds	r4, r0, r2
 800dca4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dca8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d103      	bne.n	800dcb8 <strncmp+0x1c>
 800dcb0:	42a0      	cmp	r0, r4
 800dcb2:	d001      	beq.n	800dcb8 <strncmp+0x1c>
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1f5      	bne.n	800dca4 <strncmp+0x8>
 800dcb8:	1a98      	subs	r0, r3, r2
 800dcba:	bd10      	pop	{r4, pc}
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	e7fc      	b.n	800dcba <strncmp+0x1e>

0800dcc0 <_strtoul_l.isra.0>:
 800dcc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcc4:	4e3b      	ldr	r6, [pc, #236]	; (800ddb4 <_strtoul_l.isra.0+0xf4>)
 800dcc6:	4686      	mov	lr, r0
 800dcc8:	468c      	mov	ip, r1
 800dcca:	4660      	mov	r0, ip
 800dccc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dcd0:	5da5      	ldrb	r5, [r4, r6]
 800dcd2:	f015 0508 	ands.w	r5, r5, #8
 800dcd6:	d1f8      	bne.n	800dcca <_strtoul_l.isra.0+0xa>
 800dcd8:	2c2d      	cmp	r4, #45	; 0x2d
 800dcda:	d134      	bne.n	800dd46 <_strtoul_l.isra.0+0x86>
 800dcdc:	f89c 4000 	ldrb.w	r4, [ip]
 800dce0:	f04f 0801 	mov.w	r8, #1
 800dce4:	f100 0c02 	add.w	ip, r0, #2
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d05e      	beq.n	800ddaa <_strtoul_l.isra.0+0xea>
 800dcec:	2b10      	cmp	r3, #16
 800dcee:	d10c      	bne.n	800dd0a <_strtoul_l.isra.0+0x4a>
 800dcf0:	2c30      	cmp	r4, #48	; 0x30
 800dcf2:	d10a      	bne.n	800dd0a <_strtoul_l.isra.0+0x4a>
 800dcf4:	f89c 0000 	ldrb.w	r0, [ip]
 800dcf8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dcfc:	2858      	cmp	r0, #88	; 0x58
 800dcfe:	d14f      	bne.n	800dda0 <_strtoul_l.isra.0+0xe0>
 800dd00:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800dd04:	2310      	movs	r3, #16
 800dd06:	f10c 0c02 	add.w	ip, ip, #2
 800dd0a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd0e:	2500      	movs	r5, #0
 800dd10:	fbb7 f7f3 	udiv	r7, r7, r3
 800dd14:	fb03 f907 	mul.w	r9, r3, r7
 800dd18:	ea6f 0909 	mvn.w	r9, r9
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800dd22:	2e09      	cmp	r6, #9
 800dd24:	d818      	bhi.n	800dd58 <_strtoul_l.isra.0+0x98>
 800dd26:	4634      	mov	r4, r6
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	dd24      	ble.n	800dd76 <_strtoul_l.isra.0+0xb6>
 800dd2c:	2d00      	cmp	r5, #0
 800dd2e:	db1f      	blt.n	800dd70 <_strtoul_l.isra.0+0xb0>
 800dd30:	4287      	cmp	r7, r0
 800dd32:	d31d      	bcc.n	800dd70 <_strtoul_l.isra.0+0xb0>
 800dd34:	d101      	bne.n	800dd3a <_strtoul_l.isra.0+0x7a>
 800dd36:	45a1      	cmp	r9, r4
 800dd38:	db1a      	blt.n	800dd70 <_strtoul_l.isra.0+0xb0>
 800dd3a:	fb00 4003 	mla	r0, r0, r3, r4
 800dd3e:	2501      	movs	r5, #1
 800dd40:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dd44:	e7eb      	b.n	800dd1e <_strtoul_l.isra.0+0x5e>
 800dd46:	2c2b      	cmp	r4, #43	; 0x2b
 800dd48:	bf08      	it	eq
 800dd4a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800dd4e:	46a8      	mov	r8, r5
 800dd50:	bf08      	it	eq
 800dd52:	f100 0c02 	addeq.w	ip, r0, #2
 800dd56:	e7c7      	b.n	800dce8 <_strtoul_l.isra.0+0x28>
 800dd58:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800dd5c:	2e19      	cmp	r6, #25
 800dd5e:	d801      	bhi.n	800dd64 <_strtoul_l.isra.0+0xa4>
 800dd60:	3c37      	subs	r4, #55	; 0x37
 800dd62:	e7e1      	b.n	800dd28 <_strtoul_l.isra.0+0x68>
 800dd64:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800dd68:	2e19      	cmp	r6, #25
 800dd6a:	d804      	bhi.n	800dd76 <_strtoul_l.isra.0+0xb6>
 800dd6c:	3c57      	subs	r4, #87	; 0x57
 800dd6e:	e7db      	b.n	800dd28 <_strtoul_l.isra.0+0x68>
 800dd70:	f04f 35ff 	mov.w	r5, #4294967295
 800dd74:	e7e4      	b.n	800dd40 <_strtoul_l.isra.0+0x80>
 800dd76:	2d00      	cmp	r5, #0
 800dd78:	da07      	bge.n	800dd8a <_strtoul_l.isra.0+0xca>
 800dd7a:	2322      	movs	r3, #34	; 0x22
 800dd7c:	f8ce 3000 	str.w	r3, [lr]
 800dd80:	f04f 30ff 	mov.w	r0, #4294967295
 800dd84:	b942      	cbnz	r2, 800dd98 <_strtoul_l.isra.0+0xd8>
 800dd86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd8a:	f1b8 0f00 	cmp.w	r8, #0
 800dd8e:	d000      	beq.n	800dd92 <_strtoul_l.isra.0+0xd2>
 800dd90:	4240      	negs	r0, r0
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	d0f7      	beq.n	800dd86 <_strtoul_l.isra.0+0xc6>
 800dd96:	b10d      	cbz	r5, 800dd9c <_strtoul_l.isra.0+0xdc>
 800dd98:	f10c 31ff 	add.w	r1, ip, #4294967295
 800dd9c:	6011      	str	r1, [r2, #0]
 800dd9e:	e7f2      	b.n	800dd86 <_strtoul_l.isra.0+0xc6>
 800dda0:	2430      	movs	r4, #48	; 0x30
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1b1      	bne.n	800dd0a <_strtoul_l.isra.0+0x4a>
 800dda6:	2308      	movs	r3, #8
 800dda8:	e7af      	b.n	800dd0a <_strtoul_l.isra.0+0x4a>
 800ddaa:	2c30      	cmp	r4, #48	; 0x30
 800ddac:	d0a2      	beq.n	800dcf4 <_strtoul_l.isra.0+0x34>
 800ddae:	230a      	movs	r3, #10
 800ddb0:	e7ab      	b.n	800dd0a <_strtoul_l.isra.0+0x4a>
 800ddb2:	bf00      	nop
 800ddb4:	0800e9c1 	.word	0x0800e9c1

0800ddb8 <_strtoul_r>:
 800ddb8:	f7ff bf82 	b.w	800dcc0 <_strtoul_l.isra.0>

0800ddbc <__submore>:
 800ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ddc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddc8:	4299      	cmp	r1, r3
 800ddca:	d11d      	bne.n	800de08 <__submore+0x4c>
 800ddcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ddd0:	f7ff fa2a 	bl	800d228 <_malloc_r>
 800ddd4:	b918      	cbnz	r0, 800ddde <__submore+0x22>
 800ddd6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dde2:	63a3      	str	r3, [r4, #56]	; 0x38
 800dde4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dde8:	6360      	str	r0, [r4, #52]	; 0x34
 800ddea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ddee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ddf2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ddf6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ddfa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ddfe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800de02:	6020      	str	r0, [r4, #0]
 800de04:	2000      	movs	r0, #0
 800de06:	e7e8      	b.n	800ddda <__submore+0x1e>
 800de08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800de0a:	0077      	lsls	r7, r6, #1
 800de0c:	463a      	mov	r2, r7
 800de0e:	f000 fa2d 	bl	800e26c <_realloc_r>
 800de12:	4605      	mov	r5, r0
 800de14:	2800      	cmp	r0, #0
 800de16:	d0de      	beq.n	800ddd6 <__submore+0x1a>
 800de18:	eb00 0806 	add.w	r8, r0, r6
 800de1c:	4601      	mov	r1, r0
 800de1e:	4632      	mov	r2, r6
 800de20:	4640      	mov	r0, r8
 800de22:	f7fe fcd9 	bl	800c7d8 <memcpy>
 800de26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800de2a:	f8c4 8000 	str.w	r8, [r4]
 800de2e:	e7e9      	b.n	800de04 <__submore+0x48>

0800de30 <__ascii_wctomb>:
 800de30:	b149      	cbz	r1, 800de46 <__ascii_wctomb+0x16>
 800de32:	2aff      	cmp	r2, #255	; 0xff
 800de34:	bf85      	ittet	hi
 800de36:	238a      	movhi	r3, #138	; 0x8a
 800de38:	6003      	strhi	r3, [r0, #0]
 800de3a:	700a      	strbls	r2, [r1, #0]
 800de3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800de40:	bf98      	it	ls
 800de42:	2001      	movls	r0, #1
 800de44:	4770      	bx	lr
 800de46:	4608      	mov	r0, r1
 800de48:	4770      	bx	lr
	...

0800de4c <__assert_func>:
 800de4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de4e:	4614      	mov	r4, r2
 800de50:	461a      	mov	r2, r3
 800de52:	4b09      	ldr	r3, [pc, #36]	; (800de78 <__assert_func+0x2c>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4605      	mov	r5, r0
 800de58:	68d8      	ldr	r0, [r3, #12]
 800de5a:	b14c      	cbz	r4, 800de70 <__assert_func+0x24>
 800de5c:	4b07      	ldr	r3, [pc, #28]	; (800de7c <__assert_func+0x30>)
 800de5e:	9100      	str	r1, [sp, #0]
 800de60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de64:	4906      	ldr	r1, [pc, #24]	; (800de80 <__assert_func+0x34>)
 800de66:	462b      	mov	r3, r5
 800de68:	f000 f9a6 	bl	800e1b8 <fiprintf>
 800de6c:	f000 fc3e 	bl	800e6ec <abort>
 800de70:	4b04      	ldr	r3, [pc, #16]	; (800de84 <__assert_func+0x38>)
 800de72:	461c      	mov	r4, r3
 800de74:	e7f3      	b.n	800de5e <__assert_func+0x12>
 800de76:	bf00      	nop
 800de78:	20000070 	.word	0x20000070
 800de7c:	0800ed60 	.word	0x0800ed60
 800de80:	0800ed6d 	.word	0x0800ed6d
 800de84:	0800ed9b 	.word	0x0800ed9b

0800de88 <__sflush_r>:
 800de88:	898a      	ldrh	r2, [r1, #12]
 800de8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8e:	4605      	mov	r5, r0
 800de90:	0710      	lsls	r0, r2, #28
 800de92:	460c      	mov	r4, r1
 800de94:	d458      	bmi.n	800df48 <__sflush_r+0xc0>
 800de96:	684b      	ldr	r3, [r1, #4]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	dc05      	bgt.n	800dea8 <__sflush_r+0x20>
 800de9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	dc02      	bgt.n	800dea8 <__sflush_r+0x20>
 800dea2:	2000      	movs	r0, #0
 800dea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800deaa:	2e00      	cmp	r6, #0
 800deac:	d0f9      	beq.n	800dea2 <__sflush_r+0x1a>
 800deae:	2300      	movs	r3, #0
 800deb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800deb4:	682f      	ldr	r7, [r5, #0]
 800deb6:	602b      	str	r3, [r5, #0]
 800deb8:	d032      	beq.n	800df20 <__sflush_r+0x98>
 800deba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800debc:	89a3      	ldrh	r3, [r4, #12]
 800debe:	075a      	lsls	r2, r3, #29
 800dec0:	d505      	bpl.n	800dece <__sflush_r+0x46>
 800dec2:	6863      	ldr	r3, [r4, #4]
 800dec4:	1ac0      	subs	r0, r0, r3
 800dec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dec8:	b10b      	cbz	r3, 800dece <__sflush_r+0x46>
 800deca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800decc:	1ac0      	subs	r0, r0, r3
 800dece:	2300      	movs	r3, #0
 800ded0:	4602      	mov	r2, r0
 800ded2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ded4:	6a21      	ldr	r1, [r4, #32]
 800ded6:	4628      	mov	r0, r5
 800ded8:	47b0      	blx	r6
 800deda:	1c43      	adds	r3, r0, #1
 800dedc:	89a3      	ldrh	r3, [r4, #12]
 800dede:	d106      	bne.n	800deee <__sflush_r+0x66>
 800dee0:	6829      	ldr	r1, [r5, #0]
 800dee2:	291d      	cmp	r1, #29
 800dee4:	d82c      	bhi.n	800df40 <__sflush_r+0xb8>
 800dee6:	4a2a      	ldr	r2, [pc, #168]	; (800df90 <__sflush_r+0x108>)
 800dee8:	40ca      	lsrs	r2, r1
 800deea:	07d6      	lsls	r6, r2, #31
 800deec:	d528      	bpl.n	800df40 <__sflush_r+0xb8>
 800deee:	2200      	movs	r2, #0
 800def0:	6062      	str	r2, [r4, #4]
 800def2:	04d9      	lsls	r1, r3, #19
 800def4:	6922      	ldr	r2, [r4, #16]
 800def6:	6022      	str	r2, [r4, #0]
 800def8:	d504      	bpl.n	800df04 <__sflush_r+0x7c>
 800defa:	1c42      	adds	r2, r0, #1
 800defc:	d101      	bne.n	800df02 <__sflush_r+0x7a>
 800defe:	682b      	ldr	r3, [r5, #0]
 800df00:	b903      	cbnz	r3, 800df04 <__sflush_r+0x7c>
 800df02:	6560      	str	r0, [r4, #84]	; 0x54
 800df04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df06:	602f      	str	r7, [r5, #0]
 800df08:	2900      	cmp	r1, #0
 800df0a:	d0ca      	beq.n	800dea2 <__sflush_r+0x1a>
 800df0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df10:	4299      	cmp	r1, r3
 800df12:	d002      	beq.n	800df1a <__sflush_r+0x92>
 800df14:	4628      	mov	r0, r5
 800df16:	f7ff f937 	bl	800d188 <_free_r>
 800df1a:	2000      	movs	r0, #0
 800df1c:	6360      	str	r0, [r4, #52]	; 0x34
 800df1e:	e7c1      	b.n	800dea4 <__sflush_r+0x1c>
 800df20:	6a21      	ldr	r1, [r4, #32]
 800df22:	2301      	movs	r3, #1
 800df24:	4628      	mov	r0, r5
 800df26:	47b0      	blx	r6
 800df28:	1c41      	adds	r1, r0, #1
 800df2a:	d1c7      	bne.n	800debc <__sflush_r+0x34>
 800df2c:	682b      	ldr	r3, [r5, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d0c4      	beq.n	800debc <__sflush_r+0x34>
 800df32:	2b1d      	cmp	r3, #29
 800df34:	d001      	beq.n	800df3a <__sflush_r+0xb2>
 800df36:	2b16      	cmp	r3, #22
 800df38:	d101      	bne.n	800df3e <__sflush_r+0xb6>
 800df3a:	602f      	str	r7, [r5, #0]
 800df3c:	e7b1      	b.n	800dea2 <__sflush_r+0x1a>
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df44:	81a3      	strh	r3, [r4, #12]
 800df46:	e7ad      	b.n	800dea4 <__sflush_r+0x1c>
 800df48:	690f      	ldr	r7, [r1, #16]
 800df4a:	2f00      	cmp	r7, #0
 800df4c:	d0a9      	beq.n	800dea2 <__sflush_r+0x1a>
 800df4e:	0793      	lsls	r3, r2, #30
 800df50:	680e      	ldr	r6, [r1, #0]
 800df52:	bf08      	it	eq
 800df54:	694b      	ldreq	r3, [r1, #20]
 800df56:	600f      	str	r7, [r1, #0]
 800df58:	bf18      	it	ne
 800df5a:	2300      	movne	r3, #0
 800df5c:	eba6 0807 	sub.w	r8, r6, r7
 800df60:	608b      	str	r3, [r1, #8]
 800df62:	f1b8 0f00 	cmp.w	r8, #0
 800df66:	dd9c      	ble.n	800dea2 <__sflush_r+0x1a>
 800df68:	6a21      	ldr	r1, [r4, #32]
 800df6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df6c:	4643      	mov	r3, r8
 800df6e:	463a      	mov	r2, r7
 800df70:	4628      	mov	r0, r5
 800df72:	47b0      	blx	r6
 800df74:	2800      	cmp	r0, #0
 800df76:	dc06      	bgt.n	800df86 <__sflush_r+0xfe>
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df7e:	81a3      	strh	r3, [r4, #12]
 800df80:	f04f 30ff 	mov.w	r0, #4294967295
 800df84:	e78e      	b.n	800dea4 <__sflush_r+0x1c>
 800df86:	4407      	add	r7, r0
 800df88:	eba8 0800 	sub.w	r8, r8, r0
 800df8c:	e7e9      	b.n	800df62 <__sflush_r+0xda>
 800df8e:	bf00      	nop
 800df90:	20400001 	.word	0x20400001

0800df94 <_fflush_r>:
 800df94:	b538      	push	{r3, r4, r5, lr}
 800df96:	690b      	ldr	r3, [r1, #16]
 800df98:	4605      	mov	r5, r0
 800df9a:	460c      	mov	r4, r1
 800df9c:	b913      	cbnz	r3, 800dfa4 <_fflush_r+0x10>
 800df9e:	2500      	movs	r5, #0
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	bd38      	pop	{r3, r4, r5, pc}
 800dfa4:	b118      	cbz	r0, 800dfae <_fflush_r+0x1a>
 800dfa6:	6983      	ldr	r3, [r0, #24]
 800dfa8:	b90b      	cbnz	r3, 800dfae <_fflush_r+0x1a>
 800dfaa:	f000 f887 	bl	800e0bc <__sinit>
 800dfae:	4b14      	ldr	r3, [pc, #80]	; (800e000 <_fflush_r+0x6c>)
 800dfb0:	429c      	cmp	r4, r3
 800dfb2:	d11b      	bne.n	800dfec <_fflush_r+0x58>
 800dfb4:	686c      	ldr	r4, [r5, #4]
 800dfb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d0ef      	beq.n	800df9e <_fflush_r+0xa>
 800dfbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfc0:	07d0      	lsls	r0, r2, #31
 800dfc2:	d404      	bmi.n	800dfce <_fflush_r+0x3a>
 800dfc4:	0599      	lsls	r1, r3, #22
 800dfc6:	d402      	bmi.n	800dfce <_fflush_r+0x3a>
 800dfc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfca:	f000 f927 	bl	800e21c <__retarget_lock_acquire_recursive>
 800dfce:	4628      	mov	r0, r5
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	f7ff ff59 	bl	800de88 <__sflush_r>
 800dfd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfd8:	07da      	lsls	r2, r3, #31
 800dfda:	4605      	mov	r5, r0
 800dfdc:	d4e0      	bmi.n	800dfa0 <_fflush_r+0xc>
 800dfde:	89a3      	ldrh	r3, [r4, #12]
 800dfe0:	059b      	lsls	r3, r3, #22
 800dfe2:	d4dd      	bmi.n	800dfa0 <_fflush_r+0xc>
 800dfe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfe6:	f000 f91a 	bl	800e21e <__retarget_lock_release_recursive>
 800dfea:	e7d9      	b.n	800dfa0 <_fflush_r+0xc>
 800dfec:	4b05      	ldr	r3, [pc, #20]	; (800e004 <_fflush_r+0x70>)
 800dfee:	429c      	cmp	r4, r3
 800dff0:	d101      	bne.n	800dff6 <_fflush_r+0x62>
 800dff2:	68ac      	ldr	r4, [r5, #8]
 800dff4:	e7df      	b.n	800dfb6 <_fflush_r+0x22>
 800dff6:	4b04      	ldr	r3, [pc, #16]	; (800e008 <_fflush_r+0x74>)
 800dff8:	429c      	cmp	r4, r3
 800dffa:	bf08      	it	eq
 800dffc:	68ec      	ldreq	r4, [r5, #12]
 800dffe:	e7da      	b.n	800dfb6 <_fflush_r+0x22>
 800e000:	0800edbc 	.word	0x0800edbc
 800e004:	0800eddc 	.word	0x0800eddc
 800e008:	0800ed9c 	.word	0x0800ed9c

0800e00c <std>:
 800e00c:	2300      	movs	r3, #0
 800e00e:	b510      	push	{r4, lr}
 800e010:	4604      	mov	r4, r0
 800e012:	e9c0 3300 	strd	r3, r3, [r0]
 800e016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e01a:	6083      	str	r3, [r0, #8]
 800e01c:	8181      	strh	r1, [r0, #12]
 800e01e:	6643      	str	r3, [r0, #100]	; 0x64
 800e020:	81c2      	strh	r2, [r0, #14]
 800e022:	6183      	str	r3, [r0, #24]
 800e024:	4619      	mov	r1, r3
 800e026:	2208      	movs	r2, #8
 800e028:	305c      	adds	r0, #92	; 0x5c
 800e02a:	f7fb fbcd 	bl	80097c8 <memset>
 800e02e:	4b05      	ldr	r3, [pc, #20]	; (800e044 <std+0x38>)
 800e030:	6263      	str	r3, [r4, #36]	; 0x24
 800e032:	4b05      	ldr	r3, [pc, #20]	; (800e048 <std+0x3c>)
 800e034:	62a3      	str	r3, [r4, #40]	; 0x28
 800e036:	4b05      	ldr	r3, [pc, #20]	; (800e04c <std+0x40>)
 800e038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e03a:	4b05      	ldr	r3, [pc, #20]	; (800e050 <std+0x44>)
 800e03c:	6224      	str	r4, [r4, #32]
 800e03e:	6323      	str	r3, [r4, #48]	; 0x30
 800e040:	bd10      	pop	{r4, pc}
 800e042:	bf00      	nop
 800e044:	0800a571 	.word	0x0800a571
 800e048:	0800a597 	.word	0x0800a597
 800e04c:	0800a5cf 	.word	0x0800a5cf
 800e050:	0800a5f3 	.word	0x0800a5f3

0800e054 <_cleanup_r>:
 800e054:	4901      	ldr	r1, [pc, #4]	; (800e05c <_cleanup_r+0x8>)
 800e056:	f000 b8c1 	b.w	800e1dc <_fwalk_reent>
 800e05a:	bf00      	nop
 800e05c:	0800df95 	.word	0x0800df95

0800e060 <__sfmoreglue>:
 800e060:	b570      	push	{r4, r5, r6, lr}
 800e062:	1e4a      	subs	r2, r1, #1
 800e064:	2568      	movs	r5, #104	; 0x68
 800e066:	4355      	muls	r5, r2
 800e068:	460e      	mov	r6, r1
 800e06a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e06e:	f7ff f8db 	bl	800d228 <_malloc_r>
 800e072:	4604      	mov	r4, r0
 800e074:	b140      	cbz	r0, 800e088 <__sfmoreglue+0x28>
 800e076:	2100      	movs	r1, #0
 800e078:	e9c0 1600 	strd	r1, r6, [r0]
 800e07c:	300c      	adds	r0, #12
 800e07e:	60a0      	str	r0, [r4, #8]
 800e080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e084:	f7fb fba0 	bl	80097c8 <memset>
 800e088:	4620      	mov	r0, r4
 800e08a:	bd70      	pop	{r4, r5, r6, pc}

0800e08c <__sfp_lock_acquire>:
 800e08c:	4801      	ldr	r0, [pc, #4]	; (800e094 <__sfp_lock_acquire+0x8>)
 800e08e:	f000 b8c5 	b.w	800e21c <__retarget_lock_acquire_recursive>
 800e092:	bf00      	nop
 800e094:	20000658 	.word	0x20000658

0800e098 <__sfp_lock_release>:
 800e098:	4801      	ldr	r0, [pc, #4]	; (800e0a0 <__sfp_lock_release+0x8>)
 800e09a:	f000 b8c0 	b.w	800e21e <__retarget_lock_release_recursive>
 800e09e:	bf00      	nop
 800e0a0:	20000658 	.word	0x20000658

0800e0a4 <__sinit_lock_acquire>:
 800e0a4:	4801      	ldr	r0, [pc, #4]	; (800e0ac <__sinit_lock_acquire+0x8>)
 800e0a6:	f000 b8b9 	b.w	800e21c <__retarget_lock_acquire_recursive>
 800e0aa:	bf00      	nop
 800e0ac:	20000653 	.word	0x20000653

0800e0b0 <__sinit_lock_release>:
 800e0b0:	4801      	ldr	r0, [pc, #4]	; (800e0b8 <__sinit_lock_release+0x8>)
 800e0b2:	f000 b8b4 	b.w	800e21e <__retarget_lock_release_recursive>
 800e0b6:	bf00      	nop
 800e0b8:	20000653 	.word	0x20000653

0800e0bc <__sinit>:
 800e0bc:	b510      	push	{r4, lr}
 800e0be:	4604      	mov	r4, r0
 800e0c0:	f7ff fff0 	bl	800e0a4 <__sinit_lock_acquire>
 800e0c4:	69a3      	ldr	r3, [r4, #24]
 800e0c6:	b11b      	cbz	r3, 800e0d0 <__sinit+0x14>
 800e0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0cc:	f7ff bff0 	b.w	800e0b0 <__sinit_lock_release>
 800e0d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0d4:	6523      	str	r3, [r4, #80]	; 0x50
 800e0d6:	4b13      	ldr	r3, [pc, #76]	; (800e124 <__sinit+0x68>)
 800e0d8:	4a13      	ldr	r2, [pc, #76]	; (800e128 <__sinit+0x6c>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0de:	42a3      	cmp	r3, r4
 800e0e0:	bf04      	itt	eq
 800e0e2:	2301      	moveq	r3, #1
 800e0e4:	61a3      	streq	r3, [r4, #24]
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 f820 	bl	800e12c <__sfp>
 800e0ec:	6060      	str	r0, [r4, #4]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 f81c 	bl	800e12c <__sfp>
 800e0f4:	60a0      	str	r0, [r4, #8]
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 f818 	bl	800e12c <__sfp>
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	60e0      	str	r0, [r4, #12]
 800e100:	2104      	movs	r1, #4
 800e102:	6860      	ldr	r0, [r4, #4]
 800e104:	f7ff ff82 	bl	800e00c <std>
 800e108:	68a0      	ldr	r0, [r4, #8]
 800e10a:	2201      	movs	r2, #1
 800e10c:	2109      	movs	r1, #9
 800e10e:	f7ff ff7d 	bl	800e00c <std>
 800e112:	68e0      	ldr	r0, [r4, #12]
 800e114:	2202      	movs	r2, #2
 800e116:	2112      	movs	r1, #18
 800e118:	f7ff ff78 	bl	800e00c <std>
 800e11c:	2301      	movs	r3, #1
 800e11e:	61a3      	str	r3, [r4, #24]
 800e120:	e7d2      	b.n	800e0c8 <__sinit+0xc>
 800e122:	bf00      	nop
 800e124:	0800e930 	.word	0x0800e930
 800e128:	0800e055 	.word	0x0800e055

0800e12c <__sfp>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	4607      	mov	r7, r0
 800e130:	f7ff ffac 	bl	800e08c <__sfp_lock_acquire>
 800e134:	4b1e      	ldr	r3, [pc, #120]	; (800e1b0 <__sfp+0x84>)
 800e136:	681e      	ldr	r6, [r3, #0]
 800e138:	69b3      	ldr	r3, [r6, #24]
 800e13a:	b913      	cbnz	r3, 800e142 <__sfp+0x16>
 800e13c:	4630      	mov	r0, r6
 800e13e:	f7ff ffbd 	bl	800e0bc <__sinit>
 800e142:	3648      	adds	r6, #72	; 0x48
 800e144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e148:	3b01      	subs	r3, #1
 800e14a:	d503      	bpl.n	800e154 <__sfp+0x28>
 800e14c:	6833      	ldr	r3, [r6, #0]
 800e14e:	b30b      	cbz	r3, 800e194 <__sfp+0x68>
 800e150:	6836      	ldr	r6, [r6, #0]
 800e152:	e7f7      	b.n	800e144 <__sfp+0x18>
 800e154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e158:	b9d5      	cbnz	r5, 800e190 <__sfp+0x64>
 800e15a:	4b16      	ldr	r3, [pc, #88]	; (800e1b4 <__sfp+0x88>)
 800e15c:	60e3      	str	r3, [r4, #12]
 800e15e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e162:	6665      	str	r5, [r4, #100]	; 0x64
 800e164:	f000 f859 	bl	800e21a <__retarget_lock_init_recursive>
 800e168:	f7ff ff96 	bl	800e098 <__sfp_lock_release>
 800e16c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e174:	6025      	str	r5, [r4, #0]
 800e176:	61a5      	str	r5, [r4, #24]
 800e178:	2208      	movs	r2, #8
 800e17a:	4629      	mov	r1, r5
 800e17c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e180:	f7fb fb22 	bl	80097c8 <memset>
 800e184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e18c:	4620      	mov	r0, r4
 800e18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e190:	3468      	adds	r4, #104	; 0x68
 800e192:	e7d9      	b.n	800e148 <__sfp+0x1c>
 800e194:	2104      	movs	r1, #4
 800e196:	4638      	mov	r0, r7
 800e198:	f7ff ff62 	bl	800e060 <__sfmoreglue>
 800e19c:	4604      	mov	r4, r0
 800e19e:	6030      	str	r0, [r6, #0]
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d1d5      	bne.n	800e150 <__sfp+0x24>
 800e1a4:	f7ff ff78 	bl	800e098 <__sfp_lock_release>
 800e1a8:	230c      	movs	r3, #12
 800e1aa:	603b      	str	r3, [r7, #0]
 800e1ac:	e7ee      	b.n	800e18c <__sfp+0x60>
 800e1ae:	bf00      	nop
 800e1b0:	0800e930 	.word	0x0800e930
 800e1b4:	ffff0001 	.word	0xffff0001

0800e1b8 <fiprintf>:
 800e1b8:	b40e      	push	{r1, r2, r3}
 800e1ba:	b503      	push	{r0, r1, lr}
 800e1bc:	4601      	mov	r1, r0
 800e1be:	ab03      	add	r3, sp, #12
 800e1c0:	4805      	ldr	r0, [pc, #20]	; (800e1d8 <fiprintf+0x20>)
 800e1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1c6:	6800      	ldr	r0, [r0, #0]
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	f000 f89f 	bl	800e30c <_vfiprintf_r>
 800e1ce:	b002      	add	sp, #8
 800e1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1d4:	b003      	add	sp, #12
 800e1d6:	4770      	bx	lr
 800e1d8:	20000070 	.word	0x20000070

0800e1dc <_fwalk_reent>:
 800e1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	4688      	mov	r8, r1
 800e1e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1e8:	2700      	movs	r7, #0
 800e1ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1ee:	f1b9 0901 	subs.w	r9, r9, #1
 800e1f2:	d505      	bpl.n	800e200 <_fwalk_reent+0x24>
 800e1f4:	6824      	ldr	r4, [r4, #0]
 800e1f6:	2c00      	cmp	r4, #0
 800e1f8:	d1f7      	bne.n	800e1ea <_fwalk_reent+0xe>
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e200:	89ab      	ldrh	r3, [r5, #12]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d907      	bls.n	800e216 <_fwalk_reent+0x3a>
 800e206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e20a:	3301      	adds	r3, #1
 800e20c:	d003      	beq.n	800e216 <_fwalk_reent+0x3a>
 800e20e:	4629      	mov	r1, r5
 800e210:	4630      	mov	r0, r6
 800e212:	47c0      	blx	r8
 800e214:	4307      	orrs	r7, r0
 800e216:	3568      	adds	r5, #104	; 0x68
 800e218:	e7e9      	b.n	800e1ee <_fwalk_reent+0x12>

0800e21a <__retarget_lock_init_recursive>:
 800e21a:	4770      	bx	lr

0800e21c <__retarget_lock_acquire_recursive>:
 800e21c:	4770      	bx	lr

0800e21e <__retarget_lock_release_recursive>:
 800e21e:	4770      	bx	lr

0800e220 <memmove>:
 800e220:	4288      	cmp	r0, r1
 800e222:	b510      	push	{r4, lr}
 800e224:	eb01 0402 	add.w	r4, r1, r2
 800e228:	d902      	bls.n	800e230 <memmove+0x10>
 800e22a:	4284      	cmp	r4, r0
 800e22c:	4623      	mov	r3, r4
 800e22e:	d807      	bhi.n	800e240 <memmove+0x20>
 800e230:	1e43      	subs	r3, r0, #1
 800e232:	42a1      	cmp	r1, r4
 800e234:	d008      	beq.n	800e248 <memmove+0x28>
 800e236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e23e:	e7f8      	b.n	800e232 <memmove+0x12>
 800e240:	4402      	add	r2, r0
 800e242:	4601      	mov	r1, r0
 800e244:	428a      	cmp	r2, r1
 800e246:	d100      	bne.n	800e24a <memmove+0x2a>
 800e248:	bd10      	pop	{r4, pc}
 800e24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e252:	e7f7      	b.n	800e244 <memmove+0x24>

0800e254 <__malloc_lock>:
 800e254:	4801      	ldr	r0, [pc, #4]	; (800e25c <__malloc_lock+0x8>)
 800e256:	f7ff bfe1 	b.w	800e21c <__retarget_lock_acquire_recursive>
 800e25a:	bf00      	nop
 800e25c:	20000654 	.word	0x20000654

0800e260 <__malloc_unlock>:
 800e260:	4801      	ldr	r0, [pc, #4]	; (800e268 <__malloc_unlock+0x8>)
 800e262:	f7ff bfdc 	b.w	800e21e <__retarget_lock_release_recursive>
 800e266:	bf00      	nop
 800e268:	20000654 	.word	0x20000654

0800e26c <_realloc_r>:
 800e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e26e:	4607      	mov	r7, r0
 800e270:	4614      	mov	r4, r2
 800e272:	460e      	mov	r6, r1
 800e274:	b921      	cbnz	r1, 800e280 <_realloc_r+0x14>
 800e276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e27a:	4611      	mov	r1, r2
 800e27c:	f7fe bfd4 	b.w	800d228 <_malloc_r>
 800e280:	b922      	cbnz	r2, 800e28c <_realloc_r+0x20>
 800e282:	f7fe ff81 	bl	800d188 <_free_r>
 800e286:	4625      	mov	r5, r4
 800e288:	4628      	mov	r0, r5
 800e28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e28c:	f000 fa9a 	bl	800e7c4 <_malloc_usable_size_r>
 800e290:	42a0      	cmp	r0, r4
 800e292:	d20f      	bcs.n	800e2b4 <_realloc_r+0x48>
 800e294:	4621      	mov	r1, r4
 800e296:	4638      	mov	r0, r7
 800e298:	f7fe ffc6 	bl	800d228 <_malloc_r>
 800e29c:	4605      	mov	r5, r0
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d0f2      	beq.n	800e288 <_realloc_r+0x1c>
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	f7fe fa97 	bl	800c7d8 <memcpy>
 800e2aa:	4631      	mov	r1, r6
 800e2ac:	4638      	mov	r0, r7
 800e2ae:	f7fe ff6b 	bl	800d188 <_free_r>
 800e2b2:	e7e9      	b.n	800e288 <_realloc_r+0x1c>
 800e2b4:	4635      	mov	r5, r6
 800e2b6:	e7e7      	b.n	800e288 <_realloc_r+0x1c>

0800e2b8 <__sfputc_r>:
 800e2b8:	6893      	ldr	r3, [r2, #8]
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	b410      	push	{r4}
 800e2c0:	6093      	str	r3, [r2, #8]
 800e2c2:	da08      	bge.n	800e2d6 <__sfputc_r+0x1e>
 800e2c4:	6994      	ldr	r4, [r2, #24]
 800e2c6:	42a3      	cmp	r3, r4
 800e2c8:	db01      	blt.n	800e2ce <__sfputc_r+0x16>
 800e2ca:	290a      	cmp	r1, #10
 800e2cc:	d103      	bne.n	800e2d6 <__sfputc_r+0x1e>
 800e2ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2d2:	f000 b94b 	b.w	800e56c <__swbuf_r>
 800e2d6:	6813      	ldr	r3, [r2, #0]
 800e2d8:	1c58      	adds	r0, r3, #1
 800e2da:	6010      	str	r0, [r2, #0]
 800e2dc:	7019      	strb	r1, [r3, #0]
 800e2de:	4608      	mov	r0, r1
 800e2e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <__sfputs_r>:
 800e2e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e8:	4606      	mov	r6, r0
 800e2ea:	460f      	mov	r7, r1
 800e2ec:	4614      	mov	r4, r2
 800e2ee:	18d5      	adds	r5, r2, r3
 800e2f0:	42ac      	cmp	r4, r5
 800e2f2:	d101      	bne.n	800e2f8 <__sfputs_r+0x12>
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	e007      	b.n	800e308 <__sfputs_r+0x22>
 800e2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2fc:	463a      	mov	r2, r7
 800e2fe:	4630      	mov	r0, r6
 800e300:	f7ff ffda 	bl	800e2b8 <__sfputc_r>
 800e304:	1c43      	adds	r3, r0, #1
 800e306:	d1f3      	bne.n	800e2f0 <__sfputs_r+0xa>
 800e308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e30c <_vfiprintf_r>:
 800e30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e310:	460d      	mov	r5, r1
 800e312:	b09d      	sub	sp, #116	; 0x74
 800e314:	4614      	mov	r4, r2
 800e316:	4698      	mov	r8, r3
 800e318:	4606      	mov	r6, r0
 800e31a:	b118      	cbz	r0, 800e324 <_vfiprintf_r+0x18>
 800e31c:	6983      	ldr	r3, [r0, #24]
 800e31e:	b90b      	cbnz	r3, 800e324 <_vfiprintf_r+0x18>
 800e320:	f7ff fecc 	bl	800e0bc <__sinit>
 800e324:	4b89      	ldr	r3, [pc, #548]	; (800e54c <_vfiprintf_r+0x240>)
 800e326:	429d      	cmp	r5, r3
 800e328:	d11b      	bne.n	800e362 <_vfiprintf_r+0x56>
 800e32a:	6875      	ldr	r5, [r6, #4]
 800e32c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e32e:	07d9      	lsls	r1, r3, #31
 800e330:	d405      	bmi.n	800e33e <_vfiprintf_r+0x32>
 800e332:	89ab      	ldrh	r3, [r5, #12]
 800e334:	059a      	lsls	r2, r3, #22
 800e336:	d402      	bmi.n	800e33e <_vfiprintf_r+0x32>
 800e338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e33a:	f7ff ff6f 	bl	800e21c <__retarget_lock_acquire_recursive>
 800e33e:	89ab      	ldrh	r3, [r5, #12]
 800e340:	071b      	lsls	r3, r3, #28
 800e342:	d501      	bpl.n	800e348 <_vfiprintf_r+0x3c>
 800e344:	692b      	ldr	r3, [r5, #16]
 800e346:	b9eb      	cbnz	r3, 800e384 <_vfiprintf_r+0x78>
 800e348:	4629      	mov	r1, r5
 800e34a:	4630      	mov	r0, r6
 800e34c:	f000 f960 	bl	800e610 <__swsetup_r>
 800e350:	b1c0      	cbz	r0, 800e384 <_vfiprintf_r+0x78>
 800e352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e354:	07dc      	lsls	r4, r3, #31
 800e356:	d50e      	bpl.n	800e376 <_vfiprintf_r+0x6a>
 800e358:	f04f 30ff 	mov.w	r0, #4294967295
 800e35c:	b01d      	add	sp, #116	; 0x74
 800e35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e362:	4b7b      	ldr	r3, [pc, #492]	; (800e550 <_vfiprintf_r+0x244>)
 800e364:	429d      	cmp	r5, r3
 800e366:	d101      	bne.n	800e36c <_vfiprintf_r+0x60>
 800e368:	68b5      	ldr	r5, [r6, #8]
 800e36a:	e7df      	b.n	800e32c <_vfiprintf_r+0x20>
 800e36c:	4b79      	ldr	r3, [pc, #484]	; (800e554 <_vfiprintf_r+0x248>)
 800e36e:	429d      	cmp	r5, r3
 800e370:	bf08      	it	eq
 800e372:	68f5      	ldreq	r5, [r6, #12]
 800e374:	e7da      	b.n	800e32c <_vfiprintf_r+0x20>
 800e376:	89ab      	ldrh	r3, [r5, #12]
 800e378:	0598      	lsls	r0, r3, #22
 800e37a:	d4ed      	bmi.n	800e358 <_vfiprintf_r+0x4c>
 800e37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e37e:	f7ff ff4e 	bl	800e21e <__retarget_lock_release_recursive>
 800e382:	e7e9      	b.n	800e358 <_vfiprintf_r+0x4c>
 800e384:	2300      	movs	r3, #0
 800e386:	9309      	str	r3, [sp, #36]	; 0x24
 800e388:	2320      	movs	r3, #32
 800e38a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e38e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e392:	2330      	movs	r3, #48	; 0x30
 800e394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e558 <_vfiprintf_r+0x24c>
 800e398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e39c:	f04f 0901 	mov.w	r9, #1
 800e3a0:	4623      	mov	r3, r4
 800e3a2:	469a      	mov	sl, r3
 800e3a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3a8:	b10a      	cbz	r2, 800e3ae <_vfiprintf_r+0xa2>
 800e3aa:	2a25      	cmp	r2, #37	; 0x25
 800e3ac:	d1f9      	bne.n	800e3a2 <_vfiprintf_r+0x96>
 800e3ae:	ebba 0b04 	subs.w	fp, sl, r4
 800e3b2:	d00b      	beq.n	800e3cc <_vfiprintf_r+0xc0>
 800e3b4:	465b      	mov	r3, fp
 800e3b6:	4622      	mov	r2, r4
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f7ff ff93 	bl	800e2e6 <__sfputs_r>
 800e3c0:	3001      	adds	r0, #1
 800e3c2:	f000 80aa 	beq.w	800e51a <_vfiprintf_r+0x20e>
 800e3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3c8:	445a      	add	r2, fp
 800e3ca:	9209      	str	r2, [sp, #36]	; 0x24
 800e3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f000 80a2 	beq.w	800e51a <_vfiprintf_r+0x20e>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3e0:	f10a 0a01 	add.w	sl, sl, #1
 800e3e4:	9304      	str	r3, [sp, #16]
 800e3e6:	9307      	str	r3, [sp, #28]
 800e3e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3ec:	931a      	str	r3, [sp, #104]	; 0x68
 800e3ee:	4654      	mov	r4, sl
 800e3f0:	2205      	movs	r2, #5
 800e3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3f6:	4858      	ldr	r0, [pc, #352]	; (800e558 <_vfiprintf_r+0x24c>)
 800e3f8:	f7f1 ff12 	bl	8000220 <memchr>
 800e3fc:	9a04      	ldr	r2, [sp, #16]
 800e3fe:	b9d8      	cbnz	r0, 800e438 <_vfiprintf_r+0x12c>
 800e400:	06d1      	lsls	r1, r2, #27
 800e402:	bf44      	itt	mi
 800e404:	2320      	movmi	r3, #32
 800e406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e40a:	0713      	lsls	r3, r2, #28
 800e40c:	bf44      	itt	mi
 800e40e:	232b      	movmi	r3, #43	; 0x2b
 800e410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e414:	f89a 3000 	ldrb.w	r3, [sl]
 800e418:	2b2a      	cmp	r3, #42	; 0x2a
 800e41a:	d015      	beq.n	800e448 <_vfiprintf_r+0x13c>
 800e41c:	9a07      	ldr	r2, [sp, #28]
 800e41e:	4654      	mov	r4, sl
 800e420:	2000      	movs	r0, #0
 800e422:	f04f 0c0a 	mov.w	ip, #10
 800e426:	4621      	mov	r1, r4
 800e428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e42c:	3b30      	subs	r3, #48	; 0x30
 800e42e:	2b09      	cmp	r3, #9
 800e430:	d94e      	bls.n	800e4d0 <_vfiprintf_r+0x1c4>
 800e432:	b1b0      	cbz	r0, 800e462 <_vfiprintf_r+0x156>
 800e434:	9207      	str	r2, [sp, #28]
 800e436:	e014      	b.n	800e462 <_vfiprintf_r+0x156>
 800e438:	eba0 0308 	sub.w	r3, r0, r8
 800e43c:	fa09 f303 	lsl.w	r3, r9, r3
 800e440:	4313      	orrs	r3, r2
 800e442:	9304      	str	r3, [sp, #16]
 800e444:	46a2      	mov	sl, r4
 800e446:	e7d2      	b.n	800e3ee <_vfiprintf_r+0xe2>
 800e448:	9b03      	ldr	r3, [sp, #12]
 800e44a:	1d19      	adds	r1, r3, #4
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	9103      	str	r1, [sp, #12]
 800e450:	2b00      	cmp	r3, #0
 800e452:	bfbb      	ittet	lt
 800e454:	425b      	neglt	r3, r3
 800e456:	f042 0202 	orrlt.w	r2, r2, #2
 800e45a:	9307      	strge	r3, [sp, #28]
 800e45c:	9307      	strlt	r3, [sp, #28]
 800e45e:	bfb8      	it	lt
 800e460:	9204      	strlt	r2, [sp, #16]
 800e462:	7823      	ldrb	r3, [r4, #0]
 800e464:	2b2e      	cmp	r3, #46	; 0x2e
 800e466:	d10c      	bne.n	800e482 <_vfiprintf_r+0x176>
 800e468:	7863      	ldrb	r3, [r4, #1]
 800e46a:	2b2a      	cmp	r3, #42	; 0x2a
 800e46c:	d135      	bne.n	800e4da <_vfiprintf_r+0x1ce>
 800e46e:	9b03      	ldr	r3, [sp, #12]
 800e470:	1d1a      	adds	r2, r3, #4
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	9203      	str	r2, [sp, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	bfb8      	it	lt
 800e47a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e47e:	3402      	adds	r4, #2
 800e480:	9305      	str	r3, [sp, #20]
 800e482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e568 <_vfiprintf_r+0x25c>
 800e486:	7821      	ldrb	r1, [r4, #0]
 800e488:	2203      	movs	r2, #3
 800e48a:	4650      	mov	r0, sl
 800e48c:	f7f1 fec8 	bl	8000220 <memchr>
 800e490:	b140      	cbz	r0, 800e4a4 <_vfiprintf_r+0x198>
 800e492:	2340      	movs	r3, #64	; 0x40
 800e494:	eba0 000a 	sub.w	r0, r0, sl
 800e498:	fa03 f000 	lsl.w	r0, r3, r0
 800e49c:	9b04      	ldr	r3, [sp, #16]
 800e49e:	4303      	orrs	r3, r0
 800e4a0:	3401      	adds	r4, #1
 800e4a2:	9304      	str	r3, [sp, #16]
 800e4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a8:	482c      	ldr	r0, [pc, #176]	; (800e55c <_vfiprintf_r+0x250>)
 800e4aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4ae:	2206      	movs	r2, #6
 800e4b0:	f7f1 feb6 	bl	8000220 <memchr>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d03f      	beq.n	800e538 <_vfiprintf_r+0x22c>
 800e4b8:	4b29      	ldr	r3, [pc, #164]	; (800e560 <_vfiprintf_r+0x254>)
 800e4ba:	bb1b      	cbnz	r3, 800e504 <_vfiprintf_r+0x1f8>
 800e4bc:	9b03      	ldr	r3, [sp, #12]
 800e4be:	3307      	adds	r3, #7
 800e4c0:	f023 0307 	bic.w	r3, r3, #7
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	9303      	str	r3, [sp, #12]
 800e4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ca:	443b      	add	r3, r7
 800e4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ce:	e767      	b.n	800e3a0 <_vfiprintf_r+0x94>
 800e4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	2001      	movs	r0, #1
 800e4d8:	e7a5      	b.n	800e426 <_vfiprintf_r+0x11a>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	3401      	adds	r4, #1
 800e4de:	9305      	str	r3, [sp, #20]
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f04f 0c0a 	mov.w	ip, #10
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4ec:	3a30      	subs	r2, #48	; 0x30
 800e4ee:	2a09      	cmp	r2, #9
 800e4f0:	d903      	bls.n	800e4fa <_vfiprintf_r+0x1ee>
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0c5      	beq.n	800e482 <_vfiprintf_r+0x176>
 800e4f6:	9105      	str	r1, [sp, #20]
 800e4f8:	e7c3      	b.n	800e482 <_vfiprintf_r+0x176>
 800e4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4fe:	4604      	mov	r4, r0
 800e500:	2301      	movs	r3, #1
 800e502:	e7f0      	b.n	800e4e6 <_vfiprintf_r+0x1da>
 800e504:	ab03      	add	r3, sp, #12
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	462a      	mov	r2, r5
 800e50a:	4b16      	ldr	r3, [pc, #88]	; (800e564 <_vfiprintf_r+0x258>)
 800e50c:	a904      	add	r1, sp, #16
 800e50e:	4630      	mov	r0, r6
 800e510:	f7fb fa02 	bl	8009918 <_printf_float>
 800e514:	4607      	mov	r7, r0
 800e516:	1c78      	adds	r0, r7, #1
 800e518:	d1d6      	bne.n	800e4c8 <_vfiprintf_r+0x1bc>
 800e51a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e51c:	07d9      	lsls	r1, r3, #31
 800e51e:	d405      	bmi.n	800e52c <_vfiprintf_r+0x220>
 800e520:	89ab      	ldrh	r3, [r5, #12]
 800e522:	059a      	lsls	r2, r3, #22
 800e524:	d402      	bmi.n	800e52c <_vfiprintf_r+0x220>
 800e526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e528:	f7ff fe79 	bl	800e21e <__retarget_lock_release_recursive>
 800e52c:	89ab      	ldrh	r3, [r5, #12]
 800e52e:	065b      	lsls	r3, r3, #25
 800e530:	f53f af12 	bmi.w	800e358 <_vfiprintf_r+0x4c>
 800e534:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e536:	e711      	b.n	800e35c <_vfiprintf_r+0x50>
 800e538:	ab03      	add	r3, sp, #12
 800e53a:	9300      	str	r3, [sp, #0]
 800e53c:	462a      	mov	r2, r5
 800e53e:	4b09      	ldr	r3, [pc, #36]	; (800e564 <_vfiprintf_r+0x258>)
 800e540:	a904      	add	r1, sp, #16
 800e542:	4630      	mov	r0, r6
 800e544:	f7fb fc8c 	bl	8009e60 <_printf_i>
 800e548:	e7e4      	b.n	800e514 <_vfiprintf_r+0x208>
 800e54a:	bf00      	nop
 800e54c:	0800edbc 	.word	0x0800edbc
 800e550:	0800eddc 	.word	0x0800eddc
 800e554:	0800ed9c 	.word	0x0800ed9c
 800e558:	0800ed34 	.word	0x0800ed34
 800e55c:	0800ed3e 	.word	0x0800ed3e
 800e560:	08009919 	.word	0x08009919
 800e564:	0800e2e7 	.word	0x0800e2e7
 800e568:	0800ed3a 	.word	0x0800ed3a

0800e56c <__swbuf_r>:
 800e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56e:	460e      	mov	r6, r1
 800e570:	4614      	mov	r4, r2
 800e572:	4605      	mov	r5, r0
 800e574:	b118      	cbz	r0, 800e57e <__swbuf_r+0x12>
 800e576:	6983      	ldr	r3, [r0, #24]
 800e578:	b90b      	cbnz	r3, 800e57e <__swbuf_r+0x12>
 800e57a:	f7ff fd9f 	bl	800e0bc <__sinit>
 800e57e:	4b21      	ldr	r3, [pc, #132]	; (800e604 <__swbuf_r+0x98>)
 800e580:	429c      	cmp	r4, r3
 800e582:	d12b      	bne.n	800e5dc <__swbuf_r+0x70>
 800e584:	686c      	ldr	r4, [r5, #4]
 800e586:	69a3      	ldr	r3, [r4, #24]
 800e588:	60a3      	str	r3, [r4, #8]
 800e58a:	89a3      	ldrh	r3, [r4, #12]
 800e58c:	071a      	lsls	r2, r3, #28
 800e58e:	d52f      	bpl.n	800e5f0 <__swbuf_r+0x84>
 800e590:	6923      	ldr	r3, [r4, #16]
 800e592:	b36b      	cbz	r3, 800e5f0 <__swbuf_r+0x84>
 800e594:	6923      	ldr	r3, [r4, #16]
 800e596:	6820      	ldr	r0, [r4, #0]
 800e598:	1ac0      	subs	r0, r0, r3
 800e59a:	6963      	ldr	r3, [r4, #20]
 800e59c:	b2f6      	uxtb	r6, r6
 800e59e:	4283      	cmp	r3, r0
 800e5a0:	4637      	mov	r7, r6
 800e5a2:	dc04      	bgt.n	800e5ae <__swbuf_r+0x42>
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	f7ff fcf4 	bl	800df94 <_fflush_r>
 800e5ac:	bb30      	cbnz	r0, 800e5fc <__swbuf_r+0x90>
 800e5ae:	68a3      	ldr	r3, [r4, #8]
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	60a3      	str	r3, [r4, #8]
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	6022      	str	r2, [r4, #0]
 800e5ba:	701e      	strb	r6, [r3, #0]
 800e5bc:	6963      	ldr	r3, [r4, #20]
 800e5be:	3001      	adds	r0, #1
 800e5c0:	4283      	cmp	r3, r0
 800e5c2:	d004      	beq.n	800e5ce <__swbuf_r+0x62>
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	07db      	lsls	r3, r3, #31
 800e5c8:	d506      	bpl.n	800e5d8 <__swbuf_r+0x6c>
 800e5ca:	2e0a      	cmp	r6, #10
 800e5cc:	d104      	bne.n	800e5d8 <__swbuf_r+0x6c>
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	f7ff fcdf 	bl	800df94 <_fflush_r>
 800e5d6:	b988      	cbnz	r0, 800e5fc <__swbuf_r+0x90>
 800e5d8:	4638      	mov	r0, r7
 800e5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5dc:	4b0a      	ldr	r3, [pc, #40]	; (800e608 <__swbuf_r+0x9c>)
 800e5de:	429c      	cmp	r4, r3
 800e5e0:	d101      	bne.n	800e5e6 <__swbuf_r+0x7a>
 800e5e2:	68ac      	ldr	r4, [r5, #8]
 800e5e4:	e7cf      	b.n	800e586 <__swbuf_r+0x1a>
 800e5e6:	4b09      	ldr	r3, [pc, #36]	; (800e60c <__swbuf_r+0xa0>)
 800e5e8:	429c      	cmp	r4, r3
 800e5ea:	bf08      	it	eq
 800e5ec:	68ec      	ldreq	r4, [r5, #12]
 800e5ee:	e7ca      	b.n	800e586 <__swbuf_r+0x1a>
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	f000 f80c 	bl	800e610 <__swsetup_r>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d0cb      	beq.n	800e594 <__swbuf_r+0x28>
 800e5fc:	f04f 37ff 	mov.w	r7, #4294967295
 800e600:	e7ea      	b.n	800e5d8 <__swbuf_r+0x6c>
 800e602:	bf00      	nop
 800e604:	0800edbc 	.word	0x0800edbc
 800e608:	0800eddc 	.word	0x0800eddc
 800e60c:	0800ed9c 	.word	0x0800ed9c

0800e610 <__swsetup_r>:
 800e610:	4b32      	ldr	r3, [pc, #200]	; (800e6dc <__swsetup_r+0xcc>)
 800e612:	b570      	push	{r4, r5, r6, lr}
 800e614:	681d      	ldr	r5, [r3, #0]
 800e616:	4606      	mov	r6, r0
 800e618:	460c      	mov	r4, r1
 800e61a:	b125      	cbz	r5, 800e626 <__swsetup_r+0x16>
 800e61c:	69ab      	ldr	r3, [r5, #24]
 800e61e:	b913      	cbnz	r3, 800e626 <__swsetup_r+0x16>
 800e620:	4628      	mov	r0, r5
 800e622:	f7ff fd4b 	bl	800e0bc <__sinit>
 800e626:	4b2e      	ldr	r3, [pc, #184]	; (800e6e0 <__swsetup_r+0xd0>)
 800e628:	429c      	cmp	r4, r3
 800e62a:	d10f      	bne.n	800e64c <__swsetup_r+0x3c>
 800e62c:	686c      	ldr	r4, [r5, #4]
 800e62e:	89a3      	ldrh	r3, [r4, #12]
 800e630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e634:	0719      	lsls	r1, r3, #28
 800e636:	d42c      	bmi.n	800e692 <__swsetup_r+0x82>
 800e638:	06dd      	lsls	r5, r3, #27
 800e63a:	d411      	bmi.n	800e660 <__swsetup_r+0x50>
 800e63c:	2309      	movs	r3, #9
 800e63e:	6033      	str	r3, [r6, #0]
 800e640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e644:	81a3      	strh	r3, [r4, #12]
 800e646:	f04f 30ff 	mov.w	r0, #4294967295
 800e64a:	e03e      	b.n	800e6ca <__swsetup_r+0xba>
 800e64c:	4b25      	ldr	r3, [pc, #148]	; (800e6e4 <__swsetup_r+0xd4>)
 800e64e:	429c      	cmp	r4, r3
 800e650:	d101      	bne.n	800e656 <__swsetup_r+0x46>
 800e652:	68ac      	ldr	r4, [r5, #8]
 800e654:	e7eb      	b.n	800e62e <__swsetup_r+0x1e>
 800e656:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <__swsetup_r+0xd8>)
 800e658:	429c      	cmp	r4, r3
 800e65a:	bf08      	it	eq
 800e65c:	68ec      	ldreq	r4, [r5, #12]
 800e65e:	e7e6      	b.n	800e62e <__swsetup_r+0x1e>
 800e660:	0758      	lsls	r0, r3, #29
 800e662:	d512      	bpl.n	800e68a <__swsetup_r+0x7a>
 800e664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e666:	b141      	cbz	r1, 800e67a <__swsetup_r+0x6a>
 800e668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e66c:	4299      	cmp	r1, r3
 800e66e:	d002      	beq.n	800e676 <__swsetup_r+0x66>
 800e670:	4630      	mov	r0, r6
 800e672:	f7fe fd89 	bl	800d188 <_free_r>
 800e676:	2300      	movs	r3, #0
 800e678:	6363      	str	r3, [r4, #52]	; 0x34
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e680:	81a3      	strh	r3, [r4, #12]
 800e682:	2300      	movs	r3, #0
 800e684:	6063      	str	r3, [r4, #4]
 800e686:	6923      	ldr	r3, [r4, #16]
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	f043 0308 	orr.w	r3, r3, #8
 800e690:	81a3      	strh	r3, [r4, #12]
 800e692:	6923      	ldr	r3, [r4, #16]
 800e694:	b94b      	cbnz	r3, 800e6aa <__swsetup_r+0x9a>
 800e696:	89a3      	ldrh	r3, [r4, #12]
 800e698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6a0:	d003      	beq.n	800e6aa <__swsetup_r+0x9a>
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f000 f84d 	bl	800e744 <__smakebuf_r>
 800e6aa:	89a0      	ldrh	r0, [r4, #12]
 800e6ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6b0:	f010 0301 	ands.w	r3, r0, #1
 800e6b4:	d00a      	beq.n	800e6cc <__swsetup_r+0xbc>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	60a3      	str	r3, [r4, #8]
 800e6ba:	6963      	ldr	r3, [r4, #20]
 800e6bc:	425b      	negs	r3, r3
 800e6be:	61a3      	str	r3, [r4, #24]
 800e6c0:	6923      	ldr	r3, [r4, #16]
 800e6c2:	b943      	cbnz	r3, 800e6d6 <__swsetup_r+0xc6>
 800e6c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6c8:	d1ba      	bne.n	800e640 <__swsetup_r+0x30>
 800e6ca:	bd70      	pop	{r4, r5, r6, pc}
 800e6cc:	0781      	lsls	r1, r0, #30
 800e6ce:	bf58      	it	pl
 800e6d0:	6963      	ldrpl	r3, [r4, #20]
 800e6d2:	60a3      	str	r3, [r4, #8]
 800e6d4:	e7f4      	b.n	800e6c0 <__swsetup_r+0xb0>
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	e7f7      	b.n	800e6ca <__swsetup_r+0xba>
 800e6da:	bf00      	nop
 800e6dc:	20000070 	.word	0x20000070
 800e6e0:	0800edbc 	.word	0x0800edbc
 800e6e4:	0800eddc 	.word	0x0800eddc
 800e6e8:	0800ed9c 	.word	0x0800ed9c

0800e6ec <abort>:
 800e6ec:	b508      	push	{r3, lr}
 800e6ee:	2006      	movs	r0, #6
 800e6f0:	f000 f898 	bl	800e824 <raise>
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	f7f3 fdbb 	bl	8002270 <_exit>

0800e6fa <__swhatbuf_r>:
 800e6fa:	b570      	push	{r4, r5, r6, lr}
 800e6fc:	460e      	mov	r6, r1
 800e6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e702:	2900      	cmp	r1, #0
 800e704:	b096      	sub	sp, #88	; 0x58
 800e706:	4614      	mov	r4, r2
 800e708:	461d      	mov	r5, r3
 800e70a:	da07      	bge.n	800e71c <__swhatbuf_r+0x22>
 800e70c:	2300      	movs	r3, #0
 800e70e:	602b      	str	r3, [r5, #0]
 800e710:	89b3      	ldrh	r3, [r6, #12]
 800e712:	061a      	lsls	r2, r3, #24
 800e714:	d410      	bmi.n	800e738 <__swhatbuf_r+0x3e>
 800e716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e71a:	e00e      	b.n	800e73a <__swhatbuf_r+0x40>
 800e71c:	466a      	mov	r2, sp
 800e71e:	f000 f89d 	bl	800e85c <_fstat_r>
 800e722:	2800      	cmp	r0, #0
 800e724:	dbf2      	blt.n	800e70c <__swhatbuf_r+0x12>
 800e726:	9a01      	ldr	r2, [sp, #4]
 800e728:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e72c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e730:	425a      	negs	r2, r3
 800e732:	415a      	adcs	r2, r3
 800e734:	602a      	str	r2, [r5, #0]
 800e736:	e7ee      	b.n	800e716 <__swhatbuf_r+0x1c>
 800e738:	2340      	movs	r3, #64	; 0x40
 800e73a:	2000      	movs	r0, #0
 800e73c:	6023      	str	r3, [r4, #0]
 800e73e:	b016      	add	sp, #88	; 0x58
 800e740:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e744 <__smakebuf_r>:
 800e744:	898b      	ldrh	r3, [r1, #12]
 800e746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e748:	079d      	lsls	r5, r3, #30
 800e74a:	4606      	mov	r6, r0
 800e74c:	460c      	mov	r4, r1
 800e74e:	d507      	bpl.n	800e760 <__smakebuf_r+0x1c>
 800e750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	6123      	str	r3, [r4, #16]
 800e758:	2301      	movs	r3, #1
 800e75a:	6163      	str	r3, [r4, #20]
 800e75c:	b002      	add	sp, #8
 800e75e:	bd70      	pop	{r4, r5, r6, pc}
 800e760:	ab01      	add	r3, sp, #4
 800e762:	466a      	mov	r2, sp
 800e764:	f7ff ffc9 	bl	800e6fa <__swhatbuf_r>
 800e768:	9900      	ldr	r1, [sp, #0]
 800e76a:	4605      	mov	r5, r0
 800e76c:	4630      	mov	r0, r6
 800e76e:	f7fe fd5b 	bl	800d228 <_malloc_r>
 800e772:	b948      	cbnz	r0, 800e788 <__smakebuf_r+0x44>
 800e774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e778:	059a      	lsls	r2, r3, #22
 800e77a:	d4ef      	bmi.n	800e75c <__smakebuf_r+0x18>
 800e77c:	f023 0303 	bic.w	r3, r3, #3
 800e780:	f043 0302 	orr.w	r3, r3, #2
 800e784:	81a3      	strh	r3, [r4, #12]
 800e786:	e7e3      	b.n	800e750 <__smakebuf_r+0xc>
 800e788:	4b0d      	ldr	r3, [pc, #52]	; (800e7c0 <__smakebuf_r+0x7c>)
 800e78a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	6020      	str	r0, [r4, #0]
 800e790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e794:	81a3      	strh	r3, [r4, #12]
 800e796:	9b00      	ldr	r3, [sp, #0]
 800e798:	6163      	str	r3, [r4, #20]
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	6120      	str	r0, [r4, #16]
 800e79e:	b15b      	cbz	r3, 800e7b8 <__smakebuf_r+0x74>
 800e7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f000 f86b 	bl	800e880 <_isatty_r>
 800e7aa:	b128      	cbz	r0, 800e7b8 <__smakebuf_r+0x74>
 800e7ac:	89a3      	ldrh	r3, [r4, #12]
 800e7ae:	f023 0303 	bic.w	r3, r3, #3
 800e7b2:	f043 0301 	orr.w	r3, r3, #1
 800e7b6:	81a3      	strh	r3, [r4, #12]
 800e7b8:	89a0      	ldrh	r0, [r4, #12]
 800e7ba:	4305      	orrs	r5, r0
 800e7bc:	81a5      	strh	r5, [r4, #12]
 800e7be:	e7cd      	b.n	800e75c <__smakebuf_r+0x18>
 800e7c0:	0800e055 	.word	0x0800e055

0800e7c4 <_malloc_usable_size_r>:
 800e7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7c8:	1f18      	subs	r0, r3, #4
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	bfbc      	itt	lt
 800e7ce:	580b      	ldrlt	r3, [r1, r0]
 800e7d0:	18c0      	addlt	r0, r0, r3
 800e7d2:	4770      	bx	lr

0800e7d4 <_raise_r>:
 800e7d4:	291f      	cmp	r1, #31
 800e7d6:	b538      	push	{r3, r4, r5, lr}
 800e7d8:	4604      	mov	r4, r0
 800e7da:	460d      	mov	r5, r1
 800e7dc:	d904      	bls.n	800e7e8 <_raise_r+0x14>
 800e7de:	2316      	movs	r3, #22
 800e7e0:	6003      	str	r3, [r0, #0]
 800e7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e7ea:	b112      	cbz	r2, 800e7f2 <_raise_r+0x1e>
 800e7ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7f0:	b94b      	cbnz	r3, 800e806 <_raise_r+0x32>
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	f000 f830 	bl	800e858 <_getpid_r>
 800e7f8:	462a      	mov	r2, r5
 800e7fa:	4601      	mov	r1, r0
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e802:	f000 b817 	b.w	800e834 <_kill_r>
 800e806:	2b01      	cmp	r3, #1
 800e808:	d00a      	beq.n	800e820 <_raise_r+0x4c>
 800e80a:	1c59      	adds	r1, r3, #1
 800e80c:	d103      	bne.n	800e816 <_raise_r+0x42>
 800e80e:	2316      	movs	r3, #22
 800e810:	6003      	str	r3, [r0, #0]
 800e812:	2001      	movs	r0, #1
 800e814:	e7e7      	b.n	800e7e6 <_raise_r+0x12>
 800e816:	2400      	movs	r4, #0
 800e818:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e81c:	4628      	mov	r0, r5
 800e81e:	4798      	blx	r3
 800e820:	2000      	movs	r0, #0
 800e822:	e7e0      	b.n	800e7e6 <_raise_r+0x12>

0800e824 <raise>:
 800e824:	4b02      	ldr	r3, [pc, #8]	; (800e830 <raise+0xc>)
 800e826:	4601      	mov	r1, r0
 800e828:	6818      	ldr	r0, [r3, #0]
 800e82a:	f7ff bfd3 	b.w	800e7d4 <_raise_r>
 800e82e:	bf00      	nop
 800e830:	20000070 	.word	0x20000070

0800e834 <_kill_r>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	4d07      	ldr	r5, [pc, #28]	; (800e854 <_kill_r+0x20>)
 800e838:	2300      	movs	r3, #0
 800e83a:	4604      	mov	r4, r0
 800e83c:	4608      	mov	r0, r1
 800e83e:	4611      	mov	r1, r2
 800e840:	602b      	str	r3, [r5, #0]
 800e842:	f7f3 fd05 	bl	8002250 <_kill>
 800e846:	1c43      	adds	r3, r0, #1
 800e848:	d102      	bne.n	800e850 <_kill_r+0x1c>
 800e84a:	682b      	ldr	r3, [r5, #0]
 800e84c:	b103      	cbz	r3, 800e850 <_kill_r+0x1c>
 800e84e:	6023      	str	r3, [r4, #0]
 800e850:	bd38      	pop	{r3, r4, r5, pc}
 800e852:	bf00      	nop
 800e854:	2000064c 	.word	0x2000064c

0800e858 <_getpid_r>:
 800e858:	f7f3 bcf2 	b.w	8002240 <_getpid>

0800e85c <_fstat_r>:
 800e85c:	b538      	push	{r3, r4, r5, lr}
 800e85e:	4d07      	ldr	r5, [pc, #28]	; (800e87c <_fstat_r+0x20>)
 800e860:	2300      	movs	r3, #0
 800e862:	4604      	mov	r4, r0
 800e864:	4608      	mov	r0, r1
 800e866:	4611      	mov	r1, r2
 800e868:	602b      	str	r3, [r5, #0]
 800e86a:	f7f3 fd50 	bl	800230e <_fstat>
 800e86e:	1c43      	adds	r3, r0, #1
 800e870:	d102      	bne.n	800e878 <_fstat_r+0x1c>
 800e872:	682b      	ldr	r3, [r5, #0]
 800e874:	b103      	cbz	r3, 800e878 <_fstat_r+0x1c>
 800e876:	6023      	str	r3, [r4, #0]
 800e878:	bd38      	pop	{r3, r4, r5, pc}
 800e87a:	bf00      	nop
 800e87c:	2000064c 	.word	0x2000064c

0800e880 <_isatty_r>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	4d06      	ldr	r5, [pc, #24]	; (800e89c <_isatty_r+0x1c>)
 800e884:	2300      	movs	r3, #0
 800e886:	4604      	mov	r4, r0
 800e888:	4608      	mov	r0, r1
 800e88a:	602b      	str	r3, [r5, #0]
 800e88c:	f7f3 fd4f 	bl	800232e <_isatty>
 800e890:	1c43      	adds	r3, r0, #1
 800e892:	d102      	bne.n	800e89a <_isatty_r+0x1a>
 800e894:	682b      	ldr	r3, [r5, #0]
 800e896:	b103      	cbz	r3, 800e89a <_isatty_r+0x1a>
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	bd38      	pop	{r3, r4, r5, pc}
 800e89c:	2000064c 	.word	0x2000064c

0800e8a0 <_init>:
 800e8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a2:	bf00      	nop
 800e8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8a6:	bc08      	pop	{r3}
 800e8a8:	469e      	mov	lr, r3
 800e8aa:	4770      	bx	lr

0800e8ac <_fini>:
 800e8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ae:	bf00      	nop
 800e8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8b2:	bc08      	pop	{r3}
 800e8b4:	469e      	mov	lr, r3
 800e8b6:	4770      	bx	lr
