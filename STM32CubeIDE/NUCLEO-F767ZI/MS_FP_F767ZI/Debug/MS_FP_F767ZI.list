
MS_FP_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee8  08004ee8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef0  08004ef0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000070  08004f68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08004f68  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f94  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276a  00000000  00000000  00035032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000377a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00038840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028708  00000000  00000000  000397e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bfe  00000000  00000000  00061ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd3c2  00000000  00000000  00075aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172eb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a70  00000000  00000000  00172f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004e80 	.word	0x08004e80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004e80 	.word	0x08004e80

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fc30 	bl	8000e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f839 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f989 	bl	80008fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 f929 	bl	8000840 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ee:	f000 f957 	bl	80008a0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80005f2:	f000 f8cb 	bl	800078c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005f6:	2108      	movs	r1, #8
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0x68>)
 80005fa:	f002 fa3f 	bl	8002a7c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 400);
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <main+0x68>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000606:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //d = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_3);
	  d = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <main+0x6c>)
 800060e:	f000 ff2b 	bl	8001468 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <main+0x70>)
 8000618:	801a      	strh	r2, [r3, #0]
	  int n = sprintf(msg, "%d\r", d);
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0x70>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	490a      	ldr	r1, [pc, #40]	; (800064c <main+0x74>)
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <main+0x78>)
 8000624:	f003 fffe 	bl	8004624 <siprintf>
 8000628:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, n, 100);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	b29a      	uxth	r2, r3
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	4907      	ldr	r1, [pc, #28]	; (8000650 <main+0x78>)
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <main+0x7c>)
 8000634:	f003 f830 	bl	8003698 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 fc5f 	bl	8000efc <HAL_Delay>
  {
 800063e:	e7e3      	b.n	8000608 <main+0x30>
 8000640:	20000540 	.word	0x20000540
 8000644:	40020800 	.word	0x40020800
 8000648:	2000058c 	.word	0x2000058c
 800064c:	08004e98 	.word	0x08004e98
 8000650:	20000520 	.word	0x20000520
 8000654:	20000098 	.word	0x20000098

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0b8      	sub	sp, #224	; 0xe0
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 ffd4 	bl	8004614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2290      	movs	r2, #144	; 0x90
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f003 ffc5 	bl	8004614 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068a:	f001 f867 	bl	800175c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <SystemClock_Config+0x128>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a3b      	ldr	r2, [pc, #236]	; (8000780 <SystemClock_Config+0x128>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemClock_Config+0x128>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemClock_Config+0x12c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <SystemClock_Config+0x12c>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemClock_Config+0x12c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006e4:	2360      	movs	r3, #96	; 0x60
 80006e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f88b 	bl	800181c <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800070c:	f000 f9dc 	bl	8000ac8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000710:	f001 f834 	bl	800177c <HAL_PWREx_EnableOverDrive>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071a:	f000 f9d5 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000742:	2103      	movs	r1, #3
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fb17 	bl	8001d78 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000750:	f000 f9ba 	bl	8000ac8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <SystemClock_Config+0x130>)
 8000756:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000758:	2300      	movs	r3, #0
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fd08 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000772:	f000 f9a9 	bl	8000ac8 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	37e0      	adds	r7, #224	; 0xe0
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000
 8000788:	00200100 	.word	0x00200100

0800078c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_TIM3_Init+0xac>)
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <MX_TIM3_Init+0xb0>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_TIM3_Init+0xac>)
 80007b8:	225f      	movs	r2, #95	; 0x5f
 80007ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_TIM3_Init+0xac>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_TIM3_Init+0xac>)
 80007c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_TIM3_Init+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_TIM3_Init+0xac>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007d6:	4818      	ldr	r0, [pc, #96]	; (8000838 <MX_TIM3_Init+0xac>)
 80007d8:	f002 f8f8 	bl	80029cc <HAL_TIM_PWM_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007e2:	f000 f971 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <MX_TIM3_Init+0xac>)
 80007f6:	f002 fe73 	bl	80034e0 <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000800:	f000 f962 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000804:	2360      	movs	r3, #96	; 0x60
 8000806:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 8000808:	2364      	movs	r3, #100	; 0x64
 800080a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2208      	movs	r2, #8
 8000818:	4619      	mov	r1, r3
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <MX_TIM3_Init+0xac>)
 800081c:	f002 fa28 	bl	8002c70 <HAL_TIM_PWM_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000826:	f000 f94f 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <MX_TIM3_Init+0xac>)
 800082c:	f000 f996 	bl	8000b5c <HAL_TIM_MspPostInit>

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000540 	.word	0x20000540
 800083c:	40000400 	.word	0x40000400

08000840 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART3_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_USART3_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART3_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART3_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART3_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART3_UART_Init+0x58>)
 8000884:	f002 feba 	bl	80035fc <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f91b 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000098 	.word	0x20000098
 800089c:	40004800 	.word	0x40004800

080008a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2206      	movs	r2, #6
 80008b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2201      	movs	r2, #1
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	f000 fdf1 	bl	80014ca <HAL_PCD_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 f8eb 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000011c 	.word	0x2000011c

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a67      	ldr	r2, [pc, #412]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b65      	ldr	r3, [pc, #404]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	61bb      	str	r3, [r7, #24]
 8000928:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a61      	ldr	r2, [pc, #388]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a5b      	ldr	r2, [pc, #364]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a55      	ldr	r2, [pc, #340]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a4f      	ldr	r2, [pc, #316]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a49      	ldr	r2, [pc, #292]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <MX_GPIO_Init+0x1b8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a8:	4843      	ldr	r0, [pc, #268]	; (8000ab8 <MX_GPIO_Init+0x1bc>)
 80009aa:	f000 fd75 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4842      	ldr	r0, [pc, #264]	; (8000abc <MX_GPIO_Init+0x1c0>)
 80009b4:	f000 fd70 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	483c      	ldr	r0, [pc, #240]	; (8000ac0 <MX_GPIO_Init+0x1c4>)
 80009d0:	f000 fb9e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009d4:	2332      	movs	r3, #50	; 0x32
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e4:	230b      	movs	r3, #11
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4834      	ldr	r0, [pc, #208]	; (8000ac0 <MX_GPIO_Init+0x1c4>)
 80009f0:	f000 fb8e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009f4:	2386      	movs	r3, #134	; 0x86
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a04:	230b      	movs	r3, #11
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <MX_GPIO_Init+0x1c8>)
 8000a10:	f000 fb7e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a14:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0x1bc>)
 8000a2e:	f000 fb6f 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a44:	230b      	movs	r3, #11
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <MX_GPIO_Init+0x1bc>)
 8000a50:	f000 fb5e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <MX_GPIO_Init+0x1c0>)
 8000a6c:	f000 fb50 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <MX_GPIO_Init+0x1c0>)
 8000a84:	f000 fb44 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9a:	230b      	movs	r3, #11
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_GPIO_Init+0x1c0>)
 8000aa6:	f000 fb33 	bl	8001110 <HAL_GPIO_Init>

}
 8000aaa:	bf00      	nop
 8000aac:	3730      	adds	r7, #48	; 0x30
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_TIM_PWM_MspInit+0x38>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d10b      	bne.n	8000b46 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40000400 	.word	0x40000400
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <HAL_TIM_MspPostInit+0x64>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d11c      	bne.n	8000bb8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_TIM_MspPostInit+0x68>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_TIM_MspPostInit+0x68>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_TIM_MspPostInit+0x68>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_TIM_MspPostInit+0x6c>)
 8000bb4:	f000 faac 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020800 	.word	0x40020800

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0x7c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d128      	bne.n	8000c40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_UART_MspInit+0x80>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <HAL_UART_MspInit+0x80>)
 8000bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_UART_MspInit+0x80>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_UART_MspInit+0x80>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <HAL_UART_MspInit+0x80>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_UART_MspInit+0x80>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c30:	2307      	movs	r3, #7
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_UART_MspInit+0x84>)
 8000c3c:	f000 fa68 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40004800 	.word	0x40004800
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c74:	d141      	bne.n	8000cfa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4817      	ldr	r0, [pc, #92]	; (8000d08 <HAL_PCD_MspInit+0xb4>)
 8000cac:	f000 fa30 	bl	8001110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4810      	ldr	r0, [pc, #64]	; (8000d08 <HAL_PCD_MspInit+0xb4>)
 8000cc6:	f000 fa23 	bl	8001110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cce:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6353      	str	r3, [r2, #52]	; 0x34
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_PCD_MspInit+0xb0>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f8b0 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f003 fc16 	bl	80045c0 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20080000 	.word	0x20080000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	2000008c 	.word	0x2000008c
 8000dc8:	200005a8 	.word	0x200005a8

08000dcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f003 fbd5 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbd9 	bl	80005d8 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e34:	08004ef8 	.word	0x08004ef8
  ldr r2, =_sbss
 8000e38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e3c:	200005a4 	.word	0x200005a4

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>

08000e42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f000 f92e 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f805 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e52:	f7ff fe3f 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f93b 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 f911 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000590 	.word	0x20000590

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000590 	.word	0x20000590

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <__NVIC_SetPriorityGrouping+0x40>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x40>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00
 8000f88:	05fa0000 	.word	0x05fa0000

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff47 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff5c 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffb0 	bl	8001064 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e175      	b.n	800141c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	429a      	cmp	r2, r3
 800114a:	f040 8164 	bne.w	8001416 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d005      	beq.n	8001166 <HAL_GPIO_Init+0x56>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d130      	bne.n	80011c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 0201 	and.w	r2, r3, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d017      	beq.n	8001204 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d123      	bne.n	8001258 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	69b9      	ldr	r1, [r7, #24]
 8001254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0203 	and.w	r2, r3, #3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80be 	beq.w	8001416 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b66      	ldr	r3, [pc, #408]	; (8001434 <HAL_GPIO_Init+0x324>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a65      	ldr	r2, [pc, #404]	; (8001434 <HAL_GPIO_Init+0x324>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <HAL_GPIO_Init+0x324>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012b2:	4a61      	ldr	r2, [pc, #388]	; (8001438 <HAL_GPIO_Init+0x328>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a58      	ldr	r2, [pc, #352]	; (800143c <HAL_GPIO_Init+0x32c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d037      	beq.n	800134e <HAL_GPIO_Init+0x23e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a57      	ldr	r2, [pc, #348]	; (8001440 <HAL_GPIO_Init+0x330>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d031      	beq.n	800134a <HAL_GPIO_Init+0x23a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a56      	ldr	r2, [pc, #344]	; (8001444 <HAL_GPIO_Init+0x334>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x236>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a55      	ldr	r2, [pc, #340]	; (8001448 <HAL_GPIO_Init+0x338>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x232>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a54      	ldr	r2, [pc, #336]	; (800144c <HAL_GPIO_Init+0x33c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x22e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a53      	ldr	r2, [pc, #332]	; (8001450 <HAL_GPIO_Init+0x340>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x22a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_GPIO_Init+0x344>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x226>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a51      	ldr	r2, [pc, #324]	; (8001458 <HAL_GPIO_Init+0x348>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x222>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a50      	ldr	r2, [pc, #320]	; (800145c <HAL_GPIO_Init+0x34c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x21e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	; (8001460 <HAL_GPIO_Init+0x350>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x21a>
 8001326:	2309      	movs	r3, #9
 8001328:	e012      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800132a:	230a      	movs	r3, #10
 800132c:	e010      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800132e:	2308      	movs	r3, #8
 8001330:	e00e      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001332:	2307      	movs	r3, #7
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001336:	2306      	movs	r3, #6
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800134e:	2300      	movs	r3, #0
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_GPIO_Init+0x328>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <HAL_GPIO_Init+0x354>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a34      	ldr	r2, [pc, #208]	; (8001464 <HAL_GPIO_Init+0x354>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_GPIO_Init+0x354>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_GPIO_Init+0x354>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_GPIO_Init+0x354>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e6:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <HAL_GPIO_Init+0x354>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_GPIO_Init+0x354>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_GPIO_Init+0x354>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f67f ae86 	bls.w	8001130 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40013800 	.word	0x40013800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40021400 	.word	0x40021400
 8001454:	40021800 	.word	0x40021800
 8001458:	40021c00 	.word	0x40021c00
 800145c:	40022000 	.word	0x40022000
 8001460:	40022400 	.word	0x40022400
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e001      	b.n	800148a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	619a      	str	r2, [r3, #24]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014cc:	b08f      	sub	sp, #60	; 0x3c
 80014ce:	af0a      	add	r7, sp, #40	; 0x28
 80014d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e116      	b.n	800170a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d106      	bne.n	80014fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fbac 	bl	8000c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2203      	movs	r2, #3
 8001500:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fdba 	bl	8004094 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	687e      	ldr	r6, [r7, #4]
 8001528:	466d      	mov	r5, sp
 800152a:	f106 0410 	add.w	r4, r6, #16
 800152e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001536:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153a:	e885 0003 	stmia.w	r5, {r0, r1}
 800153e:	1d33      	adds	r3, r6, #4
 8001540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f002 fd4e 	bl	8003fe4 <USB_CoreInit>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2202      	movs	r2, #2
 8001552:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0d7      	b.n	800170a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fda8 	bl	80040b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e04a      	b.n	8001602 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	333d      	adds	r3, #61	; 0x3d
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	333c      	adds	r3, #60	; 0x3c
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	b298      	uxth	r0, r3
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3342      	adds	r3, #66	; 0x42
 80015a8:	4602      	mov	r2, r0
 80015aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	333f      	adds	r3, #63	; 0x3f
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3344      	adds	r3, #68	; 0x44
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3348      	adds	r3, #72	; 0x48
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3350      	adds	r3, #80	; 0x50
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	3301      	adds	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3af      	bcc.n	800156c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e044      	b.n	800169c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	3301      	adds	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d3b5      	bcc.n	8001612 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	687e      	ldr	r6, [r7, #4]
 80016ae:	466d      	mov	r5, sp
 80016b0:	f106 0410 	add.w	r4, r6, #16
 80016b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c4:	1d33      	adds	r3, r6, #4
 80016c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c8:	6838      	ldr	r0, [r7, #0]
 80016ca:	f002 fd41 	bl	8004150 <USB_DevInit>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e014      	b.n	800170a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f80b 	bl	8001714 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fefb 	bl	80044fe <USB_DevDisconnect>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001714 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_PCDEx_ActivateLPM+0x44>)
 8001744:	4313      	orrs	r3, r2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	10000003 	.word	0x10000003

0800175c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_PWREx_EnableOverDrive+0x98>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_PWREx_EnableOverDrive+0x98>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_PWREx_EnableOverDrive+0x98>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017aa:	f7ff fb9b 	bl	8000ee4 <HAL_GetTick>
 80017ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017b0:	e009      	b.n	80017c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017b2:	f7ff fb97 	bl	8000ee4 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017c0:	d901      	bls.n	80017c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e022      	b.n	800180c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d1ee      	bne.n	80017b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e0:	f7ff fb80 	bl	8000ee4 <HAL_GetTick>
 80017e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017e6:	e009      	b.n	80017fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017e8:	f7ff fb7c 	bl	8000ee4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f6:	d901      	bls.n	80017fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e007      	b.n	800180c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001808:	d1ee      	bne.n	80017e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e29b      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8087 	beq.w	800194e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001840:	4b96      	ldr	r3, [pc, #600]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b04      	cmp	r3, #4
 800184a:	d00c      	beq.n	8001866 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184c:	4b93      	ldr	r3, [pc, #588]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d112      	bne.n	800187e <HAL_RCC_OscConfig+0x62>
 8001858:	4b90      	ldr	r3, [pc, #576]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001864:	d10b      	bne.n	800187e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	4b8d      	ldr	r3, [pc, #564]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d06c      	beq.n	800194c <HAL_RCC_OscConfig+0x130>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d168      	bne.n	800194c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e275      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x7a>
 8001888:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a83      	ldr	r2, [pc, #524]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e02e      	b.n	80018f4 <HAL_RCC_OscConfig+0xd8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x9c>
 800189e:	4b7f      	ldr	r3, [pc, #508]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7e      	ldr	r2, [pc, #504]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b7c      	ldr	r3, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7b      	ldr	r2, [pc, #492]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xd8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0xc0>
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a75      	ldr	r2, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a72      	ldr	r2, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xd8>
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6b      	ldr	r2, [pc, #428]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff faf2 	bl	8000ee4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff faee 	bl	8000ee4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e229      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xe8>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fade 	bl	8000ee4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fada 	bl	8000ee4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e215      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x110>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d069      	beq.n	8001a2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195a:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b08      	cmp	r3, #8
 8001970:	d11c      	bne.n	80019ac <HAL_RCC_OscConfig+0x190>
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x17a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e1e9      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	493d      	ldr	r1, [pc, #244]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	e040      	b.n	8001a2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d023      	beq.n	80019fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a38      	ldr	r2, [pc, #224]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fa90 	bl	8000ee4 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c8:	f7ff fa8c 	bl	8000ee4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1c7      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4929      	ldr	r1, [pc, #164]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
 80019fa:	e018      	b.n	8001a2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff fa6c 	bl	8000ee4 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff fa68 	bl	8000ee4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1a3      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d038      	beq.n	8001aac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d019      	beq.n	8001a76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fa49 	bl	8000ee4 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff fa45 	bl	8000ee4 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e180      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x23a>
 8001a74:	e01a      	b.n	8001aac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff fa2f 	bl	8000ee4 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fa2b 	bl	8000ee4 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d903      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e166      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
 8001a9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	4b92      	ldr	r3, [pc, #584]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a4 	beq.w	8001c02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b89      	ldr	r3, [pc, #548]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a88      	ldr	r2, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b86      	ldr	r3, [pc, #536]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae2:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <HAL_RCC_OscConfig+0x4d4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aee:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_RCC_OscConfig+0x4d4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7f      	ldr	r2, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x4d4>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f9f3 	bl	8000ee4 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7ff f9ef 	bl	8000ee4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e12a      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b14:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCC_OscConfig+0x4d4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x31a>
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a6f      	ldr	r2, [pc, #444]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	e02d      	b.n	8001b92 <HAL_RCC_OscConfig+0x376>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x33c>
 8001b3e:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	4a6a      	ldr	r2, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4a:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	e01c      	b.n	8001b92 <HAL_RCC_OscConfig+0x376>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x35e>
 8001b60:	4b62      	ldr	r3, [pc, #392]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	4a61      	ldr	r2, [pc, #388]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6c:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	4a5e      	ldr	r2, [pc, #376]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0x376>
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a5b      	ldr	r2, [pc, #364]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d015      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f9a3 	bl	8000ee4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f99f 	bl	8000ee4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0d8      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ee      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x386>
 8001bc4:	e014      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f98d 	bl	8000ee4 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff f989 	bl	8000ee4 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0c2      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ee      	bne.n	8001bce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a3c      	ldr	r2, [pc, #240]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 80ae 	beq.w	8001d68 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d06d      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d14b      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a31      	ldr	r2, [pc, #196]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f95a 	bl	8000ee4 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff f956 	bl	8000ee4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e091      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69da      	ldr	r2, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	071b      	lsls	r3, r3, #28
 8001c7e:	491b      	ldr	r1, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f928 	bl	8000ee4 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff f924 	bl	8000ee4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e05f      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x47c>
 8001cb6:	e057      	b.n	8001d68 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff f90e 	bl	8000ee4 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff f90a 	bl	8000ee4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e045      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4b0>
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x54c>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HAL_RCC_OscConfig+0x558>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d030      	beq.n	8001d64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d129      	bne.n	8001d64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d122      	bne.n	8001d64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d24:	4013      	ands	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d119      	bne.n	8001d64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	085b      	lsrs	r3, r3, #1
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d10f      	bne.n	8001d64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0d0      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 020f 	bic.w	r2, r3, #15
 8001da6:	4965      	ldr	r1, [pc, #404]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d040      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e073      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4936      	ldr	r1, [pc, #216]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6c:	f7ff f83a 	bl	8000ee4 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7ff f836 	bl	8000ee4 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e053      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d210      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 020f 	bic.w	r2, r3, #15
 8001eb2:	4922      	ldr	r1, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1d0>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1d4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe ff96 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08004e9c 	.word	0x08004e9c
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	2300      	movs	r3, #0
 8001f62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f68:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d00d      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x40>
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	f200 80bd 	bhi.w	80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f82:	e0b7      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f86:	60bb      	str	r3, [r7, #8]
      break;
 8001f88:	e0b7      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8a:	4b61      	ldr	r3, [pc, #388]	; (8002110 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f8c:	60bb      	str	r3, [r7, #8]
      break;
 8001f8e:	e0b4      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f90:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f98:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f9a:	4b5b      	ldr	r3, [pc, #364]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d04d      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa6:	4b58      	ldr	r3, [pc, #352]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	461a      	mov	r2, r3
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	ea02 0800 	and.w	r8, r2, r0
 8001fbe:	ea03 0901 	and.w	r9, r3, r1
 8001fc2:	4640      	mov	r0, r8
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	014b      	lsls	r3, r1, #5
 8001fd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fd4:	0142      	lsls	r2, r0, #5
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	ebb0 0008 	subs.w	r0, r0, r8
 8001fde:	eb61 0109 	sbc.w	r1, r1, r9
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	018b      	lsls	r3, r1, #6
 8001fec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff0:	0182      	lsls	r2, r0, #6
 8001ff2:	1a12      	subs	r2, r2, r0
 8001ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff8:	f04f 0000 	mov.w	r0, #0
 8001ffc:	f04f 0100 	mov.w	r1, #0
 8002000:	00d9      	lsls	r1, r3, #3
 8002002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002006:	00d0      	lsls	r0, r2, #3
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	eb12 0208 	adds.w	r2, r2, r8
 8002010:	eb43 0309 	adc.w	r3, r3, r9
 8002014:	f04f 0000 	mov.w	r0, #0
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	0259      	lsls	r1, r3, #9
 800201e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002022:	0250      	lsls	r0, r2, #9
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	461a      	mov	r2, r3
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	f7fe f954 	bl	80002e0 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e04a      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	461a      	mov	r2, r3
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	ea02 0400 	and.w	r4, r2, r0
 800205a:	ea03 0501 	and.w	r5, r3, r1
 800205e:	4620      	mov	r0, r4
 8002060:	4629      	mov	r1, r5
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	014b      	lsls	r3, r1, #5
 800206c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002070:	0142      	lsls	r2, r0, #5
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	1b00      	subs	r0, r0, r4
 8002078:	eb61 0105 	sbc.w	r1, r1, r5
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	018b      	lsls	r3, r1, #6
 8002086:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800208a:	0182      	lsls	r2, r0, #6
 800208c:	1a12      	subs	r2, r2, r0
 800208e:	eb63 0301 	sbc.w	r3, r3, r1
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	00d9      	lsls	r1, r3, #3
 800209c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020a0:	00d0      	lsls	r0, r2, #3
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	1912      	adds	r2, r2, r4
 80020a8:	eb45 0303 	adc.w	r3, r5, r3
 80020ac:	f04f 0000 	mov.w	r0, #0
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	0299      	lsls	r1, r3, #10
 80020b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020ba:	0290      	lsls	r0, r2, #10
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f7fe f908 	bl	80002e0 <__aeabi_uldivmod>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4613      	mov	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	3301      	adds	r3, #1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	60bb      	str	r3, [r7, #8]
      break;
 80020f2:	e002      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020f6:	60bb      	str	r3, [r7, #8]
      break;
 80020f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fa:	68bb      	ldr	r3, [r7, #8]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	00f42400 	.word	0x00f42400
 8002110:	007a1200 	.word	0x007a1200

08002114 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCC_GetHCLKFreq+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002130:	f7ff fff0 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a9b      	lsrs	r3, r3, #10
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4903      	ldr	r1, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	08004eac 	.word	0x08004eac

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002158:	f7ff ffdc 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0b5b      	lsrs	r3, r3, #13
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	08004eac 	.word	0x08004eac

0800217c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d012      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021a4:	4b69      	ldr	r3, [pc, #420]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a68      	ldr	r2, [pc, #416]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021ae:	6093      	str	r3, [r2, #8]
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	4964      	ldr	r1, [pc, #400]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d017      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	4959      	ldr	r1, [pc, #356]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d017      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002218:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	494a      	ldr	r1, [pc, #296]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002230:	d101      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800224e:	2301      	movs	r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 808b 	beq.w	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b3a      	ldr	r3, [pc, #232]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	6413      	str	r3, [r2, #64]	; 0x40
 800226c:	4b37      	ldr	r3, [pc, #220]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a34      	ldr	r2, [pc, #208]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002284:	f7fe fe2e 	bl	8000ee4 <HAL_GetTick>
 8002288:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228c:	f7fe fe2a 	bl	8000ee4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e38f      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d035      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d02e      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d114      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fdf2 	bl	8000ee4 <HAL_GetTick>
 8002300:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe fdee 	bl	8000ee4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e351      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0ee      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002332:	d111      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002342:	400b      	ands	r3, r1
 8002344:	4901      	ldr	r1, [pc, #4]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
 800234a:	e00b      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000
 8002354:	0ffffcff 	.word	0x0ffffcff
 8002358:	4bb3      	ldr	r3, [pc, #716]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4ab2      	ldr	r2, [pc, #712]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800235e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002362:	6093      	str	r3, [r2, #8]
 8002364:	4bb0      	ldr	r3, [pc, #704]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	49ad      	ldr	r1, [pc, #692]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002372:	4313      	orrs	r3, r2
 8002374:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002382:	4ba9      	ldr	r3, [pc, #676]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002388:	4aa7      	ldr	r2, [pc, #668]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002392:	4ba5      	ldr	r3, [pc, #660]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002394:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	49a2      	ldr	r1, [pc, #648]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b0:	4b9d      	ldr	r3, [pc, #628]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023be:	499a      	ldr	r1, [pc, #616]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023d2:	4b95      	ldr	r3, [pc, #596]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023e0:	4991      	ldr	r1, [pc, #580]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023f4:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	4989      	ldr	r1, [pc, #548]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002416:	4b84      	ldr	r3, [pc, #528]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4980      	ldr	r1, [pc, #512]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4978      	ldr	r1, [pc, #480]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f023 020c 	bic.w	r2, r3, #12
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	496f      	ldr	r1, [pc, #444]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	4967      	ldr	r1, [pc, #412]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800249e:	4b62      	ldr	r3, [pc, #392]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ac:	495e      	ldr	r1, [pc, #376]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	4956      	ldr	r1, [pc, #344]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024e2:	4b51      	ldr	r3, [pc, #324]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	494d      	ldr	r1, [pc, #308]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002504:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	4945      	ldr	r1, [pc, #276]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002526:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002534:	493c      	ldr	r1, [pc, #240]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002548:	4b37      	ldr	r3, [pc, #220]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002556:	4934      	ldr	r1, [pc, #208]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d011      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002578:	492b      	ldr	r1, [pc, #172]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002588:	d101      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800258a:	2301      	movs	r3, #1
 800258c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800259a:	2301      	movs	r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025aa:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	491b      	ldr	r1, [pc, #108]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025dc:	4912      	ldr	r1, [pc, #72]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002600:	4909      	ldr	r1, [pc, #36]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00f      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	e002      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	4986      	ldr	r1, [pc, #536]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002640:	4b81      	ldr	r3, [pc, #516]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002646:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002650:	497d      	ldr	r1, [pc, #500]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d006      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80d6 	beq.w	8002818 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800266c:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a75      	ldr	r2, [pc, #468]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002678:	f7fe fc34 	bl	8000ee4 <HAL_GetTick>
 800267c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002680:	f7fe fc30 	bl	8000ee4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e195      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002692:	4b6d      	ldr	r3, [pc, #436]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d021      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11d      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026c0:	4b61      	ldr	r3, [pc, #388]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c6:	0e1b      	lsrs	r3, r3, #24
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	019a      	lsls	r2, r3, #6
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	071b      	lsls	r3, r3, #28
 80026e6:	4958      	ldr	r1, [pc, #352]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800270c:	2b00      	cmp	r3, #0
 800270e:	d02e      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002718:	d129      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800271a:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002728:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272e:	0f1b      	lsrs	r3, r3, #28
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	019a      	lsls	r2, r3, #6
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	431a      	orrs	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	071b      	lsls	r3, r3, #28
 800274e:	493e      	ldr	r1, [pc, #248]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002756:	4b3c      	ldr	r3, [pc, #240]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800275c:	f023 021f 	bic.w	r2, r3, #31
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	3b01      	subs	r3, #1
 8002766:	4938      	ldr	r1, [pc, #224]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01d      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800277a:	4b33      	ldr	r3, [pc, #204]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002780:	0e1b      	lsrs	r3, r3, #24
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002788:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278e:	0f1b      	lsrs	r3, r3, #28
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	019a      	lsls	r2, r3, #6
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	071b      	lsls	r3, r3, #28
 80027ae:	4926      	ldr	r1, [pc, #152]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d011      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	019a      	lsls	r2, r3, #6
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	491a      	ldr	r1, [pc, #104]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027e6:	4b18      	ldr	r3, [pc, #96]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a17      	ldr	r2, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f2:	f7fe fb77 	bl	8000ee4 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027fa:	f7fe fb73 	bl	8000ee4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0d8      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b01      	cmp	r3, #1
 800281c:	f040 80ce 	bne.w	80029bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a08      	ldr	r2, [pc, #32]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7fe fb5a 	bl	8000ee4 <HAL_GetTick>
 8002830:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002832:	e00b      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002834:	f7fe fb56 	bl	8000ee4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d904      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0bb      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800284c:	4b5e      	ldr	r3, [pc, #376]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002858:	d0ec      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002876:	2b00      	cmp	r3, #0
 8002878:	d02e      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12a      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002890:	4b4d      	ldr	r3, [pc, #308]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	0f1b      	lsrs	r3, r3, #28
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	019a      	lsls	r2, r3, #6
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	4944      	ldr	r1, [pc, #272]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028be:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	493d      	ldr	r1, [pc, #244]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d022      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ec:	d11d      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	0e1b      	lsrs	r3, r3, #24
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	0f1b      	lsrs	r3, r3, #28
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	019a      	lsls	r2, r3, #6
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	061b      	lsls	r3, r3, #24
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	071b      	lsls	r3, r3, #28
 8002922:	4929      	ldr	r1, [pc, #164]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d028      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	0e1b      	lsrs	r3, r3, #24
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	019a      	lsls	r2, r3, #6
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	431a      	orrs	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	071b      	lsls	r3, r3, #28
 800296a:	4917      	ldr	r1, [pc, #92]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	4911      	ldr	r1, [pc, #68]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002994:	f7fe faa6 	bl	8000ee4 <HAL_GetTick>
 8002998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800299c:	f7fe faa2 	bl	8000ee4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e007      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ba:	d1ef      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e049      	b.n	8002a72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe f892 	bl	8000b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f000 fa44 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_TIM_PWM_Start+0x24>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e03c      	b.n	8002b1a <HAL_TIM_PWM_Start+0x9e>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d109      	bne.n	8002aba <HAL_TIM_PWM_Start+0x3e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e02f      	b.n	8002b1a <HAL_TIM_PWM_Start+0x9e>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d109      	bne.n	8002ad4 <HAL_TIM_PWM_Start+0x58>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e022      	b.n	8002b1a <HAL_TIM_PWM_Start+0x9e>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b0c      	cmp	r3, #12
 8002ad8:	d109      	bne.n	8002aee <HAL_TIM_PWM_Start+0x72>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	bf14      	ite	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	2300      	moveq	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	e015      	b.n	8002b1a <HAL_TIM_PWM_Start+0x9e>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d109      	bne.n	8002b08 <HAL_TIM_PWM_Start+0x8c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e008      	b.n	8002b1a <HAL_TIM_PWM_Start+0x9e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e092      	b.n	8002c48 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_PWM_Start+0xb6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b30:	e023      	b.n	8002b7a <HAL_TIM_PWM_Start+0xfe>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d104      	bne.n	8002b42 <HAL_TIM_PWM_Start+0xc6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b40:	e01b      	b.n	8002b7a <HAL_TIM_PWM_Start+0xfe>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d104      	bne.n	8002b52 <HAL_TIM_PWM_Start+0xd6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b50:	e013      	b.n	8002b7a <HAL_TIM_PWM_Start+0xfe>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b0c      	cmp	r3, #12
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_PWM_Start+0xe6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b60:	e00b      	b.n	8002b7a <HAL_TIM_PWM_Start+0xfe>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_PWM_Start+0xf6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b70:	e003      	b.n	8002b7a <HAL_TIM_PWM_Start+0xfe>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	6839      	ldr	r1, [r7, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fc86 	bl	8003494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_TIM_PWM_Start+0x1d4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_TIM_PWM_Start+0x120>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2f      	ldr	r2, [pc, #188]	; (8002c54 <HAL_TIM_PWM_Start+0x1d8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIM_PWM_Start+0x124>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_TIM_PWM_Start+0x126>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <HAL_TIM_PWM_Start+0x1d4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x18a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d01d      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x18a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_TIM_PWM_Start+0x1dc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d018      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x18a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <HAL_TIM_PWM_Start+0x1e0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x18a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_TIM_PWM_Start+0x1e4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x18a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_TIM_PWM_Start+0x1d8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d009      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x18a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_TIM_PWM_Start+0x1e8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x18a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_TIM_PWM_Start+0x1ec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d115      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_TIM_PWM_Start+0x1f0>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b06      	cmp	r3, #6
 8002c16:	d015      	beq.n	8002c44 <HAL_TIM_PWM_Start+0x1c8>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1e:	d011      	beq.n	8002c44 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	e008      	b.n	8002c44 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e000      	b.n	8002c46 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010400 	.word	0x40010400
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800
 8002c60:	40000c00 	.word	0x40000c00
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40001800 	.word	0x40001800
 8002c6c:	00010007 	.word	0x00010007

08002c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0ff      	b.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b14      	cmp	r3, #20
 8002c9a:	f200 80f0 	bhi.w	8002e7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cf9 	.word	0x08002cf9
 8002ca8:	08002e7f 	.word	0x08002e7f
 8002cac:	08002e7f 	.word	0x08002e7f
 8002cb0:	08002e7f 	.word	0x08002e7f
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002e7f 	.word	0x08002e7f
 8002cbc:	08002e7f 	.word	0x08002e7f
 8002cc0:	08002e7f 	.word	0x08002e7f
 8002cc4:	08002d7b 	.word	0x08002d7b
 8002cc8:	08002e7f 	.word	0x08002e7f
 8002ccc:	08002e7f 	.word	0x08002e7f
 8002cd0:	08002e7f 	.word	0x08002e7f
 8002cd4:	08002dbb 	.word	0x08002dbb
 8002cd8:	08002e7f 	.word	0x08002e7f
 8002cdc:	08002e7f 	.word	0x08002e7f
 8002ce0:	08002e7f 	.word	0x08002e7f
 8002ce4:	08002dfd 	.word	0x08002dfd
 8002ce8:	08002e7f 	.word	0x08002e7f
 8002cec:	08002e7f 	.word	0x08002e7f
 8002cf0:	08002e7f 	.word	0x08002e7f
 8002cf4:	08002e3d 	.word	0x08002e3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f96a 	bl	8002fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6999      	ldr	r1, [r3, #24]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	619a      	str	r2, [r3, #24]
      break;
 8002d36:	e0a5      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f9bc 	bl	80030bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6999      	ldr	r1, [r3, #24]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	619a      	str	r2, [r3, #24]
      break;
 8002d78:	e084      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fa13 	bl	80031ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0208 	orr.w	r2, r2, #8
 8002d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0204 	bic.w	r2, r2, #4
 8002da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69d9      	ldr	r1, [r3, #28]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	61da      	str	r2, [r3, #28]
      break;
 8002db8:	e064      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fa69 	bl	8003298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69d9      	ldr	r1, [r3, #28]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	021a      	lsls	r2, r3, #8
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	61da      	str	r2, [r3, #28]
      break;
 8002dfa:	e043      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 faa0 	bl	8003348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0208 	orr.w	r2, r2, #8
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e3a:	e023      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fad2 	bl	80033ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e7c:	e002      	b.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
      break;
 8002e82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop

08002e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a40      	ldr	r2, [pc, #256]	; (8002fac <TIM_Base_SetConfig+0x114>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <TIM_Base_SetConfig+0x118>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3c      	ldr	r2, [pc, #240]	; (8002fb4 <TIM_Base_SetConfig+0x11c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3b      	ldr	r2, [pc, #236]	; (8002fb8 <TIM_Base_SetConfig+0x120>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a3a      	ldr	r2, [pc, #232]	; (8002fbc <TIM_Base_SetConfig+0x124>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <TIM_Base_SetConfig+0x114>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d027      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2c      	ldr	r2, [pc, #176]	; (8002fb0 <TIM_Base_SetConfig+0x118>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d023      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2b      	ldr	r2, [pc, #172]	; (8002fb4 <TIM_Base_SetConfig+0x11c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2a      	ldr	r2, [pc, #168]	; (8002fb8 <TIM_Base_SetConfig+0x120>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01b      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a29      	ldr	r2, [pc, #164]	; (8002fbc <TIM_Base_SetConfig+0x124>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d017      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <TIM_Base_SetConfig+0x128>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <TIM_Base_SetConfig+0x12c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00f      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <TIM_Base_SetConfig+0x130>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <TIM_Base_SetConfig+0x134>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <TIM_Base_SetConfig+0x138>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <TIM_Base_SetConfig+0x13c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <TIM_Base_SetConfig+0x114>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0xf8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <TIM_Base_SetConfig+0x124>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d103      	bne.n	8002f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	615a      	str	r2, [r3, #20]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40010400 	.word	0x40010400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800
 8002fcc:	40001800 	.word	0x40001800
 8002fd0:	40001c00 	.word	0x40001c00
 8002fd4:	40002000 	.word	0x40002000

08002fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0201 	bic.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <TIM_OC1_SetConfig+0xd8>)
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 0302 	bic.w	r3, r3, #2
 8003020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a21      	ldr	r2, [pc, #132]	; (80030b4 <TIM_OC1_SetConfig+0xdc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_OC1_SetConfig+0x64>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a20      	ldr	r2, [pc, #128]	; (80030b8 <TIM_OC1_SetConfig+0xe0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10c      	bne.n	8003056 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0308 	bic.w	r3, r3, #8
 8003042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a16      	ldr	r2, [pc, #88]	; (80030b4 <TIM_OC1_SetConfig+0xdc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_OC1_SetConfig+0x8e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <TIM_OC1_SetConfig+0xe0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d111      	bne.n	800308a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800306c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	fffeff8f 	.word	0xfffeff8f
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40010400 	.word	0x40010400

080030bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0210 	bic.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <TIM_OC2_SetConfig+0xe4>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0320 	bic.w	r3, r3, #32
 8003106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <TIM_OC2_SetConfig+0xe8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_OC2_SetConfig+0x68>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <TIM_OC2_SetConfig+0xec>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10d      	bne.n	8003140 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <TIM_OC2_SetConfig+0xe8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_OC2_SetConfig+0x94>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <TIM_OC2_SetConfig+0xec>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d113      	bne.n	8003178 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800315e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	feff8fff 	.word	0xfeff8fff
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40010400 	.word	0x40010400

080031ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4b2d      	ldr	r3, [pc, #180]	; (800328c <TIM_OC3_SetConfig+0xe0>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <TIM_OC3_SetConfig+0xe4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_OC3_SetConfig+0x66>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a21      	ldr	r2, [pc, #132]	; (8003294 <TIM_OC3_SetConfig+0xe8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10d      	bne.n	800322e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800322c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a17      	ldr	r2, [pc, #92]	; (8003290 <TIM_OC3_SetConfig+0xe4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_OC3_SetConfig+0x92>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <TIM_OC3_SetConfig+0xe8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d113      	bne.n	8003266 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800324c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	621a      	str	r2, [r3, #32]
}
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	fffeff8f 	.word	0xfffeff8f
 8003290:	40010000 	.word	0x40010000
 8003294:	40010400 	.word	0x40010400

08003298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <TIM_OC4_SetConfig+0xa4>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	031b      	lsls	r3, r3, #12
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a13      	ldr	r2, [pc, #76]	; (8003340 <TIM_OC4_SetConfig+0xa8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_OC4_SetConfig+0x68>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a12      	ldr	r2, [pc, #72]	; (8003344 <TIM_OC4_SetConfig+0xac>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d109      	bne.n	8003314 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	019b      	lsls	r3, r3, #6
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	feff8fff 	.word	0xfeff8fff
 8003340:	40010000 	.word	0x40010000
 8003344:	40010400 	.word	0x40010400

08003348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <TIM_OC5_SetConfig+0x98>)
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003388:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <TIM_OC5_SetConfig+0x9c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_OC5_SetConfig+0x5e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <TIM_OC5_SetConfig+0xa0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d109      	bne.n	80033ba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	621a      	str	r2, [r3, #32]
}
 80033d4:	bf00      	nop
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	fffeff8f 	.word	0xfffeff8f
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40010400 	.word	0x40010400

080033ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <TIM_OC6_SetConfig+0x9c>)
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800342e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	051b      	lsls	r3, r3, #20
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <TIM_OC6_SetConfig+0xa0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC6_SetConfig+0x60>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <TIM_OC6_SetConfig+0xa4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d109      	bne.n	8003460 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003452:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	029b      	lsls	r3, r3, #10
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	feff8fff 	.word	0xfeff8fff
 800348c:	40010000 	.word	0x40010000
 8003490:	40010400 	.word	0x40010400

08003494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1a      	ldr	r2, [r3, #32]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e06d      	b.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a30      	ldr	r2, [pc, #192]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2f      	ldr	r2, [pc, #188]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d108      	bne.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003532:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003544:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d022      	beq.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d01d      	beq.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d018      	beq.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d013      	beq.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00e      	beq.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d009      	beq.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d10c      	bne.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40010400 	.word	0x40010400
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40014000 	.word	0x40014000
 80035f8:	40001800 	.word	0x40001800

080035fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e040      	b.n	8003690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd fad4 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8c0 	bl	80037c0 <UART_SetConfig>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e022      	b.n	8003690 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fb16 	bl	8003c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fb9d 	bl	8003dc8 <UART_CheckIdleState>
 800368e:	4603      	mov	r3, r0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	f040 8081 	bne.w	80037b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_UART_Transmit+0x26>
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e079      	b.n	80037b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Transmit+0x38>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e072      	b.n	80037b6 <HAL_UART_Transmit+0x11e>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2221      	movs	r2, #33	; 0x21
 80036e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e6:	f7fd fbfd 	bl	8000ee4 <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d108      	bne.n	8003718 <HAL_UART_Transmit+0x80>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e003      	b.n	8003720 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003728:	e02c      	b.n	8003784 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fb90 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e038      	b.n	80037b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3302      	adds	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e007      	b.n	8003772 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	3301      	adds	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1cc      	bne.n	800372a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2200      	movs	r2, #0
 8003798:	2140      	movs	r1, #64	; 0x40
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb5d 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e005      	b.n	80037b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e000      	b.n	80037b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4ba7      	ldr	r3, [pc, #668]	; (8003a88 <UART_SetConfig+0x2c8>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a95      	ldr	r2, [pc, #596]	; (8003a8c <UART_SetConfig+0x2cc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d120      	bne.n	800387e <UART_SetConfig+0xbe>
 800383c:	4b94      	ldr	r3, [pc, #592]	; (8003a90 <UART_SetConfig+0x2d0>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d816      	bhi.n	8003878 <UART_SetConfig+0xb8>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <UART_SetConfig+0x90>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003861 	.word	0x08003861
 8003854:	0800386d 	.word	0x0800386d
 8003858:	08003867 	.word	0x08003867
 800385c:	08003873 	.word	0x08003873
 8003860:	2301      	movs	r3, #1
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e14f      	b.n	8003b06 <UART_SetConfig+0x346>
 8003866:	2302      	movs	r3, #2
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e14c      	b.n	8003b06 <UART_SetConfig+0x346>
 800386c:	2304      	movs	r3, #4
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e149      	b.n	8003b06 <UART_SetConfig+0x346>
 8003872:	2308      	movs	r3, #8
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e146      	b.n	8003b06 <UART_SetConfig+0x346>
 8003878:	2310      	movs	r3, #16
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e143      	b.n	8003b06 <UART_SetConfig+0x346>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a84      	ldr	r2, [pc, #528]	; (8003a94 <UART_SetConfig+0x2d4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d132      	bne.n	80038ee <UART_SetConfig+0x12e>
 8003888:	4b81      	ldr	r3, [pc, #516]	; (8003a90 <UART_SetConfig+0x2d0>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b0c      	cmp	r3, #12
 8003894:	d828      	bhi.n	80038e8 <UART_SetConfig+0x128>
 8003896:	a201      	add	r2, pc, #4	; (adr r2, 800389c <UART_SetConfig+0xdc>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038d1 	.word	0x080038d1
 80038a0:	080038e9 	.word	0x080038e9
 80038a4:	080038e9 	.word	0x080038e9
 80038a8:	080038e9 	.word	0x080038e9
 80038ac:	080038dd 	.word	0x080038dd
 80038b0:	080038e9 	.word	0x080038e9
 80038b4:	080038e9 	.word	0x080038e9
 80038b8:	080038e9 	.word	0x080038e9
 80038bc:	080038d7 	.word	0x080038d7
 80038c0:	080038e9 	.word	0x080038e9
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	080038e9 	.word	0x080038e9
 80038cc:	080038e3 	.word	0x080038e3
 80038d0:	2300      	movs	r3, #0
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e117      	b.n	8003b06 <UART_SetConfig+0x346>
 80038d6:	2302      	movs	r3, #2
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e114      	b.n	8003b06 <UART_SetConfig+0x346>
 80038dc:	2304      	movs	r3, #4
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e111      	b.n	8003b06 <UART_SetConfig+0x346>
 80038e2:	2308      	movs	r3, #8
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e10e      	b.n	8003b06 <UART_SetConfig+0x346>
 80038e8:	2310      	movs	r3, #16
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e10b      	b.n	8003b06 <UART_SetConfig+0x346>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <UART_SetConfig+0x2d8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d120      	bne.n	800393a <UART_SetConfig+0x17a>
 80038f8:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <UART_SetConfig+0x2d0>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003902:	2b30      	cmp	r3, #48	; 0x30
 8003904:	d013      	beq.n	800392e <UART_SetConfig+0x16e>
 8003906:	2b30      	cmp	r3, #48	; 0x30
 8003908:	d814      	bhi.n	8003934 <UART_SetConfig+0x174>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d009      	beq.n	8003922 <UART_SetConfig+0x162>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d810      	bhi.n	8003934 <UART_SetConfig+0x174>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <UART_SetConfig+0x15c>
 8003916:	2b10      	cmp	r3, #16
 8003918:	d006      	beq.n	8003928 <UART_SetConfig+0x168>
 800391a:	e00b      	b.n	8003934 <UART_SetConfig+0x174>
 800391c:	2300      	movs	r3, #0
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e0f1      	b.n	8003b06 <UART_SetConfig+0x346>
 8003922:	2302      	movs	r3, #2
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e0ee      	b.n	8003b06 <UART_SetConfig+0x346>
 8003928:	2304      	movs	r3, #4
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e0eb      	b.n	8003b06 <UART_SetConfig+0x346>
 800392e:	2308      	movs	r3, #8
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e0e8      	b.n	8003b06 <UART_SetConfig+0x346>
 8003934:	2310      	movs	r3, #16
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e0e5      	b.n	8003b06 <UART_SetConfig+0x346>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a57      	ldr	r2, [pc, #348]	; (8003a9c <UART_SetConfig+0x2dc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d120      	bne.n	8003986 <UART_SetConfig+0x1c6>
 8003944:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <UART_SetConfig+0x2d0>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800394e:	2bc0      	cmp	r3, #192	; 0xc0
 8003950:	d013      	beq.n	800397a <UART_SetConfig+0x1ba>
 8003952:	2bc0      	cmp	r3, #192	; 0xc0
 8003954:	d814      	bhi.n	8003980 <UART_SetConfig+0x1c0>
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d009      	beq.n	800396e <UART_SetConfig+0x1ae>
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d810      	bhi.n	8003980 <UART_SetConfig+0x1c0>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <UART_SetConfig+0x1a8>
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d006      	beq.n	8003974 <UART_SetConfig+0x1b4>
 8003966:	e00b      	b.n	8003980 <UART_SetConfig+0x1c0>
 8003968:	2300      	movs	r3, #0
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e0cb      	b.n	8003b06 <UART_SetConfig+0x346>
 800396e:	2302      	movs	r3, #2
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e0c8      	b.n	8003b06 <UART_SetConfig+0x346>
 8003974:	2304      	movs	r3, #4
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e0c5      	b.n	8003b06 <UART_SetConfig+0x346>
 800397a:	2308      	movs	r3, #8
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e0c2      	b.n	8003b06 <UART_SetConfig+0x346>
 8003980:	2310      	movs	r3, #16
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e0bf      	b.n	8003b06 <UART_SetConfig+0x346>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a45      	ldr	r2, [pc, #276]	; (8003aa0 <UART_SetConfig+0x2e0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d125      	bne.n	80039dc <UART_SetConfig+0x21c>
 8003990:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <UART_SetConfig+0x2d0>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800399e:	d017      	beq.n	80039d0 <UART_SetConfig+0x210>
 80039a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a4:	d817      	bhi.n	80039d6 <UART_SetConfig+0x216>
 80039a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039aa:	d00b      	beq.n	80039c4 <UART_SetConfig+0x204>
 80039ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b0:	d811      	bhi.n	80039d6 <UART_SetConfig+0x216>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <UART_SetConfig+0x1fe>
 80039b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ba:	d006      	beq.n	80039ca <UART_SetConfig+0x20a>
 80039bc:	e00b      	b.n	80039d6 <UART_SetConfig+0x216>
 80039be:	2300      	movs	r3, #0
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e0a0      	b.n	8003b06 <UART_SetConfig+0x346>
 80039c4:	2302      	movs	r3, #2
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e09d      	b.n	8003b06 <UART_SetConfig+0x346>
 80039ca:	2304      	movs	r3, #4
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e09a      	b.n	8003b06 <UART_SetConfig+0x346>
 80039d0:	2308      	movs	r3, #8
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e097      	b.n	8003b06 <UART_SetConfig+0x346>
 80039d6:	2310      	movs	r3, #16
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e094      	b.n	8003b06 <UART_SetConfig+0x346>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a30      	ldr	r2, [pc, #192]	; (8003aa4 <UART_SetConfig+0x2e4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d125      	bne.n	8003a32 <UART_SetConfig+0x272>
 80039e6:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <UART_SetConfig+0x2d0>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039f4:	d017      	beq.n	8003a26 <UART_SetConfig+0x266>
 80039f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039fa:	d817      	bhi.n	8003a2c <UART_SetConfig+0x26c>
 80039fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a00:	d00b      	beq.n	8003a1a <UART_SetConfig+0x25a>
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a06:	d811      	bhi.n	8003a2c <UART_SetConfig+0x26c>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <UART_SetConfig+0x254>
 8003a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a10:	d006      	beq.n	8003a20 <UART_SetConfig+0x260>
 8003a12:	e00b      	b.n	8003a2c <UART_SetConfig+0x26c>
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e075      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e072      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a20:	2304      	movs	r3, #4
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e06f      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a26:	2308      	movs	r3, #8
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e06c      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e069      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <UART_SetConfig+0x2e8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d137      	bne.n	8003aac <UART_SetConfig+0x2ec>
 8003a3c:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <UART_SetConfig+0x2d0>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a4a:	d017      	beq.n	8003a7c <UART_SetConfig+0x2bc>
 8003a4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a50:	d817      	bhi.n	8003a82 <UART_SetConfig+0x2c2>
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	d00b      	beq.n	8003a70 <UART_SetConfig+0x2b0>
 8003a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5c:	d811      	bhi.n	8003a82 <UART_SetConfig+0x2c2>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <UART_SetConfig+0x2aa>
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a66:	d006      	beq.n	8003a76 <UART_SetConfig+0x2b6>
 8003a68:	e00b      	b.n	8003a82 <UART_SetConfig+0x2c2>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e04a      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a70:	2302      	movs	r3, #2
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e047      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a76:	2304      	movs	r3, #4
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e044      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e041      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a82:	2310      	movs	r3, #16
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e03e      	b.n	8003b06 <UART_SetConfig+0x346>
 8003a88:	efff69f3 	.word	0xefff69f3
 8003a8c:	40011000 	.word	0x40011000
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40004400 	.word	0x40004400
 8003a98:	40004800 	.word	0x40004800
 8003a9c:	40004c00 	.word	0x40004c00
 8003aa0:	40005000 	.word	0x40005000
 8003aa4:	40011400 	.word	0x40011400
 8003aa8:	40007800 	.word	0x40007800
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a71      	ldr	r2, [pc, #452]	; (8003c78 <UART_SetConfig+0x4b8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d125      	bne.n	8003b02 <UART_SetConfig+0x342>
 8003ab6:	4b71      	ldr	r3, [pc, #452]	; (8003c7c <UART_SetConfig+0x4bc>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ac0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ac4:	d017      	beq.n	8003af6 <UART_SetConfig+0x336>
 8003ac6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003aca:	d817      	bhi.n	8003afc <UART_SetConfig+0x33c>
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad0:	d00b      	beq.n	8003aea <UART_SetConfig+0x32a>
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad6:	d811      	bhi.n	8003afc <UART_SetConfig+0x33c>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <UART_SetConfig+0x324>
 8003adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae0:	d006      	beq.n	8003af0 <UART_SetConfig+0x330>
 8003ae2:	e00b      	b.n	8003afc <UART_SetConfig+0x33c>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e00d      	b.n	8003b06 <UART_SetConfig+0x346>
 8003aea:	2302      	movs	r3, #2
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e00a      	b.n	8003b06 <UART_SetConfig+0x346>
 8003af0:	2304      	movs	r3, #4
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e007      	b.n	8003b06 <UART_SetConfig+0x346>
 8003af6:	2308      	movs	r3, #8
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e004      	b.n	8003b06 <UART_SetConfig+0x346>
 8003afc:	2310      	movs	r3, #16
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e001      	b.n	8003b06 <UART_SetConfig+0x346>
 8003b02:	2310      	movs	r3, #16
 8003b04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0e:	d15a      	bne.n	8003bc6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003b10:	7ffb      	ldrb	r3, [r7, #31]
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d827      	bhi.n	8003b66 <UART_SetConfig+0x3a6>
 8003b16:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0x35c>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b49 	.word	0x08003b49
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b67 	.word	0x08003b67
 8003b2c:	08003b57 	.word	0x08003b57
 8003b30:	08003b67 	.word	0x08003b67
 8003b34:	08003b67 	.word	0x08003b67
 8003b38:	08003b67 	.word	0x08003b67
 8003b3c:	08003b5f 	.word	0x08003b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b40:	f7fe faf4 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003b44:	61b8      	str	r0, [r7, #24]
        break;
 8003b46:	e013      	b.n	8003b70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7fe fb04 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003b4c:	61b8      	str	r0, [r7, #24]
        break;
 8003b4e:	e00f      	b.n	8003b70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b50:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <UART_SetConfig+0x4c0>)
 8003b52:	61bb      	str	r3, [r7, #24]
        break;
 8003b54:	e00c      	b.n	8003b70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b56:	f7fe f9fb 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8003b5a:	61b8      	str	r0, [r7, #24]
        break;
 8003b5c:	e008      	b.n	8003b70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b62:	61bb      	str	r3, [r7, #24]
        break;
 8003b64:	e004      	b.n	8003b70 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d074      	beq.n	8003c60 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	005a      	lsls	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	d916      	bls.n	8003bc0 <UART_SetConfig+0x400>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d212      	bcs.n	8003bc0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f023 030f 	bic.w	r3, r3, #15
 8003ba2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	89fb      	ldrh	r3, [r7, #14]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	89fa      	ldrh	r2, [r7, #14]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	e04f      	b.n	8003c60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	77bb      	strb	r3, [r7, #30]
 8003bc4:	e04c      	b.n	8003c60 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc6:	7ffb      	ldrb	r3, [r7, #31]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d828      	bhi.n	8003c1e <UART_SetConfig+0x45e>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0x414>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c1f 	.word	0x08003c1f
 8003be4:	08003c0f 	.word	0x08003c0f
 8003be8:	08003c1f 	.word	0x08003c1f
 8003bec:	08003c1f 	.word	0x08003c1f
 8003bf0:	08003c1f 	.word	0x08003c1f
 8003bf4:	08003c17 	.word	0x08003c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7fe fa98 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003bfc:	61b8      	str	r0, [r7, #24]
        break;
 8003bfe:	e013      	b.n	8003c28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c00:	f7fe faa8 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003c04:	61b8      	str	r0, [r7, #24]
        break;
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <UART_SetConfig+0x4c0>)
 8003c0a:	61bb      	str	r3, [r7, #24]
        break;
 8003c0c:	e00c      	b.n	8003c28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7fe f99f 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8003c12:	61b8      	str	r0, [r7, #24]
        break;
 8003c14:	e008      	b.n	8003c28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e004      	b.n	8003c28 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	77bb      	strb	r3, [r7, #30]
        break;
 8003c26:	bf00      	nop
    }

    if (pclk != 0U)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d018      	beq.n	8003c60 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	085a      	lsrs	r2, r3, #1
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	441a      	add	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b0f      	cmp	r3, #15
 8003c46:	d909      	bls.n	8003c5c <UART_SetConfig+0x49c>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4e:	d205      	bcs.n	8003c5c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	e001      	b.n	8003c60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40007c00 	.word	0x40007c00
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	00f42400 	.word	0x00f42400

08003c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d82:	d10a      	bne.n	8003d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd8:	f7fd f884 	bl	8000ee4 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d10e      	bne.n	8003e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f82d 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e023      	b.n	8003e52 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d10e      	bne.n	8003e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f817 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e00d      	b.n	8003e52 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b09c      	sub	sp, #112	; 0x70
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6a:	e0a5      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	f000 80a1 	beq.w	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fd f835 	bl	8000ee4 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x32>
 8003e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d13e      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e067      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d04f      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f26:	d147      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
 8003f52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e6      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3308      	adds	r3, #8
 8003f82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f84:	623a      	str	r2, [r7, #32]
 8003f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69f9      	ldr	r1, [r7, #28]
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e010      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f43f af4a 	beq.w	8003e6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3770      	adds	r7, #112	; 0x70
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	f107 001c 	add.w	r0, r7, #28
 8003ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d120      	bne.n	800403e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <USB_CoreInit+0xac>)
 800400e:	4013      	ands	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d105      	bne.n	8004032 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa92 	bl	800455c <USB_CoreReset>
 8004038:	4603      	mov	r3, r0
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e010      	b.n	8004060 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa86 	bl	800455c <USB_CoreReset>
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10b      	bne.n	800407e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f043 0206 	orr.w	r2, r3, #6
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800408a:	b004      	add	sp, #16
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	ffbdffbf 	.word	0xffbdffbf

08004094 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 0201 	bic.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d115      	bne.n	8004104 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040e4:	2001      	movs	r0, #1
 80040e6:	f7fc ff09 	bl	8000efc <HAL_Delay>
      ms++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa25 	bl	8004540 <USB_GetMode>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d01e      	beq.n	800413a <USB_SetCurrentMode+0x84>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b31      	cmp	r3, #49	; 0x31
 8004100:	d9f0      	bls.n	80040e4 <USB_SetCurrentMode+0x2e>
 8004102:	e01a      	b.n	800413a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d115      	bne.n	8004136 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004116:	2001      	movs	r0, #1
 8004118:	f7fc fef0 	bl	8000efc <HAL_Delay>
      ms++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa0c 	bl	8004540 <USB_GetMode>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <USB_SetCurrentMode+0x84>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b31      	cmp	r3, #49	; 0x31
 8004132:	d9f0      	bls.n	8004116 <USB_SetCurrentMode+0x60>
 8004134:	e001      	b.n	800413a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e005      	b.n	8004146 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b32      	cmp	r3, #50	; 0x32
 800413e:	d101      	bne.n	8004144 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004150:	b084      	sub	sp, #16
 8004152:	b580      	push	{r7, lr}
 8004154:	b086      	sub	sp, #24
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800415e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	e009      	b.n	8004184 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	3340      	adds	r3, #64	; 0x40
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	2200      	movs	r2, #0
 800417c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3301      	adds	r3, #1
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b0e      	cmp	r3, #14
 8004188:	d9f2      	bls.n	8004170 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800418a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11c      	bne.n	80041ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800419e:	f043 0302 	orr.w	r3, r3, #2
 80041a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e005      	b.n	80041d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041dc:	461a      	mov	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	4619      	mov	r1, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f0:	461a      	mov	r2, r3
 80041f2:	680b      	ldr	r3, [r1, #0]
 80041f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10c      	bne.n	8004216 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004202:	2100      	movs	r1, #0
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f961 	bl	80044cc <USB_SetDevSpeed>
 800420a:	e008      	b.n	800421e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800420c:	2101      	movs	r1, #1
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f95c 	bl	80044cc <USB_SetDevSpeed>
 8004214:	e003      	b.n	800421e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004216:	2103      	movs	r1, #3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f957 	bl	80044cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800421e:	2110      	movs	r1, #16
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f8f3 	bl	800440c <USB_FlushTxFifo>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f91d 	bl	8004470 <USB_FlushRxFifo>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	461a      	mov	r2, r3
 8004254:	2300      	movs	r3, #0
 8004256:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	461a      	mov	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	e043      	b.n	80042f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800427c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004280:	d118      	bne.n	80042b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004294:	461a      	mov	r2, r3
 8004296:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	e013      	b.n	80042c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	461a      	mov	r2, r3
 80042ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e008      	b.n	80042c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	461a      	mov	r2, r3
 80042c2:	2300      	movs	r3, #0
 80042c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	461a      	mov	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e4:	461a      	mov	r2, r3
 80042e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	3301      	adds	r3, #1
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d3b7      	bcc.n	800426a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e043      	b.n	8004388 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004316:	d118      	bne.n	800434a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	461a      	mov	r2, r3
 800432c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e013      	b.n	800435c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	e008      	b.n	800435c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	2300      	movs	r3, #0
 800435a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	461a      	mov	r2, r3
 800436a:	2300      	movs	r3, #0
 800436c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	461a      	mov	r2, r3
 800437c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004380:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3301      	adds	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	429a      	cmp	r2, r3
 800438e:	d3b7      	bcc.n	8004300 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f043 0210 	orr.w	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <USB_DevInit+0x2b4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f043 0208 	orr.w	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <USB_DevInit+0x2b8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004400:	b004      	add	sp, #16
 8004402:	4770      	bx	lr
 8004404:	803c3800 	.word	0x803c3800
 8004408:	40000004 	.word	0x40000004

0800440c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	4a12      	ldr	r2, [pc, #72]	; (800446c <USB_FlushTxFifo+0x60>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e01a      	b.n	8004460 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	daf3      	bge.n	800441a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	019b      	lsls	r3, r3, #6
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	4a08      	ldr	r2, [pc, #32]	; (800446c <USB_FlushTxFifo+0x60>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e006      	b.n	8004460 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b20      	cmp	r3, #32
 800445c:	d0f1      	beq.n	8004442 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	00030d40 	.word	0x00030d40

08004470 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <USB_FlushRxFifo+0x58>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e017      	b.n	80044bc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	daf3      	bge.n	800447c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2210      	movs	r2, #16
 800449c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <USB_FlushRxFifo+0x58>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e006      	b.n	80044bc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d0f1      	beq.n	800449e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	00030d40 	.word	0x00030d40

080044cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ec:	4313      	orrs	r3, r2
 80044ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0301 	and.w	r3, r3, #1
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3301      	adds	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	4a13      	ldr	r2, [pc, #76]	; (80045bc <USB_CoreReset+0x60>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e01a      	b.n	80045ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	daf3      	bge.n	8004568 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <USB_CoreReset+0x60>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d0f1      	beq.n	8004590 <USB_CoreReset+0x34>

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	00030d40 	.word	0x00030d40

080045c0 <__errno>:
 80045c0:	4b01      	ldr	r3, [pc, #4]	; (80045c8 <__errno+0x8>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	2000000c 	.word	0x2000000c

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4d0d      	ldr	r5, [pc, #52]	; (8004604 <__libc_init_array+0x38>)
 80045d0:	4c0d      	ldr	r4, [pc, #52]	; (8004608 <__libc_init_array+0x3c>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	2600      	movs	r6, #0
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	4d0b      	ldr	r5, [pc, #44]	; (800460c <__libc_init_array+0x40>)
 80045de:	4c0c      	ldr	r4, [pc, #48]	; (8004610 <__libc_init_array+0x44>)
 80045e0:	f000 fc4e 	bl	8004e80 <_init>
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	2600      	movs	r6, #0
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	08004ef0 	.word	0x08004ef0
 8004608:	08004ef0 	.word	0x08004ef0
 800460c:	08004ef0 	.word	0x08004ef0
 8004610:	08004ef4 	.word	0x08004ef4

08004614 <memset>:
 8004614:	4402      	add	r2, r0
 8004616:	4603      	mov	r3, r0
 8004618:	4293      	cmp	r3, r2
 800461a:	d100      	bne.n	800461e <memset+0xa>
 800461c:	4770      	bx	lr
 800461e:	f803 1b01 	strb.w	r1, [r3], #1
 8004622:	e7f9      	b.n	8004618 <memset+0x4>

08004624 <siprintf>:
 8004624:	b40e      	push	{r1, r2, r3}
 8004626:	b500      	push	{lr}
 8004628:	b09c      	sub	sp, #112	; 0x70
 800462a:	ab1d      	add	r3, sp, #116	; 0x74
 800462c:	9002      	str	r0, [sp, #8]
 800462e:	9006      	str	r0, [sp, #24]
 8004630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004634:	4809      	ldr	r0, [pc, #36]	; (800465c <siprintf+0x38>)
 8004636:	9107      	str	r1, [sp, #28]
 8004638:	9104      	str	r1, [sp, #16]
 800463a:	4909      	ldr	r1, [pc, #36]	; (8004660 <siprintf+0x3c>)
 800463c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004640:	9105      	str	r1, [sp, #20]
 8004642:	6800      	ldr	r0, [r0, #0]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	a902      	add	r1, sp, #8
 8004648:	f000 f868 	bl	800471c <_svfiprintf_r>
 800464c:	9b02      	ldr	r3, [sp, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	b01c      	add	sp, #112	; 0x70
 8004654:	f85d eb04 	ldr.w	lr, [sp], #4
 8004658:	b003      	add	sp, #12
 800465a:	4770      	bx	lr
 800465c:	2000000c 	.word	0x2000000c
 8004660:	ffff0208 	.word	0xffff0208

08004664 <__ssputs_r>:
 8004664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004668:	688e      	ldr	r6, [r1, #8]
 800466a:	429e      	cmp	r6, r3
 800466c:	4682      	mov	sl, r0
 800466e:	460c      	mov	r4, r1
 8004670:	4690      	mov	r8, r2
 8004672:	461f      	mov	r7, r3
 8004674:	d838      	bhi.n	80046e8 <__ssputs_r+0x84>
 8004676:	898a      	ldrh	r2, [r1, #12]
 8004678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800467c:	d032      	beq.n	80046e4 <__ssputs_r+0x80>
 800467e:	6825      	ldr	r5, [r4, #0]
 8004680:	6909      	ldr	r1, [r1, #16]
 8004682:	eba5 0901 	sub.w	r9, r5, r1
 8004686:	6965      	ldr	r5, [r4, #20]
 8004688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800468c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004690:	3301      	adds	r3, #1
 8004692:	444b      	add	r3, r9
 8004694:	106d      	asrs	r5, r5, #1
 8004696:	429d      	cmp	r5, r3
 8004698:	bf38      	it	cc
 800469a:	461d      	movcc	r5, r3
 800469c:	0553      	lsls	r3, r2, #21
 800469e:	d531      	bpl.n	8004704 <__ssputs_r+0xa0>
 80046a0:	4629      	mov	r1, r5
 80046a2:	f000 fb47 	bl	8004d34 <_malloc_r>
 80046a6:	4606      	mov	r6, r0
 80046a8:	b950      	cbnz	r0, 80046c0 <__ssputs_r+0x5c>
 80046aa:	230c      	movs	r3, #12
 80046ac:	f8ca 3000 	str.w	r3, [sl]
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b6:	81a3      	strh	r3, [r4, #12]
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c0:	6921      	ldr	r1, [r4, #16]
 80046c2:	464a      	mov	r2, r9
 80046c4:	f000 fabe 	bl	8004c44 <memcpy>
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d2:	81a3      	strh	r3, [r4, #12]
 80046d4:	6126      	str	r6, [r4, #16]
 80046d6:	6165      	str	r5, [r4, #20]
 80046d8:	444e      	add	r6, r9
 80046da:	eba5 0509 	sub.w	r5, r5, r9
 80046de:	6026      	str	r6, [r4, #0]
 80046e0:	60a5      	str	r5, [r4, #8]
 80046e2:	463e      	mov	r6, r7
 80046e4:	42be      	cmp	r6, r7
 80046e6:	d900      	bls.n	80046ea <__ssputs_r+0x86>
 80046e8:	463e      	mov	r6, r7
 80046ea:	4632      	mov	r2, r6
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	4641      	mov	r1, r8
 80046f0:	f000 fab6 	bl	8004c60 <memmove>
 80046f4:	68a3      	ldr	r3, [r4, #8]
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	1b9b      	subs	r3, r3, r6
 80046fa:	4432      	add	r2, r6
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	6022      	str	r2, [r4, #0]
 8004700:	2000      	movs	r0, #0
 8004702:	e7db      	b.n	80046bc <__ssputs_r+0x58>
 8004704:	462a      	mov	r2, r5
 8004706:	f000 fb6f 	bl	8004de8 <_realloc_r>
 800470a:	4606      	mov	r6, r0
 800470c:	2800      	cmp	r0, #0
 800470e:	d1e1      	bne.n	80046d4 <__ssputs_r+0x70>
 8004710:	6921      	ldr	r1, [r4, #16]
 8004712:	4650      	mov	r0, sl
 8004714:	f000 fabe 	bl	8004c94 <_free_r>
 8004718:	e7c7      	b.n	80046aa <__ssputs_r+0x46>
	...

0800471c <_svfiprintf_r>:
 800471c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004720:	4698      	mov	r8, r3
 8004722:	898b      	ldrh	r3, [r1, #12]
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	b09d      	sub	sp, #116	; 0x74
 8004728:	4607      	mov	r7, r0
 800472a:	460d      	mov	r5, r1
 800472c:	4614      	mov	r4, r2
 800472e:	d50e      	bpl.n	800474e <_svfiprintf_r+0x32>
 8004730:	690b      	ldr	r3, [r1, #16]
 8004732:	b963      	cbnz	r3, 800474e <_svfiprintf_r+0x32>
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	f000 fafd 	bl	8004d34 <_malloc_r>
 800473a:	6028      	str	r0, [r5, #0]
 800473c:	6128      	str	r0, [r5, #16]
 800473e:	b920      	cbnz	r0, 800474a <_svfiprintf_r+0x2e>
 8004740:	230c      	movs	r3, #12
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	e0d1      	b.n	80048ee <_svfiprintf_r+0x1d2>
 800474a:	2340      	movs	r3, #64	; 0x40
 800474c:	616b      	str	r3, [r5, #20]
 800474e:	2300      	movs	r3, #0
 8004750:	9309      	str	r3, [sp, #36]	; 0x24
 8004752:	2320      	movs	r3, #32
 8004754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004758:	f8cd 800c 	str.w	r8, [sp, #12]
 800475c:	2330      	movs	r3, #48	; 0x30
 800475e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004908 <_svfiprintf_r+0x1ec>
 8004762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004766:	f04f 0901 	mov.w	r9, #1
 800476a:	4623      	mov	r3, r4
 800476c:	469a      	mov	sl, r3
 800476e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004772:	b10a      	cbz	r2, 8004778 <_svfiprintf_r+0x5c>
 8004774:	2a25      	cmp	r2, #37	; 0x25
 8004776:	d1f9      	bne.n	800476c <_svfiprintf_r+0x50>
 8004778:	ebba 0b04 	subs.w	fp, sl, r4
 800477c:	d00b      	beq.n	8004796 <_svfiprintf_r+0x7a>
 800477e:	465b      	mov	r3, fp
 8004780:	4622      	mov	r2, r4
 8004782:	4629      	mov	r1, r5
 8004784:	4638      	mov	r0, r7
 8004786:	f7ff ff6d 	bl	8004664 <__ssputs_r>
 800478a:	3001      	adds	r0, #1
 800478c:	f000 80aa 	beq.w	80048e4 <_svfiprintf_r+0x1c8>
 8004790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004792:	445a      	add	r2, fp
 8004794:	9209      	str	r2, [sp, #36]	; 0x24
 8004796:	f89a 3000 	ldrb.w	r3, [sl]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80a2 	beq.w	80048e4 <_svfiprintf_r+0x1c8>
 80047a0:	2300      	movs	r3, #0
 80047a2:	f04f 32ff 	mov.w	r2, #4294967295
 80047a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047aa:	f10a 0a01 	add.w	sl, sl, #1
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	9307      	str	r3, [sp, #28]
 80047b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047b6:	931a      	str	r3, [sp, #104]	; 0x68
 80047b8:	4654      	mov	r4, sl
 80047ba:	2205      	movs	r2, #5
 80047bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c0:	4851      	ldr	r0, [pc, #324]	; (8004908 <_svfiprintf_r+0x1ec>)
 80047c2:	f7fb fd3d 	bl	8000240 <memchr>
 80047c6:	9a04      	ldr	r2, [sp, #16]
 80047c8:	b9d8      	cbnz	r0, 8004802 <_svfiprintf_r+0xe6>
 80047ca:	06d0      	lsls	r0, r2, #27
 80047cc:	bf44      	itt	mi
 80047ce:	2320      	movmi	r3, #32
 80047d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d4:	0711      	lsls	r1, r2, #28
 80047d6:	bf44      	itt	mi
 80047d8:	232b      	movmi	r3, #43	; 0x2b
 80047da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047de:	f89a 3000 	ldrb.w	r3, [sl]
 80047e2:	2b2a      	cmp	r3, #42	; 0x2a
 80047e4:	d015      	beq.n	8004812 <_svfiprintf_r+0xf6>
 80047e6:	9a07      	ldr	r2, [sp, #28]
 80047e8:	4654      	mov	r4, sl
 80047ea:	2000      	movs	r0, #0
 80047ec:	f04f 0c0a 	mov.w	ip, #10
 80047f0:	4621      	mov	r1, r4
 80047f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047f6:	3b30      	subs	r3, #48	; 0x30
 80047f8:	2b09      	cmp	r3, #9
 80047fa:	d94e      	bls.n	800489a <_svfiprintf_r+0x17e>
 80047fc:	b1b0      	cbz	r0, 800482c <_svfiprintf_r+0x110>
 80047fe:	9207      	str	r2, [sp, #28]
 8004800:	e014      	b.n	800482c <_svfiprintf_r+0x110>
 8004802:	eba0 0308 	sub.w	r3, r0, r8
 8004806:	fa09 f303 	lsl.w	r3, r9, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	46a2      	mov	sl, r4
 8004810:	e7d2      	b.n	80047b8 <_svfiprintf_r+0x9c>
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	1d19      	adds	r1, r3, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	9103      	str	r1, [sp, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	bfbb      	ittet	lt
 800481e:	425b      	neglt	r3, r3
 8004820:	f042 0202 	orrlt.w	r2, r2, #2
 8004824:	9307      	strge	r3, [sp, #28]
 8004826:	9307      	strlt	r3, [sp, #28]
 8004828:	bfb8      	it	lt
 800482a:	9204      	strlt	r2, [sp, #16]
 800482c:	7823      	ldrb	r3, [r4, #0]
 800482e:	2b2e      	cmp	r3, #46	; 0x2e
 8004830:	d10c      	bne.n	800484c <_svfiprintf_r+0x130>
 8004832:	7863      	ldrb	r3, [r4, #1]
 8004834:	2b2a      	cmp	r3, #42	; 0x2a
 8004836:	d135      	bne.n	80048a4 <_svfiprintf_r+0x188>
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	9203      	str	r2, [sp, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	bfb8      	it	lt
 8004844:	f04f 33ff 	movlt.w	r3, #4294967295
 8004848:	3402      	adds	r4, #2
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004918 <_svfiprintf_r+0x1fc>
 8004850:	7821      	ldrb	r1, [r4, #0]
 8004852:	2203      	movs	r2, #3
 8004854:	4650      	mov	r0, sl
 8004856:	f7fb fcf3 	bl	8000240 <memchr>
 800485a:	b140      	cbz	r0, 800486e <_svfiprintf_r+0x152>
 800485c:	2340      	movs	r3, #64	; 0x40
 800485e:	eba0 000a 	sub.w	r0, r0, sl
 8004862:	fa03 f000 	lsl.w	r0, r3, r0
 8004866:	9b04      	ldr	r3, [sp, #16]
 8004868:	4303      	orrs	r3, r0
 800486a:	3401      	adds	r4, #1
 800486c:	9304      	str	r3, [sp, #16]
 800486e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004872:	4826      	ldr	r0, [pc, #152]	; (800490c <_svfiprintf_r+0x1f0>)
 8004874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004878:	2206      	movs	r2, #6
 800487a:	f7fb fce1 	bl	8000240 <memchr>
 800487e:	2800      	cmp	r0, #0
 8004880:	d038      	beq.n	80048f4 <_svfiprintf_r+0x1d8>
 8004882:	4b23      	ldr	r3, [pc, #140]	; (8004910 <_svfiprintf_r+0x1f4>)
 8004884:	bb1b      	cbnz	r3, 80048ce <_svfiprintf_r+0x1b2>
 8004886:	9b03      	ldr	r3, [sp, #12]
 8004888:	3307      	adds	r3, #7
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	3308      	adds	r3, #8
 8004890:	9303      	str	r3, [sp, #12]
 8004892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004894:	4433      	add	r3, r6
 8004896:	9309      	str	r3, [sp, #36]	; 0x24
 8004898:	e767      	b.n	800476a <_svfiprintf_r+0x4e>
 800489a:	fb0c 3202 	mla	r2, ip, r2, r3
 800489e:	460c      	mov	r4, r1
 80048a0:	2001      	movs	r0, #1
 80048a2:	e7a5      	b.n	80047f0 <_svfiprintf_r+0xd4>
 80048a4:	2300      	movs	r3, #0
 80048a6:	3401      	adds	r4, #1
 80048a8:	9305      	str	r3, [sp, #20]
 80048aa:	4619      	mov	r1, r3
 80048ac:	f04f 0c0a 	mov.w	ip, #10
 80048b0:	4620      	mov	r0, r4
 80048b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048b6:	3a30      	subs	r2, #48	; 0x30
 80048b8:	2a09      	cmp	r2, #9
 80048ba:	d903      	bls.n	80048c4 <_svfiprintf_r+0x1a8>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0c5      	beq.n	800484c <_svfiprintf_r+0x130>
 80048c0:	9105      	str	r1, [sp, #20]
 80048c2:	e7c3      	b.n	800484c <_svfiprintf_r+0x130>
 80048c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048c8:	4604      	mov	r4, r0
 80048ca:	2301      	movs	r3, #1
 80048cc:	e7f0      	b.n	80048b0 <_svfiprintf_r+0x194>
 80048ce:	ab03      	add	r3, sp, #12
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	462a      	mov	r2, r5
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <_svfiprintf_r+0x1f8>)
 80048d6:	a904      	add	r1, sp, #16
 80048d8:	4638      	mov	r0, r7
 80048da:	f3af 8000 	nop.w
 80048de:	1c42      	adds	r2, r0, #1
 80048e0:	4606      	mov	r6, r0
 80048e2:	d1d6      	bne.n	8004892 <_svfiprintf_r+0x176>
 80048e4:	89ab      	ldrh	r3, [r5, #12]
 80048e6:	065b      	lsls	r3, r3, #25
 80048e8:	f53f af2c 	bmi.w	8004744 <_svfiprintf_r+0x28>
 80048ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ee:	b01d      	add	sp, #116	; 0x74
 80048f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f4:	ab03      	add	r3, sp, #12
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	462a      	mov	r2, r5
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <_svfiprintf_r+0x1f8>)
 80048fc:	a904      	add	r1, sp, #16
 80048fe:	4638      	mov	r0, r7
 8004900:	f000 f87a 	bl	80049f8 <_printf_i>
 8004904:	e7eb      	b.n	80048de <_svfiprintf_r+0x1c2>
 8004906:	bf00      	nop
 8004908:	08004eb4 	.word	0x08004eb4
 800490c:	08004ebe 	.word	0x08004ebe
 8004910:	00000000 	.word	0x00000000
 8004914:	08004665 	.word	0x08004665
 8004918:	08004eba 	.word	0x08004eba

0800491c <_printf_common>:
 800491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004920:	4616      	mov	r6, r2
 8004922:	4699      	mov	r9, r3
 8004924:	688a      	ldr	r2, [r1, #8]
 8004926:	690b      	ldr	r3, [r1, #16]
 8004928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800492c:	4293      	cmp	r3, r2
 800492e:	bfb8      	it	lt
 8004930:	4613      	movlt	r3, r2
 8004932:	6033      	str	r3, [r6, #0]
 8004934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004938:	4607      	mov	r7, r0
 800493a:	460c      	mov	r4, r1
 800493c:	b10a      	cbz	r2, 8004942 <_printf_common+0x26>
 800493e:	3301      	adds	r3, #1
 8004940:	6033      	str	r3, [r6, #0]
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	0699      	lsls	r1, r3, #26
 8004946:	bf42      	ittt	mi
 8004948:	6833      	ldrmi	r3, [r6, #0]
 800494a:	3302      	addmi	r3, #2
 800494c:	6033      	strmi	r3, [r6, #0]
 800494e:	6825      	ldr	r5, [r4, #0]
 8004950:	f015 0506 	ands.w	r5, r5, #6
 8004954:	d106      	bne.n	8004964 <_printf_common+0x48>
 8004956:	f104 0a19 	add.w	sl, r4, #25
 800495a:	68e3      	ldr	r3, [r4, #12]
 800495c:	6832      	ldr	r2, [r6, #0]
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	42ab      	cmp	r3, r5
 8004962:	dc26      	bgt.n	80049b2 <_printf_common+0x96>
 8004964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004968:	1e13      	subs	r3, r2, #0
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	bf18      	it	ne
 800496e:	2301      	movne	r3, #1
 8004970:	0692      	lsls	r2, r2, #26
 8004972:	d42b      	bmi.n	80049cc <_printf_common+0xb0>
 8004974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004978:	4649      	mov	r1, r9
 800497a:	4638      	mov	r0, r7
 800497c:	47c0      	blx	r8
 800497e:	3001      	adds	r0, #1
 8004980:	d01e      	beq.n	80049c0 <_printf_common+0xa4>
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	68e5      	ldr	r5, [r4, #12]
 8004986:	6832      	ldr	r2, [r6, #0]
 8004988:	f003 0306 	and.w	r3, r3, #6
 800498c:	2b04      	cmp	r3, #4
 800498e:	bf08      	it	eq
 8004990:	1aad      	subeq	r5, r5, r2
 8004992:	68a3      	ldr	r3, [r4, #8]
 8004994:	6922      	ldr	r2, [r4, #16]
 8004996:	bf0c      	ite	eq
 8004998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800499c:	2500      	movne	r5, #0
 800499e:	4293      	cmp	r3, r2
 80049a0:	bfc4      	itt	gt
 80049a2:	1a9b      	subgt	r3, r3, r2
 80049a4:	18ed      	addgt	r5, r5, r3
 80049a6:	2600      	movs	r6, #0
 80049a8:	341a      	adds	r4, #26
 80049aa:	42b5      	cmp	r5, r6
 80049ac:	d11a      	bne.n	80049e4 <_printf_common+0xc8>
 80049ae:	2000      	movs	r0, #0
 80049b0:	e008      	b.n	80049c4 <_printf_common+0xa8>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4652      	mov	r2, sl
 80049b6:	4649      	mov	r1, r9
 80049b8:	4638      	mov	r0, r7
 80049ba:	47c0      	blx	r8
 80049bc:	3001      	adds	r0, #1
 80049be:	d103      	bne.n	80049c8 <_printf_common+0xac>
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c8:	3501      	adds	r5, #1
 80049ca:	e7c6      	b.n	800495a <_printf_common+0x3e>
 80049cc:	18e1      	adds	r1, r4, r3
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	2030      	movs	r0, #48	; 0x30
 80049d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049d6:	4422      	add	r2, r4
 80049d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049e0:	3302      	adds	r3, #2
 80049e2:	e7c7      	b.n	8004974 <_printf_common+0x58>
 80049e4:	2301      	movs	r3, #1
 80049e6:	4622      	mov	r2, r4
 80049e8:	4649      	mov	r1, r9
 80049ea:	4638      	mov	r0, r7
 80049ec:	47c0      	blx	r8
 80049ee:	3001      	adds	r0, #1
 80049f0:	d0e6      	beq.n	80049c0 <_printf_common+0xa4>
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7d9      	b.n	80049aa <_printf_common+0x8e>
	...

080049f8 <_printf_i>:
 80049f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049fc:	460c      	mov	r4, r1
 80049fe:	4691      	mov	r9, r2
 8004a00:	7e27      	ldrb	r7, [r4, #24]
 8004a02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a04:	2f78      	cmp	r7, #120	; 0x78
 8004a06:	4680      	mov	r8, r0
 8004a08:	469a      	mov	sl, r3
 8004a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a0e:	d807      	bhi.n	8004a20 <_printf_i+0x28>
 8004a10:	2f62      	cmp	r7, #98	; 0x62
 8004a12:	d80a      	bhi.n	8004a2a <_printf_i+0x32>
 8004a14:	2f00      	cmp	r7, #0
 8004a16:	f000 80d8 	beq.w	8004bca <_printf_i+0x1d2>
 8004a1a:	2f58      	cmp	r7, #88	; 0x58
 8004a1c:	f000 80a3 	beq.w	8004b66 <_printf_i+0x16e>
 8004a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a28:	e03a      	b.n	8004aa0 <_printf_i+0xa8>
 8004a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a2e:	2b15      	cmp	r3, #21
 8004a30:	d8f6      	bhi.n	8004a20 <_printf_i+0x28>
 8004a32:	a001      	add	r0, pc, #4	; (adr r0, 8004a38 <_printf_i+0x40>)
 8004a34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a38:	08004a91 	.word	0x08004a91
 8004a3c:	08004aa5 	.word	0x08004aa5
 8004a40:	08004a21 	.word	0x08004a21
 8004a44:	08004a21 	.word	0x08004a21
 8004a48:	08004a21 	.word	0x08004a21
 8004a4c:	08004a21 	.word	0x08004a21
 8004a50:	08004aa5 	.word	0x08004aa5
 8004a54:	08004a21 	.word	0x08004a21
 8004a58:	08004a21 	.word	0x08004a21
 8004a5c:	08004a21 	.word	0x08004a21
 8004a60:	08004a21 	.word	0x08004a21
 8004a64:	08004bb1 	.word	0x08004bb1
 8004a68:	08004ad5 	.word	0x08004ad5
 8004a6c:	08004b93 	.word	0x08004b93
 8004a70:	08004a21 	.word	0x08004a21
 8004a74:	08004a21 	.word	0x08004a21
 8004a78:	08004bd3 	.word	0x08004bd3
 8004a7c:	08004a21 	.word	0x08004a21
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004a21 	.word	0x08004a21
 8004a88:	08004a21 	.word	0x08004a21
 8004a8c:	08004b9b 	.word	0x08004b9b
 8004a90:	680b      	ldr	r3, [r1, #0]
 8004a92:	1d1a      	adds	r2, r3, #4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	600a      	str	r2, [r1, #0]
 8004a98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0a3      	b.n	8004bec <_printf_i+0x1f4>
 8004aa4:	6825      	ldr	r5, [r4, #0]
 8004aa6:	6808      	ldr	r0, [r1, #0]
 8004aa8:	062e      	lsls	r6, r5, #24
 8004aaa:	f100 0304 	add.w	r3, r0, #4
 8004aae:	d50a      	bpl.n	8004ac6 <_printf_i+0xce>
 8004ab0:	6805      	ldr	r5, [r0, #0]
 8004ab2:	600b      	str	r3, [r1, #0]
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	da03      	bge.n	8004ac0 <_printf_i+0xc8>
 8004ab8:	232d      	movs	r3, #45	; 0x2d
 8004aba:	426d      	negs	r5, r5
 8004abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac0:	485e      	ldr	r0, [pc, #376]	; (8004c3c <_printf_i+0x244>)
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	e019      	b.n	8004afa <_printf_i+0x102>
 8004ac6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aca:	6805      	ldr	r5, [r0, #0]
 8004acc:	600b      	str	r3, [r1, #0]
 8004ace:	bf18      	it	ne
 8004ad0:	b22d      	sxthne	r5, r5
 8004ad2:	e7ef      	b.n	8004ab4 <_printf_i+0xbc>
 8004ad4:	680b      	ldr	r3, [r1, #0]
 8004ad6:	6825      	ldr	r5, [r4, #0]
 8004ad8:	1d18      	adds	r0, r3, #4
 8004ada:	6008      	str	r0, [r1, #0]
 8004adc:	0628      	lsls	r0, r5, #24
 8004ade:	d501      	bpl.n	8004ae4 <_printf_i+0xec>
 8004ae0:	681d      	ldr	r5, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <_printf_i+0xf2>
 8004ae4:	0669      	lsls	r1, r5, #25
 8004ae6:	d5fb      	bpl.n	8004ae0 <_printf_i+0xe8>
 8004ae8:	881d      	ldrh	r5, [r3, #0]
 8004aea:	4854      	ldr	r0, [pc, #336]	; (8004c3c <_printf_i+0x244>)
 8004aec:	2f6f      	cmp	r7, #111	; 0x6f
 8004aee:	bf0c      	ite	eq
 8004af0:	2308      	moveq	r3, #8
 8004af2:	230a      	movne	r3, #10
 8004af4:	2100      	movs	r1, #0
 8004af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004afa:	6866      	ldr	r6, [r4, #4]
 8004afc:	60a6      	str	r6, [r4, #8]
 8004afe:	2e00      	cmp	r6, #0
 8004b00:	bfa2      	ittt	ge
 8004b02:	6821      	ldrge	r1, [r4, #0]
 8004b04:	f021 0104 	bicge.w	r1, r1, #4
 8004b08:	6021      	strge	r1, [r4, #0]
 8004b0a:	b90d      	cbnz	r5, 8004b10 <_printf_i+0x118>
 8004b0c:	2e00      	cmp	r6, #0
 8004b0e:	d04d      	beq.n	8004bac <_printf_i+0x1b4>
 8004b10:	4616      	mov	r6, r2
 8004b12:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b16:	fb03 5711 	mls	r7, r3, r1, r5
 8004b1a:	5dc7      	ldrb	r7, [r0, r7]
 8004b1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b20:	462f      	mov	r7, r5
 8004b22:	42bb      	cmp	r3, r7
 8004b24:	460d      	mov	r5, r1
 8004b26:	d9f4      	bls.n	8004b12 <_printf_i+0x11a>
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d10b      	bne.n	8004b44 <_printf_i+0x14c>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	07df      	lsls	r7, r3, #31
 8004b30:	d508      	bpl.n	8004b44 <_printf_i+0x14c>
 8004b32:	6923      	ldr	r3, [r4, #16]
 8004b34:	6861      	ldr	r1, [r4, #4]
 8004b36:	4299      	cmp	r1, r3
 8004b38:	bfde      	ittt	le
 8004b3a:	2330      	movle	r3, #48	; 0x30
 8004b3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b44:	1b92      	subs	r2, r2, r6
 8004b46:	6122      	str	r2, [r4, #16]
 8004b48:	f8cd a000 	str.w	sl, [sp]
 8004b4c:	464b      	mov	r3, r9
 8004b4e:	aa03      	add	r2, sp, #12
 8004b50:	4621      	mov	r1, r4
 8004b52:	4640      	mov	r0, r8
 8004b54:	f7ff fee2 	bl	800491c <_printf_common>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d14c      	bne.n	8004bf6 <_printf_i+0x1fe>
 8004b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b60:	b004      	add	sp, #16
 8004b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b66:	4835      	ldr	r0, [pc, #212]	; (8004c3c <_printf_i+0x244>)
 8004b68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	680e      	ldr	r6, [r1, #0]
 8004b70:	061f      	lsls	r7, r3, #24
 8004b72:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b76:	600e      	str	r6, [r1, #0]
 8004b78:	d514      	bpl.n	8004ba4 <_printf_i+0x1ac>
 8004b7a:	07d9      	lsls	r1, r3, #31
 8004b7c:	bf44      	itt	mi
 8004b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b82:	6023      	strmi	r3, [r4, #0]
 8004b84:	b91d      	cbnz	r5, 8004b8e <_printf_i+0x196>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	f023 0320 	bic.w	r3, r3, #32
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	2310      	movs	r3, #16
 8004b90:	e7b0      	b.n	8004af4 <_printf_i+0xfc>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	f043 0320 	orr.w	r3, r3, #32
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	2378      	movs	r3, #120	; 0x78
 8004b9c:	4828      	ldr	r0, [pc, #160]	; (8004c40 <_printf_i+0x248>)
 8004b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ba2:	e7e3      	b.n	8004b6c <_printf_i+0x174>
 8004ba4:	065e      	lsls	r6, r3, #25
 8004ba6:	bf48      	it	mi
 8004ba8:	b2ad      	uxthmi	r5, r5
 8004baa:	e7e6      	b.n	8004b7a <_printf_i+0x182>
 8004bac:	4616      	mov	r6, r2
 8004bae:	e7bb      	b.n	8004b28 <_printf_i+0x130>
 8004bb0:	680b      	ldr	r3, [r1, #0]
 8004bb2:	6826      	ldr	r6, [r4, #0]
 8004bb4:	6960      	ldr	r0, [r4, #20]
 8004bb6:	1d1d      	adds	r5, r3, #4
 8004bb8:	600d      	str	r5, [r1, #0]
 8004bba:	0635      	lsls	r5, r6, #24
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	d501      	bpl.n	8004bc4 <_printf_i+0x1cc>
 8004bc0:	6018      	str	r0, [r3, #0]
 8004bc2:	e002      	b.n	8004bca <_printf_i+0x1d2>
 8004bc4:	0671      	lsls	r1, r6, #25
 8004bc6:	d5fb      	bpl.n	8004bc0 <_printf_i+0x1c8>
 8004bc8:	8018      	strh	r0, [r3, #0]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6123      	str	r3, [r4, #16]
 8004bce:	4616      	mov	r6, r2
 8004bd0:	e7ba      	b.n	8004b48 <_printf_i+0x150>
 8004bd2:	680b      	ldr	r3, [r1, #0]
 8004bd4:	1d1a      	adds	r2, r3, #4
 8004bd6:	600a      	str	r2, [r1, #0]
 8004bd8:	681e      	ldr	r6, [r3, #0]
 8004bda:	6862      	ldr	r2, [r4, #4]
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7fb fb2e 	bl	8000240 <memchr>
 8004be4:	b108      	cbz	r0, 8004bea <_printf_i+0x1f2>
 8004be6:	1b80      	subs	r0, r0, r6
 8004be8:	6060      	str	r0, [r4, #4]
 8004bea:	6863      	ldr	r3, [r4, #4]
 8004bec:	6123      	str	r3, [r4, #16]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf4:	e7a8      	b.n	8004b48 <_printf_i+0x150>
 8004bf6:	6923      	ldr	r3, [r4, #16]
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	47d0      	blx	sl
 8004c00:	3001      	adds	r0, #1
 8004c02:	d0ab      	beq.n	8004b5c <_printf_i+0x164>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	079b      	lsls	r3, r3, #30
 8004c08:	d413      	bmi.n	8004c32 <_printf_i+0x23a>
 8004c0a:	68e0      	ldr	r0, [r4, #12]
 8004c0c:	9b03      	ldr	r3, [sp, #12]
 8004c0e:	4298      	cmp	r0, r3
 8004c10:	bfb8      	it	lt
 8004c12:	4618      	movlt	r0, r3
 8004c14:	e7a4      	b.n	8004b60 <_printf_i+0x168>
 8004c16:	2301      	movs	r3, #1
 8004c18:	4632      	mov	r2, r6
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	47d0      	blx	sl
 8004c20:	3001      	adds	r0, #1
 8004c22:	d09b      	beq.n	8004b5c <_printf_i+0x164>
 8004c24:	3501      	adds	r5, #1
 8004c26:	68e3      	ldr	r3, [r4, #12]
 8004c28:	9903      	ldr	r1, [sp, #12]
 8004c2a:	1a5b      	subs	r3, r3, r1
 8004c2c:	42ab      	cmp	r3, r5
 8004c2e:	dcf2      	bgt.n	8004c16 <_printf_i+0x21e>
 8004c30:	e7eb      	b.n	8004c0a <_printf_i+0x212>
 8004c32:	2500      	movs	r5, #0
 8004c34:	f104 0619 	add.w	r6, r4, #25
 8004c38:	e7f5      	b.n	8004c26 <_printf_i+0x22e>
 8004c3a:	bf00      	nop
 8004c3c:	08004ec5 	.word	0x08004ec5
 8004c40:	08004ed6 	.word	0x08004ed6

08004c44 <memcpy>:
 8004c44:	440a      	add	r2, r1
 8004c46:	4291      	cmp	r1, r2
 8004c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c4c:	d100      	bne.n	8004c50 <memcpy+0xc>
 8004c4e:	4770      	bx	lr
 8004c50:	b510      	push	{r4, lr}
 8004c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	d1f9      	bne.n	8004c52 <memcpy+0xe>
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <memmove>:
 8004c60:	4288      	cmp	r0, r1
 8004c62:	b510      	push	{r4, lr}
 8004c64:	eb01 0402 	add.w	r4, r1, r2
 8004c68:	d902      	bls.n	8004c70 <memmove+0x10>
 8004c6a:	4284      	cmp	r4, r0
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	d807      	bhi.n	8004c80 <memmove+0x20>
 8004c70:	1e43      	subs	r3, r0, #1
 8004c72:	42a1      	cmp	r1, r4
 8004c74:	d008      	beq.n	8004c88 <memmove+0x28>
 8004c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c7e:	e7f8      	b.n	8004c72 <memmove+0x12>
 8004c80:	4402      	add	r2, r0
 8004c82:	4601      	mov	r1, r0
 8004c84:	428a      	cmp	r2, r1
 8004c86:	d100      	bne.n	8004c8a <memmove+0x2a>
 8004c88:	bd10      	pop	{r4, pc}
 8004c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c92:	e7f7      	b.n	8004c84 <memmove+0x24>

08004c94 <_free_r>:
 8004c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c96:	2900      	cmp	r1, #0
 8004c98:	d048      	beq.n	8004d2c <_free_r+0x98>
 8004c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c9e:	9001      	str	r0, [sp, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ca6:	bfb8      	it	lt
 8004ca8:	18e4      	addlt	r4, r4, r3
 8004caa:	f000 f8d3 	bl	8004e54 <__malloc_lock>
 8004cae:	4a20      	ldr	r2, [pc, #128]	; (8004d30 <_free_r+0x9c>)
 8004cb0:	9801      	ldr	r0, [sp, #4]
 8004cb2:	6813      	ldr	r3, [r2, #0]
 8004cb4:	4615      	mov	r5, r2
 8004cb6:	b933      	cbnz	r3, 8004cc6 <_free_r+0x32>
 8004cb8:	6063      	str	r3, [r4, #4]
 8004cba:	6014      	str	r4, [r2, #0]
 8004cbc:	b003      	add	sp, #12
 8004cbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cc2:	f000 b8cd 	b.w	8004e60 <__malloc_unlock>
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	d90b      	bls.n	8004ce2 <_free_r+0x4e>
 8004cca:	6821      	ldr	r1, [r4, #0]
 8004ccc:	1862      	adds	r2, r4, r1
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	bf04      	itt	eq
 8004cd2:	681a      	ldreq	r2, [r3, #0]
 8004cd4:	685b      	ldreq	r3, [r3, #4]
 8004cd6:	6063      	str	r3, [r4, #4]
 8004cd8:	bf04      	itt	eq
 8004cda:	1852      	addeq	r2, r2, r1
 8004cdc:	6022      	streq	r2, [r4, #0]
 8004cde:	602c      	str	r4, [r5, #0]
 8004ce0:	e7ec      	b.n	8004cbc <_free_r+0x28>
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b10b      	cbz	r3, 8004cec <_free_r+0x58>
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	d9fa      	bls.n	8004ce2 <_free_r+0x4e>
 8004cec:	6811      	ldr	r1, [r2, #0]
 8004cee:	1855      	adds	r5, r2, r1
 8004cf0:	42a5      	cmp	r5, r4
 8004cf2:	d10b      	bne.n	8004d0c <_free_r+0x78>
 8004cf4:	6824      	ldr	r4, [r4, #0]
 8004cf6:	4421      	add	r1, r4
 8004cf8:	1854      	adds	r4, r2, r1
 8004cfa:	42a3      	cmp	r3, r4
 8004cfc:	6011      	str	r1, [r2, #0]
 8004cfe:	d1dd      	bne.n	8004cbc <_free_r+0x28>
 8004d00:	681c      	ldr	r4, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	6053      	str	r3, [r2, #4]
 8004d06:	4421      	add	r1, r4
 8004d08:	6011      	str	r1, [r2, #0]
 8004d0a:	e7d7      	b.n	8004cbc <_free_r+0x28>
 8004d0c:	d902      	bls.n	8004d14 <_free_r+0x80>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	6003      	str	r3, [r0, #0]
 8004d12:	e7d3      	b.n	8004cbc <_free_r+0x28>
 8004d14:	6825      	ldr	r5, [r4, #0]
 8004d16:	1961      	adds	r1, r4, r5
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	bf04      	itt	eq
 8004d1c:	6819      	ldreq	r1, [r3, #0]
 8004d1e:	685b      	ldreq	r3, [r3, #4]
 8004d20:	6063      	str	r3, [r4, #4]
 8004d22:	bf04      	itt	eq
 8004d24:	1949      	addeq	r1, r1, r5
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	6054      	str	r4, [r2, #4]
 8004d2a:	e7c7      	b.n	8004cbc <_free_r+0x28>
 8004d2c:	b003      	add	sp, #12
 8004d2e:	bd30      	pop	{r4, r5, pc}
 8004d30:	20000090 	.word	0x20000090

08004d34 <_malloc_r>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	1ccd      	adds	r5, r1, #3
 8004d38:	f025 0503 	bic.w	r5, r5, #3
 8004d3c:	3508      	adds	r5, #8
 8004d3e:	2d0c      	cmp	r5, #12
 8004d40:	bf38      	it	cc
 8004d42:	250c      	movcc	r5, #12
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	4606      	mov	r6, r0
 8004d48:	db01      	blt.n	8004d4e <_malloc_r+0x1a>
 8004d4a:	42a9      	cmp	r1, r5
 8004d4c:	d903      	bls.n	8004d56 <_malloc_r+0x22>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	2000      	movs	r0, #0
 8004d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d56:	f000 f87d 	bl	8004e54 <__malloc_lock>
 8004d5a:	4921      	ldr	r1, [pc, #132]	; (8004de0 <_malloc_r+0xac>)
 8004d5c:	680a      	ldr	r2, [r1, #0]
 8004d5e:	4614      	mov	r4, r2
 8004d60:	b99c      	cbnz	r4, 8004d8a <_malloc_r+0x56>
 8004d62:	4f20      	ldr	r7, [pc, #128]	; (8004de4 <_malloc_r+0xb0>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	b923      	cbnz	r3, 8004d72 <_malloc_r+0x3e>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f000 f862 	bl	8004e34 <_sbrk_r>
 8004d70:	6038      	str	r0, [r7, #0]
 8004d72:	4629      	mov	r1, r5
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 f85d 	bl	8004e34 <_sbrk_r>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	d123      	bne.n	8004dc6 <_malloc_r+0x92>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f86c 	bl	8004e60 <__malloc_unlock>
 8004d88:	e7e3      	b.n	8004d52 <_malloc_r+0x1e>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	1b5b      	subs	r3, r3, r5
 8004d8e:	d417      	bmi.n	8004dc0 <_malloc_r+0x8c>
 8004d90:	2b0b      	cmp	r3, #11
 8004d92:	d903      	bls.n	8004d9c <_malloc_r+0x68>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	441c      	add	r4, r3
 8004d98:	6025      	str	r5, [r4, #0]
 8004d9a:	e004      	b.n	8004da6 <_malloc_r+0x72>
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	42a2      	cmp	r2, r4
 8004da0:	bf0c      	ite	eq
 8004da2:	600b      	streq	r3, [r1, #0]
 8004da4:	6053      	strne	r3, [r2, #4]
 8004da6:	4630      	mov	r0, r6
 8004da8:	f000 f85a 	bl	8004e60 <__malloc_unlock>
 8004dac:	f104 000b 	add.w	r0, r4, #11
 8004db0:	1d23      	adds	r3, r4, #4
 8004db2:	f020 0007 	bic.w	r0, r0, #7
 8004db6:	1ac2      	subs	r2, r0, r3
 8004db8:	d0cc      	beq.n	8004d54 <_malloc_r+0x20>
 8004dba:	1a1b      	subs	r3, r3, r0
 8004dbc:	50a3      	str	r3, [r4, r2]
 8004dbe:	e7c9      	b.n	8004d54 <_malloc_r+0x20>
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	6864      	ldr	r4, [r4, #4]
 8004dc4:	e7cc      	b.n	8004d60 <_malloc_r+0x2c>
 8004dc6:	1cc4      	adds	r4, r0, #3
 8004dc8:	f024 0403 	bic.w	r4, r4, #3
 8004dcc:	42a0      	cmp	r0, r4
 8004dce:	d0e3      	beq.n	8004d98 <_malloc_r+0x64>
 8004dd0:	1a21      	subs	r1, r4, r0
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f000 f82e 	bl	8004e34 <_sbrk_r>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d1dd      	bne.n	8004d98 <_malloc_r+0x64>
 8004ddc:	e7cf      	b.n	8004d7e <_malloc_r+0x4a>
 8004dde:	bf00      	nop
 8004de0:	20000090 	.word	0x20000090
 8004de4:	20000094 	.word	0x20000094

08004de8 <_realloc_r>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	4607      	mov	r7, r0
 8004dec:	4614      	mov	r4, r2
 8004dee:	460e      	mov	r6, r1
 8004df0:	b921      	cbnz	r1, 8004dfc <_realloc_r+0x14>
 8004df2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004df6:	4611      	mov	r1, r2
 8004df8:	f7ff bf9c 	b.w	8004d34 <_malloc_r>
 8004dfc:	b922      	cbnz	r2, 8004e08 <_realloc_r+0x20>
 8004dfe:	f7ff ff49 	bl	8004c94 <_free_r>
 8004e02:	4625      	mov	r5, r4
 8004e04:	4628      	mov	r0, r5
 8004e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e08:	f000 f830 	bl	8004e6c <_malloc_usable_size_r>
 8004e0c:	42a0      	cmp	r0, r4
 8004e0e:	d20f      	bcs.n	8004e30 <_realloc_r+0x48>
 8004e10:	4621      	mov	r1, r4
 8004e12:	4638      	mov	r0, r7
 8004e14:	f7ff ff8e 	bl	8004d34 <_malloc_r>
 8004e18:	4605      	mov	r5, r0
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d0f2      	beq.n	8004e04 <_realloc_r+0x1c>
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4622      	mov	r2, r4
 8004e22:	f7ff ff0f 	bl	8004c44 <memcpy>
 8004e26:	4631      	mov	r1, r6
 8004e28:	4638      	mov	r0, r7
 8004e2a:	f7ff ff33 	bl	8004c94 <_free_r>
 8004e2e:	e7e9      	b.n	8004e04 <_realloc_r+0x1c>
 8004e30:	4635      	mov	r5, r6
 8004e32:	e7e7      	b.n	8004e04 <_realloc_r+0x1c>

08004e34 <_sbrk_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d06      	ldr	r5, [pc, #24]	; (8004e50 <_sbrk_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f7fb ff8e 	bl	8000d60 <_sbrk>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_sbrk_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_sbrk_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	20000594 	.word	0x20000594

08004e54 <__malloc_lock>:
 8004e54:	4801      	ldr	r0, [pc, #4]	; (8004e5c <__malloc_lock+0x8>)
 8004e56:	f000 b811 	b.w	8004e7c <__retarget_lock_acquire_recursive>
 8004e5a:	bf00      	nop
 8004e5c:	2000059c 	.word	0x2000059c

08004e60 <__malloc_unlock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__malloc_unlock+0x8>)
 8004e62:	f000 b80c 	b.w	8004e7e <__retarget_lock_release_recursive>
 8004e66:	bf00      	nop
 8004e68:	2000059c 	.word	0x2000059c

08004e6c <_malloc_usable_size_r>:
 8004e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e70:	1f18      	subs	r0, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfbc      	itt	lt
 8004e76:	580b      	ldrlt	r3, [r1, r0]
 8004e78:	18c0      	addlt	r0, r0, r3
 8004e7a:	4770      	bx	lr

08004e7c <__retarget_lock_acquire_recursive>:
 8004e7c:	4770      	bx	lr

08004e7e <__retarget_lock_release_recursive>:
 8004e7e:	4770      	bx	lr

08004e80 <_init>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

08004e8c <_fini>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr
