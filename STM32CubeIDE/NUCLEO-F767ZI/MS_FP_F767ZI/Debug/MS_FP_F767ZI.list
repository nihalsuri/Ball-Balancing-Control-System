
MS_FP_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000675c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b54  08006b54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b5c  08006b5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000070  08006bd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08006bd4  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c67  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f67  00000000  00000000  00037d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  0003be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029627  00000000  00000000  0003ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001690a  00000000  00000000  0006648f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe6d8  00000000  00000000  0007cd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017b471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a8  00000000  00000000  0017b4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006944 	.word	0x08006944

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006944 	.word	0x08006944

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	; 0x30
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b68      	ldr	r3, [pc, #416]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a67      	ldr	r2, [pc, #412]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b65      	ldr	r3, [pc, #404]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	4b62      	ldr	r3, [pc, #392]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a61      	ldr	r2, [pc, #388]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b5f      	ldr	r3, [pc, #380]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b5c      	ldr	r3, [pc, #368]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a5b      	ldr	r2, [pc, #364]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b59      	ldr	r3, [pc, #356]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a55      	ldr	r2, [pc, #340]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b53      	ldr	r3, [pc, #332]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b50      	ldr	r3, [pc, #320]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a4f      	ldr	r2, [pc, #316]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	4b4a      	ldr	r3, [pc, #296]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a49      	ldr	r2, [pc, #292]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f244 0181 	movw	r1, #16513	; 0x4081
 8000694:	4843      	ldr	r0, [pc, #268]	; (80007a4 <MX_GPIO_Init+0x1bc>)
 8000696:	f000 ffed 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	4842      	ldr	r0, [pc, #264]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 80006a0:	f000 ffe8 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	483c      	ldr	r0, [pc, #240]	; (80007ac <MX_GPIO_Init+0x1c4>)
 80006bc:	f000 fe2e 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006c0:	2332      	movs	r3, #50	; 0x32
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d0:	230b      	movs	r3, #11
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	4834      	ldr	r0, [pc, #208]	; (80007ac <MX_GPIO_Init+0x1c4>)
 80006dc:	f000 fe1e 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006e0:	2386      	movs	r3, #134	; 0x86
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f0:	230b      	movs	r3, #11
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	482d      	ldr	r0, [pc, #180]	; (80007b0 <MX_GPIO_Init+0x1c8>)
 80006fc:	f000 fe0e 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000700:	f244 0381 	movw	r3, #16513	; 0x4081
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4822      	ldr	r0, [pc, #136]	; (80007a4 <MX_GPIO_Init+0x1bc>)
 800071a:	f000 fdff 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000730:	230b      	movs	r3, #11
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <MX_GPIO_Init+0x1bc>)
 800073c:	f000 fdee 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4814      	ldr	r0, [pc, #80]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 8000758:	f000 fde0 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 8000770:	f000 fdd4 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000774:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 8000792:	f000 fdc3 	bl	800131c <HAL_GPIO_Init>

}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40021800 	.word	0x40021800
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020000 	.word	0x40020000

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fb8a 	bl	8000ed2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f83d 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f7ff ff11 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007c6:	f000 fa55 	bl	8000c74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007ca:	f000 facf 	bl	8000d6c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80007ce:	f000 f97f 	bl	8000ad0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007d2:	2100      	movs	r1, #0
 80007d4:	4813      	ldr	r0, [pc, #76]	; (8000824 <main+0x70>)
 80007d6:	f002 fa9f 	bl	8002d18 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_UART_Receive(&huart3, (uint8_t *) msg, 12, HAL_MAX_DELAY) == HAL_OK){
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	220c      	movs	r2, #12
 80007e0:	4911      	ldr	r1, [pc, #68]	; (8000828 <main+0x74>)
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <main+0x78>)
 80007e4:	f003 fc0d 	bl	8004002 <HAL_UART_Receive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f5      	bne.n	80007da <main+0x26>
		  sscanf(msg, "DUTY_SET=%d", &duty);
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <main+0x7c>)
 80007f0:	4910      	ldr	r1, [pc, #64]	; (8000834 <main+0x80>)
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <main+0x74>)
 80007f4:	f004 ffd4 	bl	80057a0 <siscanf>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <main+0x7c>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <main+0x70>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
		  int n = sprintf(msg, "Duty was set to %d\r\n", duty);
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <main+0x7c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	490b      	ldr	r1, [pc, #44]	; (8000838 <main+0x84>)
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <main+0x74>)
 800080c:	f004 ffa8 	bl	8005760 <siprintf>
 8000810:	6078      	str	r0, [r7, #4]
	  	  HAL_UART_Transmit(&huart3, (uint8_t *) msg, n, HAL_MAX_DELAY);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	b29a      	uxth	r2, r3
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	4903      	ldr	r1, [pc, #12]	; (8000828 <main+0x74>)
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <main+0x78>)
 800081e:	f003 fb5d 	bl	8003edc <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart3, (uint8_t *) msg, 12, HAL_MAX_DELAY) == HAL_OK){
 8000822:	e7da      	b.n	80007da <main+0x26>
 8000824:	20000100 	.word	0x20000100
 8000828:	2000009c 	.word	0x2000009c
 800082c:	2000014c 	.word	0x2000014c
 8000830:	2000008c 	.word	0x2000008c
 8000834:	0800695c 	.word	0x0800695c
 8000838:	08006968 	.word	0x08006968

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b0b8      	sub	sp, #224	; 0xe0
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 ff80 	bl	8005750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	2290      	movs	r2, #144	; 0x90
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f004 ff71 	bl	8005750 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800086e:	f001 f863 	bl	8001938 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <SystemClock_Config+0x128>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <SystemClock_Config+0x128>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <SystemClock_Config+0x128>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <SystemClock_Config+0x12c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000892:	4a35      	ldr	r2, [pc, #212]	; (8000968 <SystemClock_Config+0x12c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	4b33      	ldr	r3, [pc, #204]	; (8000968 <SystemClock_Config+0x12c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a6:	2301      	movs	r3, #1
 80008a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c2:	2304      	movs	r3, #4
 80008c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008c8:	2360      	movs	r3, #96	; 0x60
 80008ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 f887 	bl	80019f8 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008f0:	f000 f83e 	bl	8000970 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008f4:	f001 f830 	bl	8001958 <HAL_PWREx_EnableOverDrive>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008fe:	f000 f837 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000922:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000926:	2103      	movs	r1, #3
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fb13 	bl	8001f54 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000934:	f000 f81c 	bl	8000970 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <SystemClock_Config+0x130>)
 800093a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800093c:	2300      	movs	r3, #0
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fd04 	bl	8002358 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000956:	f000 f80b 	bl	8000970 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	37e0      	adds	r7, #224	; 0xe0
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000
 800096c:	00200100 	.word	0x00200100

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x44>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_MspInit+0x44>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x44>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x44>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x44>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 fa9c 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <TIM2_IRQHandler+0x10>)
 8000a1e:	f002 fa75 	bl	8002f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000100 	.word	0x20000100

08000a2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <USART3_IRQHandler+0x10>)
 8000a32:	f003 fbb7 	bl	80041a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000014c 	.word	0x2000014c

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f004 fe44 	bl	80056fc <__errno>
 8000a74:	4603      	mov	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20080000 	.word	0x20080000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	20000090 	.word	0x20000090
 8000aa8:	200005e8 	.word	0x200005e8

08000aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1920-1;
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b0c:	f240 727f 	movw	r2, #1919	; 0x77f
 8000b10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b2c:	4823      	ldr	r0, [pc, #140]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b2e:	f002 f83b 	bl	8002ba8 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000b38:	f7ff ff1a 	bl	8000970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	4619      	mov	r1, r3
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b4a:	f002 fc13 	bl	8003374 <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000b54:	f7ff ff0c 	bl	8000970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b58:	4818      	ldr	r0, [pc, #96]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b5a:	f002 f87c 	bl	8002c56 <HAL_TIM_PWM_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b64:	f7ff ff04 	bl	8000970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4811      	ldr	r0, [pc, #68]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b78:	f003 f8b6 	bl	8003ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b82:	f7ff fef5 	bl	8000970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	; 0x60
 8000b88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000b9e:	f002 fad5 	bl	800314c <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ba8:	f7ff fee2 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM2_Init+0xec>)
 8000bae:	f000 f82b 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3738      	adds	r7, #56	; 0x38
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000100 	.word	0x20000100

08000bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd0:	d113      	bne.n	8000bfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_TIM_Base_MspInit+0x44>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_TIM_Base_MspInit+0x44>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_TIM_Base_MspInit+0x44>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	201c      	movs	r0, #28
 8000bf0:	f000 facb 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf4:	201c      	movs	r0, #28
 8000bf6:	f000 fae4 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c28:	d11b      	bne.n	8000c62 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_TIM_MspPostInit+0x64>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_TIM_MspPostInit+0x64>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_TIM_MspPostInit+0x64>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c42:	2301      	movs	r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c5e:	f000 fb5d 	bl	800131c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <MX_USART3_UART_Init+0x5c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART3_UART_Init+0x58>)
 8000cb8:	f003 f8c2 	bl	8003e40 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cc2:	f7ff fe55 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000014c 	.word	0x2000014c
 8000cd0:	40004800 	.word	0x40004800

08000cd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <HAL_UART_MspInit+0x8c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d130      	bne.n	8000d58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <HAL_UART_MspInit+0x94>)
 8000d44:	f000 faea 	bl	800131c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2027      	movs	r0, #39	; 0x27
 8000d4e:	f000 fa1c 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d52:	2027      	movs	r0, #39	; 0x27
 8000d54:	f000 fa35 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40004800 	.word	0x40004800
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020c00 	.word	0x40020c00

08000d6c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7a:	2206      	movs	r2, #6
 8000d7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db0:	f000 fc79 	bl	80016a6 <HAL_PCD_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dba:	f7ff fdd9 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001d0 	.word	0x200001d0

08000dc8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de8:	d141      	bne.n	8000e6e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e14:	230a      	movs	r3, #10
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4817      	ldr	r0, [pc, #92]	; (8000e7c <HAL_PCD_MspInit+0xb4>)
 8000e20:	f000 fa7c 	bl	800131c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4810      	ldr	r0, [pc, #64]	; (8000e7c <HAL_PCD_MspInit+0xb4>)
 8000e3a:	f000 fa6f 	bl	800131c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e42:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	6353      	str	r3, [r2, #52]	; 0x34
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eaa:	f7ff fdff 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f004 fc2b 	bl	8005708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fc7f 	bl	80007b4 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec4:	08006b64 	.word	0x08006b64
  ldr r2, =_sbss
 8000ec8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ecc:	200005e8 	.word	0x200005e8

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>

08000ed2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f94c 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f805 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee2:	f7ff fd4b 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f967 	bl	80011de <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f92f 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200005d4 	.word	0x200005d4

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200005d4 	.word	0x200005d4

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	05fa0000 	.word	0x05fa0000

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff3e 	bl	800101c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff feb6 	bl	8000f74 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d008      	beq.n	8001228 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e052      	b.n	80012ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0216 	bic.w	r2, r2, #22
 8001236:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001246:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <HAL_DMA_Abort+0x62>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0208 	bic.w	r2, r2, #8
 8001266:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001278:	e013      	b.n	80012a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800127a:	f7ff fe7b 	bl	8000f74 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b05      	cmp	r3, #5
 8001286:	d90c      	bls.n	80012a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2220      	movs	r2, #32
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e015      	b.n	80012ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e4      	bne.n	800127a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b4:	223f      	movs	r2, #63	; 0x3f
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00c      	b.n	800130e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2205      	movs	r2, #5
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	e175      	b.n	8001628 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800133c:	2201      	movs	r2, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	429a      	cmp	r2, r3
 8001356:	f040 8164 	bne.w	8001622 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d005      	beq.n	8001372 <HAL_GPIO_Init+0x56>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d130      	bne.n	80013d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 0201 	and.w	r2, r3, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d017      	beq.n	8001410 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d123      	bne.n	8001464 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	69b9      	ldr	r1, [r7, #24]
 8001460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0203 	and.w	r2, r3, #3
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80be 	beq.w	8001622 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b66      	ldr	r3, [pc, #408]	; (8001640 <HAL_GPIO_Init+0x324>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a65      	ldr	r2, [pc, #404]	; (8001640 <HAL_GPIO_Init+0x324>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b63      	ldr	r3, [pc, #396]	; (8001640 <HAL_GPIO_Init+0x324>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014be:	4a61      	ldr	r2, [pc, #388]	; (8001644 <HAL_GPIO_Init+0x328>)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_GPIO_Init+0x32c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d037      	beq.n	800155a <HAL_GPIO_Init+0x23e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a57      	ldr	r2, [pc, #348]	; (800164c <HAL_GPIO_Init+0x330>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d031      	beq.n	8001556 <HAL_GPIO_Init+0x23a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a56      	ldr	r2, [pc, #344]	; (8001650 <HAL_GPIO_Init+0x334>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d02b      	beq.n	8001552 <HAL_GPIO_Init+0x236>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a55      	ldr	r2, [pc, #340]	; (8001654 <HAL_GPIO_Init+0x338>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d025      	beq.n	800154e <HAL_GPIO_Init+0x232>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a54      	ldr	r2, [pc, #336]	; (8001658 <HAL_GPIO_Init+0x33c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d01f      	beq.n	800154a <HAL_GPIO_Init+0x22e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a53      	ldr	r2, [pc, #332]	; (800165c <HAL_GPIO_Init+0x340>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d019      	beq.n	8001546 <HAL_GPIO_Init+0x22a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a52      	ldr	r2, [pc, #328]	; (8001660 <HAL_GPIO_Init+0x344>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x226>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a51      	ldr	r2, [pc, #324]	; (8001664 <HAL_GPIO_Init+0x348>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x222>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a50      	ldr	r2, [pc, #320]	; (8001668 <HAL_GPIO_Init+0x34c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x21e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4f      	ldr	r2, [pc, #316]	; (800166c <HAL_GPIO_Init+0x350>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x21a>
 8001532:	2309      	movs	r3, #9
 8001534:	e012      	b.n	800155c <HAL_GPIO_Init+0x240>
 8001536:	230a      	movs	r3, #10
 8001538:	e010      	b.n	800155c <HAL_GPIO_Init+0x240>
 800153a:	2308      	movs	r3, #8
 800153c:	e00e      	b.n	800155c <HAL_GPIO_Init+0x240>
 800153e:	2307      	movs	r3, #7
 8001540:	e00c      	b.n	800155c <HAL_GPIO_Init+0x240>
 8001542:	2306      	movs	r3, #6
 8001544:	e00a      	b.n	800155c <HAL_GPIO_Init+0x240>
 8001546:	2305      	movs	r3, #5
 8001548:	e008      	b.n	800155c <HAL_GPIO_Init+0x240>
 800154a:	2304      	movs	r3, #4
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x240>
 800154e:	2303      	movs	r3, #3
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x240>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x240>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x240>
 800155a:	2300      	movs	r3, #0
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	f002 0203 	and.w	r2, r2, #3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800156c:	4935      	ldr	r1, [pc, #212]	; (8001644 <HAL_GPIO_Init+0x328>)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157a:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <HAL_GPIO_Init+0x354>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159e:	4a34      	ldr	r2, [pc, #208]	; (8001670 <HAL_GPIO_Init+0x354>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a4:	4b32      	ldr	r3, [pc, #200]	; (8001670 <HAL_GPIO_Init+0x354>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c8:	4a29      	ldr	r2, [pc, #164]	; (8001670 <HAL_GPIO_Init+0x354>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ce:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_GPIO_Init+0x354>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <HAL_GPIO_Init+0x354>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_GPIO_Init+0x354>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_GPIO_Init+0x354>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	f67f ae86 	bls.w	800133c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40013800 	.word	0x40013800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40021400 	.word	0x40021400
 8001660:	40021800 	.word	0x40021800
 8001664:	40021c00 	.word	0x40021c00
 8001668:	40022000 	.word	0x40022000
 800166c:	40022400 	.word	0x40022400
 8001670:	40013c00 	.word	0x40013c00

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a8:	b08f      	sub	sp, #60	; 0x3c
 80016aa:	af0a      	add	r7, sp, #40	; 0x28
 80016ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e116      	b.n	80018e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fb78 	bl	8000dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2203      	movs	r2, #3
 80016dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fd6a 	bl	80051d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	687e      	ldr	r6, [r7, #4]
 8001704:	466d      	mov	r5, sp
 8001706:	f106 0410 	add.w	r4, r6, #16
 800170a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001716:	e885 0003 	stmia.w	r5, {r0, r1}
 800171a:	1d33      	adds	r3, r6, #4
 800171c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171e:	6838      	ldr	r0, [r7, #0]
 8001720:	f003 fcfe 	bl	8005120 <USB_CoreInit>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2202      	movs	r2, #2
 800172e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0d7      	b.n	80018e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f003 fd58 	bl	80051f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e04a      	b.n	80017de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	333d      	adds	r3, #61	; 0x3d
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	333c      	adds	r3, #60	; 0x3c
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	b298      	uxth	r0, r3
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	3342      	adds	r3, #66	; 0x42
 8001784:	4602      	mov	r2, r0
 8001786:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	333f      	adds	r3, #63	; 0x3f
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	3344      	adds	r3, #68	; 0x44
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3348      	adds	r3, #72	; 0x48
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017c4:	7bfa      	ldrb	r2, [r7, #15]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	3350      	adds	r3, #80	; 0x50
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	3301      	adds	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d3af      	bcc.n	8001748 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e044      	b.n	8001878 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	3301      	adds	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	d3b5      	bcc.n	80017ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	687e      	ldr	r6, [r7, #4]
 800188a:	466d      	mov	r5, sp
 800188c:	f106 0410 	add.w	r4, r6, #16
 8001890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001898:	e894 0003 	ldmia.w	r4, {r0, r1}
 800189c:	e885 0003 	stmia.w	r5, {r0, r1}
 80018a0:	1d33      	adds	r3, r6, #4
 80018a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a4:	6838      	ldr	r0, [r7, #0]
 80018a6:	f003 fcf1 	bl	800528c <USB_DevInit>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e014      	b.n	80018e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d102      	bne.n	80018da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f80b 	bl	80018f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 feab 	bl	800563a <USB_DevDisconnect>

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080018f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_PCDEx_ActivateLPM+0x44>)
 8001920:	4313      	orrs	r3, r2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	10000003 	.word	0x10000003

08001938 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40007000 	.word	0x40007000

08001958 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001986:	f7ff faf5 	bl	8000f74 <HAL_GetTick>
 800198a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800198c:	e009      	b.n	80019a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800198e:	f7ff faf1 	bl	8000f74 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800199c:	d901      	bls.n	80019a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e022      	b.n	80019e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ae:	d1ee      	bne.n	800198e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019bc:	f7ff fada 	bl	8000f74 <HAL_GetTick>
 80019c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019c2:	e009      	b.n	80019d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019c4:	f7ff fad6 	bl	8000f74 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019d2:	d901      	bls.n	80019d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e007      	b.n	80019e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019e4:	d1ee      	bne.n	80019c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a00:	2300      	movs	r3, #0
 8001a02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e29b      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8087 	beq.w	8001b2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a1c:	4b96      	ldr	r3, [pc, #600]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d00c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a28:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d112      	bne.n	8001a5a <HAL_RCC_OscConfig+0x62>
 8001a34:	4b90      	ldr	r3, [pc, #576]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a40:	d10b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	4b8d      	ldr	r3, [pc, #564]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d06c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x130>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d168      	bne.n	8001b28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e275      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x7a>
 8001a64:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a83      	ldr	r2, [pc, #524]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e02e      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x9c>
 8001a7a:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7e      	ldr	r2, [pc, #504]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7b      	ldr	r2, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xc0>
 8001a9e:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a72      	ldr	r2, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xd8>
 8001ab8:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b6c      	ldr	r3, [pc, #432]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6b      	ldr	r2, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fa4c 	bl	8000f74 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fa48 	bl	8000f74 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e229      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xe8>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff fa38 	bl	8000f74 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fa34 	bl	8000f74 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e215      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x110>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d069      	beq.n	8001c0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b36:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b42:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x190>
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x17a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1e9      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	493d      	ldr	r1, [pc, #244]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e040      	b.n	8001c0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a38      	ldr	r2, [pc, #224]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f9ea 	bl	8000f74 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff f9e6 	bl	8000f74 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1c7      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4929      	ldr	r1, [pc, #164]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
 8001bd6:	e018      	b.n	8001c0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f9c6 	bl	8000f74 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff f9c2 	bl	8000f74 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1a3      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d038      	beq.n	8001c88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d019      	beq.n	8001c52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f9a3 	bl	8000f74 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff f99f 	bl	8000f74 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e180      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x23a>
 8001c50:	e01a      	b.n	8001c88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f989 	bl	8000f74 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff f985 	bl	8000f74 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d903      	bls.n	8001c7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e166      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
 8001c78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ee      	bne.n	8001c66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a4 	beq.w	8001dde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b89      	ldr	r3, [pc, #548]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a88      	ldr	r2, [pc, #544]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b86      	ldr	r3, [pc, #536]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbe:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <HAL_RCC_OscConfig+0x4d4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cca:	4b80      	ldr	r3, [pc, #512]	; (8001ecc <HAL_RCC_OscConfig+0x4d4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7f      	ldr	r2, [pc, #508]	; (8001ecc <HAL_RCC_OscConfig+0x4d4>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff f94d 	bl	8000f74 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7ff f949 	bl	8000f74 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e12a      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf0:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCC_OscConfig+0x4d4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x31a>
 8001d04:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	4a6f      	ldr	r2, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d10:	e02d      	b.n	8001d6e <HAL_RCC_OscConfig+0x376>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x33c>
 8001d1a:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a67      	ldr	r2, [pc, #412]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70
 8001d32:	e01c      	b.n	8001d6e <HAL_RCC_OscConfig+0x376>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x35e>
 8001d3c:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a61      	ldr	r2, [pc, #388]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a5e      	ldr	r2, [pc, #376]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	e00b      	b.n	8001d6e <HAL_RCC_OscConfig+0x376>
 8001d56:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a5b      	ldr	r2, [pc, #364]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
 8001d62:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d015      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f8fd 	bl	8000f74 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff f8f9 	bl	8000f74 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0d8      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ee      	beq.n	8001d7e <HAL_RCC_OscConfig+0x386>
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7ff f8e7 	bl	8000f74 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff f8e3 	bl	8000f74 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0c2      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ee      	bne.n	8001daa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80ae 	beq.w	8001f44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d06d      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d14b      	bne.n	8001e94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f8b4 	bl	8000f74 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f8b0 	bl	8000f74 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e091      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	019b      	lsls	r3, r3, #6
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	041b      	lsls	r3, r3, #16
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	071b      	lsls	r3, r3, #28
 8001e5a:	491b      	ldr	r1, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f882 	bl	8000f74 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f87e 	bl	8000f74 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e05f      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x47c>
 8001e92:	e057      	b.n	8001f44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f868 	bl	8000f74 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff f864 	bl	8000f74 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e045      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4b0>
 8001ec6:	e03d      	b.n	8001f44 <HAL_RCC_OscConfig+0x54c>
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_RCC_OscConfig+0x558>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d030      	beq.n	8001f40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d129      	bne.n	8001f40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d122      	bne.n	8001f40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f00:	4013      	ands	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d119      	bne.n	8001f40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d10f      	bne.n	8001f40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d0      	b.n	800210e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d910      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b67      	ldr	r3, [pc, #412]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 020f 	bic.w	r2, r3, #15
 8001f82:	4965      	ldr	r1, [pc, #404]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0b8      	b.n	800210e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8001fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8001fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b50      	ldr	r3, [pc, #320]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	494d      	ldr	r1, [pc, #308]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d040      	beq.n	8002078 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d115      	bne.n	8002036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e07f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e073      	b.n	800210e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06b      	b.n	800210e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4936      	ldr	r1, [pc, #216]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002048:	f7fe ff94 	bl	8000f74 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7fe ff90 	bl	8000f74 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e053      	b.n	800210e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d210      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 020f 	bic.w	r2, r3, #15
 800208e:	4922      	ldr	r1, [pc, #136]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e032      	b.n	800210e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4916      	ldr	r1, [pc, #88]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	490e      	ldr	r1, [pc, #56]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020e6:	f000 f821 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_ClockConfig+0x1c8>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <HAL_RCC_ClockConfig+0x1cc>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1d0>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1d4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fef0 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023c00 	.word	0x40023c00
 800211c:	40023800 	.word	0x40023800
 8002120:	0800698c 	.word	0x0800698c
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	2300      	movs	r3, #0
 800213e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002144:	4b67      	ldr	r3, [pc, #412]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d00d      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x40>
 8002150:	2b08      	cmp	r3, #8
 8002152:	f200 80bd 	bhi.w	80022d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x34>
 800215a:	2b04      	cmp	r3, #4
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x3a>
 800215e:	e0b7      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002162:	60bb      	str	r3, [r7, #8]
      break;
 8002164:	e0b7      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002166:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002168:	60bb      	str	r3, [r7, #8]
      break;
 800216a:	e0b4      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800216c:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002174:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002176:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d04d      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002182:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	461a      	mov	r2, r3
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	ea02 0800 	and.w	r8, r2, r0
 800219a:	ea03 0901 	and.w	r9, r3, r1
 800219e:	4640      	mov	r0, r8
 80021a0:	4649      	mov	r1, r9
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	014b      	lsls	r3, r1, #5
 80021ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021b0:	0142      	lsls	r2, r0, #5
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	ebb0 0008 	subs.w	r0, r0, r8
 80021ba:	eb61 0109 	sbc.w	r1, r1, r9
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	018b      	lsls	r3, r1, #6
 80021c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021cc:	0182      	lsls	r2, r0, #6
 80021ce:	1a12      	subs	r2, r2, r0
 80021d0:	eb63 0301 	sbc.w	r3, r3, r1
 80021d4:	f04f 0000 	mov.w	r0, #0
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	00d9      	lsls	r1, r3, #3
 80021de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021e2:	00d0      	lsls	r0, r2, #3
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	eb12 0208 	adds.w	r2, r2, r8
 80021ec:	eb43 0309 	adc.w	r3, r3, r9
 80021f0:	f04f 0000 	mov.w	r0, #0
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	0259      	lsls	r1, r3, #9
 80021fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80021fe:	0250      	lsls	r0, r2, #9
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	461a      	mov	r2, r3
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	f7fe f86e 	bl	80002f0 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4613      	mov	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e04a      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221e:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	099b      	lsrs	r3, r3, #6
 8002224:	461a      	mov	r2, r3
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	ea02 0400 	and.w	r4, r2, r0
 8002236:	ea03 0501 	and.w	r5, r3, r1
 800223a:	4620      	mov	r0, r4
 800223c:	4629      	mov	r1, r5
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	014b      	lsls	r3, r1, #5
 8002248:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800224c:	0142      	lsls	r2, r0, #5
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	1b00      	subs	r0, r0, r4
 8002254:	eb61 0105 	sbc.w	r1, r1, r5
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	018b      	lsls	r3, r1, #6
 8002262:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002266:	0182      	lsls	r2, r0, #6
 8002268:	1a12      	subs	r2, r2, r0
 800226a:	eb63 0301 	sbc.w	r3, r3, r1
 800226e:	f04f 0000 	mov.w	r0, #0
 8002272:	f04f 0100 	mov.w	r1, #0
 8002276:	00d9      	lsls	r1, r3, #3
 8002278:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800227c:	00d0      	lsls	r0, r2, #3
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	1912      	adds	r2, r2, r4
 8002284:	eb45 0303 	adc.w	r3, r5, r3
 8002288:	f04f 0000 	mov.w	r0, #0
 800228c:	f04f 0100 	mov.w	r1, #0
 8002290:	0299      	lsls	r1, r3, #10
 8002292:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002296:	0290      	lsls	r0, r2, #10
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	f7fe f822 	bl	80002f0 <__aeabi_uldivmod>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4613      	mov	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	3301      	adds	r3, #1
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	60bb      	str	r3, [r7, #8]
      break;
 80022ce:	e002      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022d2:	60bb      	str	r3, [r7, #8]
      break;
 80022d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d6:	68bb      	ldr	r3, [r7, #8]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	007a1200 	.word	0x007a1200

080022f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000000 	.word	0x20000000

08002308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800230c:	f7ff fff0 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	0a9b      	lsrs	r3, r3, #10
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	4903      	ldr	r1, [pc, #12]	; (800232c <HAL_RCC_GetPCLK1Freq+0x24>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	0800699c 	.word	0x0800699c

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002334:	f7ff ffdc 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	0b5b      	lsrs	r3, r3, #13
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40023800 	.word	0x40023800
 8002354:	0800699c 	.word	0x0800699c

08002358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002380:	4b69      	ldr	r3, [pc, #420]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a68      	ldr	r2, [pc, #416]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002386:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	4b66      	ldr	r3, [pc, #408]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002394:	4964      	ldr	r1, [pc, #400]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d017      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b2:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	4959      	ldr	r1, [pc, #356]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023d0:	d101      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d017      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023ee:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	494a      	ldr	r1, [pc, #296]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240c:	d101      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 808b 	beq.w	8002552 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	4a39      	ldr	r2, [pc, #228]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	6413      	str	r3, [r2, #64]	; 0x40
 8002448:	4b37      	ldr	r3, [pc, #220]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fd88 	bl	8000f74 <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7fe fd84 	bl	8000f74 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e38f      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d035      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d02e      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024c6:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d114      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fd4c 	bl	8000f74 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe fd48 	bl	8000f74 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e351      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0ee      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800250e:	d111      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800251e:	400b      	ands	r3, r1
 8002520:	4901      	ldr	r1, [pc, #4]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
 8002526:	e00b      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000
 8002530:	0ffffcff 	.word	0x0ffffcff
 8002534:	4bb3      	ldr	r3, [pc, #716]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4ab2      	ldr	r2, [pc, #712]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800253a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800253e:	6093      	str	r3, [r2, #8]
 8002540:	4bb0      	ldr	r3, [pc, #704]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	49ad      	ldr	r1, [pc, #692]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800254e:	4313      	orrs	r3, r2
 8002550:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800255e:	4ba9      	ldr	r3, [pc, #676]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002564:	4aa7      	ldr	r2, [pc, #668]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800256e:	4ba5      	ldr	r3, [pc, #660]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002570:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	49a2      	ldr	r1, [pc, #648]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258c:	4b9d      	ldr	r3, [pc, #628]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800259a:	499a      	ldr	r1, [pc, #616]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ae:	4b95      	ldr	r3, [pc, #596]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025bc:	4991      	ldr	r1, [pc, #580]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025d0:	4b8c      	ldr	r3, [pc, #560]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025de:	4989      	ldr	r1, [pc, #548]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025f2:	4b84      	ldr	r3, [pc, #528]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4980      	ldr	r1, [pc, #512]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4978      	ldr	r1, [pc, #480]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002636:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f023 020c 	bic.w	r2, r3, #12
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002644:	496f      	ldr	r1, [pc, #444]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002666:	4967      	ldr	r1, [pc, #412]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002688:	495e      	ldr	r1, [pc, #376]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800269c:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	4956      	ldr	r1, [pc, #344]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026be:	4b51      	ldr	r3, [pc, #324]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	494d      	ldr	r1, [pc, #308]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026e0:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	4945      	ldr	r1, [pc, #276]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002702:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002710:	493c      	ldr	r1, [pc, #240]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002724:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002732:	4934      	ldr	r1, [pc, #208]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d011      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002746:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002754:	492b      	ldr	r1, [pc, #172]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002764:	d101      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002794:	491b      	ldr	r1, [pc, #108]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b8:	4912      	ldr	r1, [pc, #72]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027dc:	4909      	ldr	r1, [pc, #36]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00f      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	e002      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	4986      	ldr	r1, [pc, #536]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800281c:	4b81      	ldr	r3, [pc, #516]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800281e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282c:	497d      	ldr	r1, [pc, #500]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d006      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80d6 	beq.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a75      	ldr	r2, [pc, #468]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800284e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fb8e 	bl	8000f74 <HAL_GetTick>
 8002858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800285c:	f7fe fb8a 	bl	8000f74 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e195      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800286e:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d021      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11d      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800289c:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a2:	0e1b      	lsrs	r3, r3, #24
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	019a      	lsls	r2, r3, #6
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	061b      	lsls	r3, r3, #24
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	071b      	lsls	r3, r3, #28
 80028c2:	4958      	ldr	r1, [pc, #352]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02e      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f4:	d129      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028f6:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002904:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290a:	0f1b      	lsrs	r3, r3, #28
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	019a      	lsls	r2, r3, #6
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	061b      	lsls	r3, r3, #24
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	071b      	lsls	r3, r3, #28
 800292a:	493e      	ldr	r1, [pc, #248]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002938:	f023 021f 	bic.w	r2, r3, #31
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	3b01      	subs	r3, #1
 8002942:	4938      	ldr	r1, [pc, #224]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01d      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002956:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295c:	0e1b      	lsrs	r3, r3, #24
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296a:	0f1b      	lsrs	r3, r3, #28
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	019a      	lsls	r2, r3, #6
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	061b      	lsls	r3, r3, #24
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	071b      	lsls	r3, r3, #28
 800298a:	4926      	ldr	r1, [pc, #152]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d011      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	019a      	lsls	r2, r3, #6
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	071b      	lsls	r3, r3, #28
 80029ba:	491a      	ldr	r1, [pc, #104]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ce:	f7fe fad1 	bl	8000f74 <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029d6:	f7fe facd 	bl	8000f74 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0d8      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f040 80ce 	bne.w	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a08:	f7fe fab4 	bl	8000f74 <HAL_GetTick>
 8002a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a10:	f7fe fab0 	bl	8000f74 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d904      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0bb      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a34:	d0ec      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02e      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d12a      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a5e:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	0f1b      	lsrs	r3, r3, #28
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	019a      	lsls	r2, r3, #6
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	061b      	lsls	r3, r3, #24
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	071b      	lsls	r3, r3, #28
 8002a92:	4944      	ldr	r1, [pc, #272]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	493d      	ldr	r1, [pc, #244]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d022      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac8:	d11d      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	0e1b      	lsrs	r3, r3, #24
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ad8:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	0f1b      	lsrs	r3, r3, #28
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	019a      	lsls	r2, r3, #6
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	431a      	orrs	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	061b      	lsls	r3, r3, #24
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	071b      	lsls	r3, r3, #28
 8002afe:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d028      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	0e1b      	lsrs	r3, r3, #24
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	019a      	lsls	r2, r3, #6
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	071b      	lsls	r3, r3, #28
 8002b46:	4917      	ldr	r1, [pc, #92]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4911      	ldr	r1, [pc, #68]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b70:	f7fe fa00 	bl	8000f74 <HAL_GetTick>
 8002b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b78:	f7fe f9fc 	bl	8000f74 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e007      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b96:	d1ef      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e049      	b.n	8002c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fd fff6 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f000 fcc0 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e049      	b.n	8002cfc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f841 	bl	8002d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3304      	adds	r3, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f000 fc69 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_TIM_PWM_Start+0x24>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e03c      	b.n	8002db6 <HAL_TIM_PWM_Start+0x9e>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d109      	bne.n	8002d56 <HAL_TIM_PWM_Start+0x3e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e02f      	b.n	8002db6 <HAL_TIM_PWM_Start+0x9e>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d109      	bne.n	8002d70 <HAL_TIM_PWM_Start+0x58>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e022      	b.n	8002db6 <HAL_TIM_PWM_Start+0x9e>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d109      	bne.n	8002d8a <HAL_TIM_PWM_Start+0x72>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	e015      	b.n	8002db6 <HAL_TIM_PWM_Start+0x9e>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d109      	bne.n	8002da4 <HAL_TIM_PWM_Start+0x8c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e008      	b.n	8002db6 <HAL_TIM_PWM_Start+0x9e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e092      	b.n	8002ee4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_PWM_Start+0xb6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dcc:	e023      	b.n	8002e16 <HAL_TIM_PWM_Start+0xfe>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d104      	bne.n	8002dde <HAL_TIM_PWM_Start+0xc6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ddc:	e01b      	b.n	8002e16 <HAL_TIM_PWM_Start+0xfe>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d104      	bne.n	8002dee <HAL_TIM_PWM_Start+0xd6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dec:	e013      	b.n	8002e16 <HAL_TIM_PWM_Start+0xfe>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_PWM_Start+0xe6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dfc:	e00b      	b.n	8002e16 <HAL_TIM_PWM_Start+0xfe>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_PWM_Start+0xf6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0c:	e003      	b.n	8002e16 <HAL_TIM_PWM_Start+0xfe>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	6839      	ldr	r1, [r7, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 ff3c 	bl	8003c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a30      	ldr	r2, [pc, #192]	; (8002eec <HAL_TIM_PWM_Start+0x1d4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_TIM_PWM_Start+0x120>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2f      	ldr	r2, [pc, #188]	; (8002ef0 <HAL_TIM_PWM_Start+0x1d8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_TIM_PWM_Start+0x124>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_TIM_PWM_Start+0x126>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <HAL_TIM_PWM_Start+0x1d4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x18a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d01d      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x18a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a22      	ldr	r2, [pc, #136]	; (8002ef4 <HAL_TIM_PWM_Start+0x1dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d018      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x18a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <HAL_TIM_PWM_Start+0x1e0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x18a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <HAL_TIM_PWM_Start+0x1e4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00e      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x18a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <HAL_TIM_PWM_Start+0x1d8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x18a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1b      	ldr	r2, [pc, #108]	; (8002f00 <HAL_TIM_PWM_Start+0x1e8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x18a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <HAL_TIM_PWM_Start+0x1ec>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d115      	bne.n	8002ece <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <HAL_TIM_PWM_Start+0x1f0>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d015      	beq.n	8002ee0 <HAL_TIM_PWM_Start+0x1c8>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eba:	d011      	beq.n	8002ee0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	e008      	b.n	8002ee0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e000      	b.n	8002ee2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40010400 	.word	0x40010400
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	40000c00 	.word	0x40000c00
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40001800 	.word	0x40001800
 8002f08:	00010007 	.word	0x00010007

08002f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0202 	mvn.w	r2, #2
 8002f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 faee 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fae0 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 faf1 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0204 	mvn.w	r2, #4
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fac4 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fab6 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fac7 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0208 	mvn.w	r2, #8
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa9a 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa8c 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fa9d 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b10      	cmp	r3, #16
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b10      	cmp	r3, #16
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0210 	mvn.w	r2, #16
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2208      	movs	r2, #8
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa70 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa62 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa73 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0201 	mvn.w	r2, #1
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa3c 	bl	8003508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b80      	cmp	r3, #128	; 0x80
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b80      	cmp	r3, #128	; 0x80
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 feae 	bl	8003e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ca:	d10e      	bne.n	80030ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d107      	bne.n	80030ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fea1 	bl	8003e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d10e      	bne.n	8003116 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d107      	bne.n	8003116 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fa21 	bl	8003558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b20      	cmp	r3, #32
 8003122:	d10e      	bne.n	8003142 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b20      	cmp	r3, #32
 8003130:	d107      	bne.n	8003142 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0220 	mvn.w	r2, #32
 800313a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fe61 	bl	8003e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003166:	2302      	movs	r3, #2
 8003168:	e0ff      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b14      	cmp	r3, #20
 8003176:	f200 80f0 	bhi.w	800335a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800317a:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031d5 	.word	0x080031d5
 8003184:	0800335b 	.word	0x0800335b
 8003188:	0800335b 	.word	0x0800335b
 800318c:	0800335b 	.word	0x0800335b
 8003190:	08003215 	.word	0x08003215
 8003194:	0800335b 	.word	0x0800335b
 8003198:	0800335b 	.word	0x0800335b
 800319c:	0800335b 	.word	0x0800335b
 80031a0:	08003257 	.word	0x08003257
 80031a4:	0800335b 	.word	0x0800335b
 80031a8:	0800335b 	.word	0x0800335b
 80031ac:	0800335b 	.word	0x0800335b
 80031b0:	08003297 	.word	0x08003297
 80031b4:	0800335b 	.word	0x0800335b
 80031b8:	0800335b 	.word	0x0800335b
 80031bc:	0800335b 	.word	0x0800335b
 80031c0:	080032d9 	.word	0x080032d9
 80031c4:	0800335b 	.word	0x0800335b
 80031c8:	0800335b 	.word	0x0800335b
 80031cc:	0800335b 	.word	0x0800335b
 80031d0:	08003319 	.word	0x08003319
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fa66 	bl	80036ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0208 	orr.w	r2, r2, #8
 80031ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0204 	bic.w	r2, r2, #4
 80031fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6999      	ldr	r1, [r3, #24]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	619a      	str	r2, [r3, #24]
      break;
 8003212:	e0a5      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fab8 	bl	8003790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6999      	ldr	r1, [r3, #24]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	021a      	lsls	r2, r3, #8
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	619a      	str	r2, [r3, #24]
      break;
 8003254:	e084      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fb0f 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0208 	orr.w	r2, r2, #8
 8003270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0204 	bic.w	r2, r2, #4
 8003280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69d9      	ldr	r1, [r3, #28]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	61da      	str	r2, [r3, #28]
      break;
 8003294:	e064      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fb65 	bl	800396c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69d9      	ldr	r1, [r3, #28]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	61da      	str	r2, [r3, #28]
      break;
 80032d6:	e043      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fb9c 	bl	8003a1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003316:	e023      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fbce 	bl	8003ac0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003332:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	021a      	lsls	r2, r3, #8
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003358:	e002      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	75fb      	strb	r3, [r7, #23]
      break;
 800335e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003368:	7dfb      	ldrb	r3, [r7, #23]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop

08003374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIM_ConfigClockSource+0x1c>
 800338c:	2302      	movs	r3, #2
 800338e:	e0b4      	b.n	80034fa <HAL_TIM_ConfigClockSource+0x186>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	4b56      	ldr	r3, [pc, #344]	; (8003504 <HAL_TIM_ConfigClockSource+0x190>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	d03e      	beq.n	8003448 <HAL_TIM_ConfigClockSource+0xd4>
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ce:	f200 8087 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	f000 8086 	beq.w	80034e6 <HAL_TIM_ConfigClockSource+0x172>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d87f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b70      	cmp	r3, #112	; 0x70
 80033e2:	d01a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xa6>
 80033e4:	2b70      	cmp	r3, #112	; 0x70
 80033e6:	d87b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b60      	cmp	r3, #96	; 0x60
 80033ea:	d050      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x11a>
 80033ec:	2b60      	cmp	r3, #96	; 0x60
 80033ee:	d877      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b50      	cmp	r3, #80	; 0x50
 80033f2:	d03c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xfa>
 80033f4:	2b50      	cmp	r3, #80	; 0x50
 80033f6:	d873      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d058      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x13a>
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d86f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b30      	cmp	r3, #48	; 0x30
 8003402:	d064      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d86b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d060      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d867      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05c      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d05a      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	e062      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f000 fc17 	bl	8003c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800343c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
      break;
 8003446:	e04f      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f000 fc00 	bl	8003c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e03c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	461a      	mov	r2, r3
 800347c:	f000 fb74 	bl	8003b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2150      	movs	r1, #80	; 0x50
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fbcd 	bl	8003c26 <TIM_ITRx_SetConfig>
      break;
 800348c:	e02c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	461a      	mov	r2, r3
 800349c:	f000 fb93 	bl	8003bc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2160      	movs	r1, #96	; 0x60
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fbbd 	bl	8003c26 <TIM_ITRx_SetConfig>
      break;
 80034ac:	e01c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 fb54 	bl	8003b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fbad 	bl	8003c26 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e00c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fba4 	bl	8003c26 <TIM_ITRx_SetConfig>
      break;
 80034de:	e003      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e000      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	fffeff88 	.word	0xfffeff88

08003508 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a40      	ldr	r2, [pc, #256]	; (8003680 <TIM_Base_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358a:	d00f      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3d      	ldr	r2, [pc, #244]	; (8003684 <TIM_Base_SetConfig+0x118>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3c      	ldr	r2, [pc, #240]	; (8003688 <TIM_Base_SetConfig+0x11c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3b      	ldr	r2, [pc, #236]	; (800368c <TIM_Base_SetConfig+0x120>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3a      	ldr	r2, [pc, #232]	; (8003690 <TIM_Base_SetConfig+0x124>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <TIM_Base_SetConfig+0x114>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d02b      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d027      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2c      	ldr	r2, [pc, #176]	; (8003684 <TIM_Base_SetConfig+0x118>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d023      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2b      	ldr	r2, [pc, #172]	; (8003688 <TIM_Base_SetConfig+0x11c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01f      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2a      	ldr	r2, [pc, #168]	; (800368c <TIM_Base_SetConfig+0x120>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01b      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a29      	ldr	r2, [pc, #164]	; (8003690 <TIM_Base_SetConfig+0x124>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d017      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a28      	ldr	r2, [pc, #160]	; (8003694 <TIM_Base_SetConfig+0x128>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a27      	ldr	r2, [pc, #156]	; (8003698 <TIM_Base_SetConfig+0x12c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00f      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a26      	ldr	r2, [pc, #152]	; (800369c <TIM_Base_SetConfig+0x130>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00b      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a25      	ldr	r2, [pc, #148]	; (80036a0 <TIM_Base_SetConfig+0x134>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a24      	ldr	r2, [pc, #144]	; (80036a4 <TIM_Base_SetConfig+0x138>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <TIM_Base_SetConfig+0x13c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <TIM_Base_SetConfig+0x114>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_Base_SetConfig+0xf8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <TIM_Base_SetConfig+0x124>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d103      	bne.n	800366c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	615a      	str	r2, [r3, #20]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40010400 	.word	0x40010400
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800
 80036a0:	40001800 	.word	0x40001800
 80036a4:	40001c00 	.word	0x40001c00
 80036a8:	40002000 	.word	0x40002000

080036ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0201 	bic.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <TIM_OC1_SetConfig+0xd8>)
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 0302 	bic.w	r3, r3, #2
 80036f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <TIM_OC1_SetConfig+0xdc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_OC1_SetConfig+0x64>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a20      	ldr	r2, [pc, #128]	; (800378c <TIM_OC1_SetConfig+0xe0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10c      	bne.n	800372a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0308 	bic.w	r3, r3, #8
 8003716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a16      	ldr	r2, [pc, #88]	; (8003788 <TIM_OC1_SetConfig+0xdc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_OC1_SetConfig+0x8e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <TIM_OC1_SetConfig+0xe0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d111      	bne.n	800375e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	621a      	str	r2, [r3, #32]
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	fffeff8f 	.word	0xfffeff8f
 8003788:	40010000 	.word	0x40010000
 800378c:	40010400 	.word	0x40010400

08003790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0210 	bic.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <TIM_OC2_SetConfig+0xe4>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a23      	ldr	r2, [pc, #140]	; (8003878 <TIM_OC2_SetConfig+0xe8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC2_SetConfig+0x68>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a22      	ldr	r2, [pc, #136]	; (800387c <TIM_OC2_SetConfig+0xec>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a18      	ldr	r2, [pc, #96]	; (8003878 <TIM_OC2_SetConfig+0xe8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_OC2_SetConfig+0x94>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a17      	ldr	r2, [pc, #92]	; (800387c <TIM_OC2_SetConfig+0xec>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d113      	bne.n	800384c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	feff8fff 	.word	0xfeff8fff
 8003878:	40010000 	.word	0x40010000
 800387c:	40010400 	.word	0x40010400

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <TIM_OC3_SetConfig+0xe0>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_OC3_SetConfig+0x66>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a21      	ldr	r2, [pc, #132]	; (8003968 <TIM_OC3_SetConfig+0xe8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a17      	ldr	r2, [pc, #92]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_OC3_SetConfig+0x92>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a16      	ldr	r2, [pc, #88]	; (8003968 <TIM_OC3_SetConfig+0xe8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	fffeff8f 	.word	0xfffeff8f
 8003964:	40010000 	.word	0x40010000
 8003968:	40010400 	.word	0x40010400

0800396c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <TIM_OC4_SetConfig+0xa4>)
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <TIM_OC4_SetConfig+0xa8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC4_SetConfig+0x68>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <TIM_OC4_SetConfig+0xac>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d109      	bne.n	80039e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	feff8fff 	.word	0xfeff8fff
 8003a14:	40010000 	.word	0x40010000
 8003a18:	40010400 	.word	0x40010400

08003a1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <TIM_OC5_SetConfig+0x98>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <TIM_OC5_SetConfig+0x9c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <TIM_OC5_SetConfig+0x5e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a11      	ldr	r2, [pc, #68]	; (8003abc <TIM_OC5_SetConfig+0xa0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d109      	bne.n	8003a8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	621a      	str	r2, [r3, #32]
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	fffeff8f 	.word	0xfffeff8f
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40010400 	.word	0x40010400

08003ac0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <TIM_OC6_SetConfig+0x9c>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	051b      	lsls	r3, r3, #20
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <TIM_OC6_SetConfig+0xa0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_OC6_SetConfig+0x60>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <TIM_OC6_SetConfig+0xa4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d109      	bne.n	8003b34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	029b      	lsls	r3, r3, #10
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	feff8fff 	.word	0xfeff8fff
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40010400 	.word	0x40010400

08003b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0201 	bic.w	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f023 030a 	bic.w	r3, r3, #10
 8003ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b087      	sub	sp, #28
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f023 0210 	bic.w	r2, r3, #16
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	031b      	lsls	r3, r3, #12
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f043 0307 	orr.w	r3, r3, #7
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	609a      	str	r2, [r3, #8]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2201      	movs	r2, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1a      	ldr	r2, [r3, #32]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e06d      	b.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a30      	ldr	r2, [pc, #192]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2f      	ldr	r2, [pc, #188]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a20      	ldr	r2, [pc, #128]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d72:	d01d      	beq.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d10c      	bne.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40010400 	.word	0x40010400
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40001800 	.word	0x40001800

08003e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e040      	b.n	8003ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc ff36 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fc9a 	bl	80047b8 <UART_SetConfig>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fef0 	bl	8004c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 ff77 	bl	8004dc0 <UART_CheckIdleState>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	f040 8081 	bne.w	8003ff8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Transmit+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e079      	b.n	8003ffa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Transmit+0x38>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e072      	b.n	8003ffa <HAL_UART_Transmit+0x11e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2221      	movs	r2, #33	; 0x21
 8003f28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2a:	f7fd f823 	bl	8000f74 <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d108      	bne.n	8003f5c <HAL_UART_Transmit+0x80>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e003      	b.n	8003f64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f6c:	e02c      	b.n	8003fc8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 ff6a 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e038      	b.n	8003ffa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	e007      	b.n	8003fb6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1cc      	bne.n	8003f6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2140      	movs	r1, #64	; 0x40
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 ff37 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e005      	b.n	8003ffa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b08a      	sub	sp, #40	; 0x28
 8004006:	af02      	add	r7, sp, #8
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004016:	2b20      	cmp	r3, #32
 8004018:	f040 80be 	bne.w	8004198 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Receive+0x26>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0b6      	b.n	800419a <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_UART_Receive+0x38>
 8004036:	2302      	movs	r3, #2
 8004038:	e0af      	b.n	800419a <HAL_UART_Receive+0x198>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2222      	movs	r2, #34	; 0x22
 800404e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004056:	f7fc ff8d 	bl	8000f74 <HAL_GetTick>
 800405a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d10e      	bne.n	8004094 <HAL_UART_Receive+0x92>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <HAL_UART_Receive+0x88>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004088:	e02d      	b.n	80040e6 <HAL_UART_Receive+0xe4>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004092:	e028      	b.n	80040e6 <HAL_UART_Receive+0xe4>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_UART_Receive+0xb6>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_UART_Receive+0xac>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	22ff      	movs	r2, #255	; 0xff
 80040a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ac:	e01b      	b.n	80040e6 <HAL_UART_Receive+0xe4>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	227f      	movs	r2, #127	; 0x7f
 80040b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040b6:	e016      	b.n	80040e6 <HAL_UART_Receive+0xe4>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040c0:	d10d      	bne.n	80040de <HAL_UART_Receive+0xdc>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_UART_Receive+0xd2>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	227f      	movs	r2, #127	; 0x7f
 80040ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040d2:	e008      	b.n	80040e6 <HAL_UART_Receive+0xe4>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	223f      	movs	r2, #63	; 0x3f
 80040d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040dc:	e003      	b.n	80040e6 <HAL_UART_Receive+0xe4>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040ec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	d108      	bne.n	800410a <HAL_UART_Receive+0x108>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e003      	b.n	8004112 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800411a:	e032      	b.n	8004182 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2200      	movs	r2, #0
 8004124:	2120      	movs	r1, #32
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fe93 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e031      	b.n	800419a <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10c      	bne.n	8004156 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	b29a      	uxth	r2, r3
 8004144:	8a7b      	ldrh	r3, [r7, #18]
 8004146:	4013      	ands	r3, r2
 8004148:	b29a      	uxth	r2, r3
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3302      	adds	r3, #2
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e00c      	b.n	8004170 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	b2da      	uxtb	r2, r3
 800415e:	8a7b      	ldrh	r3, [r7, #18]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4013      	ands	r3, r2
 8004164:	b2da      	uxtb	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1c6      	bne.n	800411c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b0ba      	sub	sp, #232	; 0xe8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80041d2:	4013      	ands	r3, r2
 80041d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d115      	bne.n	800420c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00f      	beq.n	800420c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 82a4 	beq.w	800474a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
      }
      return;
 800420a:	e29e      	b.n	800474a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800420c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8117 	beq.w	8004444 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004222:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004226:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_UART_IRQHandler+0x298>)
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 810a 	beq.w	8004444 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <HAL_UART_IRQHandler+0xbc>
 800423c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d011      	beq.n	8004290 <HAL_UART_IRQHandler+0xec>
 800426c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2202      	movs	r2, #2
 800427e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004286:	f043 0204 	orr.w	r2, r3, #4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d011      	beq.n	80042c0 <HAL_UART_IRQHandler+0x11c>
 800429c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2204      	movs	r2, #4
 80042ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b6:	f043 0202 	orr.w	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d017      	beq.n	80042fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2208      	movs	r2, #8
 80042ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f2:	f043 0208 	orr.w	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004304:	2b00      	cmp	r3, #0
 8004306:	d012      	beq.n	800432e <HAL_UART_IRQHandler+0x18a>
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800431c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 820a 	beq.w	800474e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d005      	beq.n	8004386 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800437a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800437e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004382:	2b00      	cmp	r3, #0
 8004384:	d04f      	beq.n	8004426 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fe27 	bl	8004fda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d141      	bne.n	800441e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1d9      	bne.n	800439a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d013      	beq.n	8004416 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <HAL_UART_IRQHandler+0x29c>)
 80043f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc ff6b 	bl	80012d6 <HAL_DMA_Abort_IT>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d017      	beq.n	8004436 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004410:	4610      	mov	r0, r2
 8004412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	e00f      	b.n	8004436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9ae 	bl	8004778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	e00b      	b.n	8004436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9aa 	bl	8004778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	e007      	b.n	8004436 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f9a6 	bl	8004778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004434:	e18b      	b.n	800474e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004436:	bf00      	nop
    return;
 8004438:	e189      	b.n	800474e <HAL_UART_IRQHandler+0x5aa>
 800443a:	bf00      	nop
 800443c:	04000120 	.word	0x04000120
 8004440:	080050a1 	.word	0x080050a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004448:	2b01      	cmp	r3, #1
 800444a:	f040 8144 	bne.w	80046d6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800444e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 813d 	beq.w	80046d6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800445c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8136 	beq.w	80046d6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2210      	movs	r2, #16
 8004470:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	f040 80b2 	bne.w	80045e6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800448e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 815d 	beq.w	8004752 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800449e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044a2:	429a      	cmp	r2, r3
 80044a4:	f080 8155 	bcs.w	8004752 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044bc:	f000 8085 	beq.w	80045ca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1da      	bne.n	80044c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800451a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800452e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e1      	bne.n	800450a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3308      	adds	r3, #8
 800454c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800456a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800456c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e3      	bne.n	8004546 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459a:	f023 0310 	bic.w	r3, r3, #16
 800459e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80045ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e4      	bne.n	800458a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fc fe16 	bl	80011f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	b29b      	uxth	r3, r3
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8d4 	bl	800478c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045e4:	e0b5      	b.n	8004752 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80a7 	beq.w	8004756 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80a2 	beq.w	8004756 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004634:	647b      	str	r3, [r7, #68]	; 0x44
 8004636:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800463a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e4      	bne.n	8004612 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	623b      	str	r3, [r7, #32]
   return(result);
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3308      	adds	r3, #8
 8004668:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800466c:	633a      	str	r2, [r7, #48]	; 0x30
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e3      	bne.n	8004648 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	617b      	str	r3, [r7, #20]
   return(result);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e4      	bne.n	8004692 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f85c 	bl	800478c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046d4:	e03f      	b.n	8004756 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00e      	beq.n	8004700 <HAL_UART_IRQHandler+0x55c>
 80046e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f853 	bl	80047a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046fe:	e02d      	b.n	800475c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00e      	beq.n	800472a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01c      	beq.n	800475a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
    }
    return;
 8004728:	e017      	b.n	800475a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d012      	beq.n	800475c <HAL_UART_IRQHandler+0x5b8>
 8004736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fcc2 	bl	80050cc <UART_EndTransmit_IT>
    return;
 8004748:	e008      	b.n	800475c <HAL_UART_IRQHandler+0x5b8>
      return;
 800474a:	bf00      	nop
 800474c:	e006      	b.n	800475c <HAL_UART_IRQHandler+0x5b8>
    return;
 800474e:	bf00      	nop
 8004750:	e004      	b.n	800475c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004752:	bf00      	nop
 8004754:	e002      	b.n	800475c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004756:	bf00      	nop
 8004758:	e000      	b.n	800475c <HAL_UART_IRQHandler+0x5b8>
    return;
 800475a:	bf00      	nop
  }

}
 800475c:	37e8      	adds	r7, #232	; 0xe8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop

08004764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4ba7      	ldr	r3, [pc, #668]	; (8004a80 <UART_SetConfig+0x2c8>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a95      	ldr	r2, [pc, #596]	; (8004a84 <UART_SetConfig+0x2cc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d120      	bne.n	8004876 <UART_SetConfig+0xbe>
 8004834:	4b94      	ldr	r3, [pc, #592]	; (8004a88 <UART_SetConfig+0x2d0>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b03      	cmp	r3, #3
 8004840:	d816      	bhi.n	8004870 <UART_SetConfig+0xb8>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <UART_SetConfig+0x90>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	08004859 	.word	0x08004859
 800484c:	08004865 	.word	0x08004865
 8004850:	0800485f 	.word	0x0800485f
 8004854:	0800486b 	.word	0x0800486b
 8004858:	2301      	movs	r3, #1
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e14f      	b.n	8004afe <UART_SetConfig+0x346>
 800485e:	2302      	movs	r3, #2
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e14c      	b.n	8004afe <UART_SetConfig+0x346>
 8004864:	2304      	movs	r3, #4
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e149      	b.n	8004afe <UART_SetConfig+0x346>
 800486a:	2308      	movs	r3, #8
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e146      	b.n	8004afe <UART_SetConfig+0x346>
 8004870:	2310      	movs	r3, #16
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e143      	b.n	8004afe <UART_SetConfig+0x346>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a84      	ldr	r2, [pc, #528]	; (8004a8c <UART_SetConfig+0x2d4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d132      	bne.n	80048e6 <UART_SetConfig+0x12e>
 8004880:	4b81      	ldr	r3, [pc, #516]	; (8004a88 <UART_SetConfig+0x2d0>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d828      	bhi.n	80048e0 <UART_SetConfig+0x128>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <UART_SetConfig+0xdc>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048c9 	.word	0x080048c9
 8004898:	080048e1 	.word	0x080048e1
 800489c:	080048e1 	.word	0x080048e1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	080048e1 	.word	0x080048e1
 80048b4:	080048cf 	.word	0x080048cf
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048e1 	.word	0x080048e1
 80048c4:	080048db 	.word	0x080048db
 80048c8:	2300      	movs	r3, #0
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e117      	b.n	8004afe <UART_SetConfig+0x346>
 80048ce:	2302      	movs	r3, #2
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e114      	b.n	8004afe <UART_SetConfig+0x346>
 80048d4:	2304      	movs	r3, #4
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e111      	b.n	8004afe <UART_SetConfig+0x346>
 80048da:	2308      	movs	r3, #8
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e10e      	b.n	8004afe <UART_SetConfig+0x346>
 80048e0:	2310      	movs	r3, #16
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e10b      	b.n	8004afe <UART_SetConfig+0x346>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a69      	ldr	r2, [pc, #420]	; (8004a90 <UART_SetConfig+0x2d8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d120      	bne.n	8004932 <UART_SetConfig+0x17a>
 80048f0:	4b65      	ldr	r3, [pc, #404]	; (8004a88 <UART_SetConfig+0x2d0>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048fa:	2b30      	cmp	r3, #48	; 0x30
 80048fc:	d013      	beq.n	8004926 <UART_SetConfig+0x16e>
 80048fe:	2b30      	cmp	r3, #48	; 0x30
 8004900:	d814      	bhi.n	800492c <UART_SetConfig+0x174>
 8004902:	2b20      	cmp	r3, #32
 8004904:	d009      	beq.n	800491a <UART_SetConfig+0x162>
 8004906:	2b20      	cmp	r3, #32
 8004908:	d810      	bhi.n	800492c <UART_SetConfig+0x174>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <UART_SetConfig+0x15c>
 800490e:	2b10      	cmp	r3, #16
 8004910:	d006      	beq.n	8004920 <UART_SetConfig+0x168>
 8004912:	e00b      	b.n	800492c <UART_SetConfig+0x174>
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e0f1      	b.n	8004afe <UART_SetConfig+0x346>
 800491a:	2302      	movs	r3, #2
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e0ee      	b.n	8004afe <UART_SetConfig+0x346>
 8004920:	2304      	movs	r3, #4
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0eb      	b.n	8004afe <UART_SetConfig+0x346>
 8004926:	2308      	movs	r3, #8
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e0e8      	b.n	8004afe <UART_SetConfig+0x346>
 800492c:	2310      	movs	r3, #16
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e0e5      	b.n	8004afe <UART_SetConfig+0x346>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a57      	ldr	r2, [pc, #348]	; (8004a94 <UART_SetConfig+0x2dc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d120      	bne.n	800497e <UART_SetConfig+0x1c6>
 800493c:	4b52      	ldr	r3, [pc, #328]	; (8004a88 <UART_SetConfig+0x2d0>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004946:	2bc0      	cmp	r3, #192	; 0xc0
 8004948:	d013      	beq.n	8004972 <UART_SetConfig+0x1ba>
 800494a:	2bc0      	cmp	r3, #192	; 0xc0
 800494c:	d814      	bhi.n	8004978 <UART_SetConfig+0x1c0>
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d009      	beq.n	8004966 <UART_SetConfig+0x1ae>
 8004952:	2b80      	cmp	r3, #128	; 0x80
 8004954:	d810      	bhi.n	8004978 <UART_SetConfig+0x1c0>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <UART_SetConfig+0x1a8>
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d006      	beq.n	800496c <UART_SetConfig+0x1b4>
 800495e:	e00b      	b.n	8004978 <UART_SetConfig+0x1c0>
 8004960:	2300      	movs	r3, #0
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e0cb      	b.n	8004afe <UART_SetConfig+0x346>
 8004966:	2302      	movs	r3, #2
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e0c8      	b.n	8004afe <UART_SetConfig+0x346>
 800496c:	2304      	movs	r3, #4
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e0c5      	b.n	8004afe <UART_SetConfig+0x346>
 8004972:	2308      	movs	r3, #8
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e0c2      	b.n	8004afe <UART_SetConfig+0x346>
 8004978:	2310      	movs	r3, #16
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e0bf      	b.n	8004afe <UART_SetConfig+0x346>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a45      	ldr	r2, [pc, #276]	; (8004a98 <UART_SetConfig+0x2e0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d125      	bne.n	80049d4 <UART_SetConfig+0x21c>
 8004988:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <UART_SetConfig+0x2d0>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004996:	d017      	beq.n	80049c8 <UART_SetConfig+0x210>
 8004998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499c:	d817      	bhi.n	80049ce <UART_SetConfig+0x216>
 800499e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a2:	d00b      	beq.n	80049bc <UART_SetConfig+0x204>
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d811      	bhi.n	80049ce <UART_SetConfig+0x216>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <UART_SetConfig+0x1fe>
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b2:	d006      	beq.n	80049c2 <UART_SetConfig+0x20a>
 80049b4:	e00b      	b.n	80049ce <UART_SetConfig+0x216>
 80049b6:	2300      	movs	r3, #0
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e0a0      	b.n	8004afe <UART_SetConfig+0x346>
 80049bc:	2302      	movs	r3, #2
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e09d      	b.n	8004afe <UART_SetConfig+0x346>
 80049c2:	2304      	movs	r3, #4
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e09a      	b.n	8004afe <UART_SetConfig+0x346>
 80049c8:	2308      	movs	r3, #8
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	e097      	b.n	8004afe <UART_SetConfig+0x346>
 80049ce:	2310      	movs	r3, #16
 80049d0:	77fb      	strb	r3, [r7, #31]
 80049d2:	e094      	b.n	8004afe <UART_SetConfig+0x346>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a30      	ldr	r2, [pc, #192]	; (8004a9c <UART_SetConfig+0x2e4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d125      	bne.n	8004a2a <UART_SetConfig+0x272>
 80049de:	4b2a      	ldr	r3, [pc, #168]	; (8004a88 <UART_SetConfig+0x2d0>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ec:	d017      	beq.n	8004a1e <UART_SetConfig+0x266>
 80049ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049f2:	d817      	bhi.n	8004a24 <UART_SetConfig+0x26c>
 80049f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f8:	d00b      	beq.n	8004a12 <UART_SetConfig+0x25a>
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fe:	d811      	bhi.n	8004a24 <UART_SetConfig+0x26c>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <UART_SetConfig+0x254>
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d006      	beq.n	8004a18 <UART_SetConfig+0x260>
 8004a0a:	e00b      	b.n	8004a24 <UART_SetConfig+0x26c>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e075      	b.n	8004afe <UART_SetConfig+0x346>
 8004a12:	2302      	movs	r3, #2
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e072      	b.n	8004afe <UART_SetConfig+0x346>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e06f      	b.n	8004afe <UART_SetConfig+0x346>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e06c      	b.n	8004afe <UART_SetConfig+0x346>
 8004a24:	2310      	movs	r3, #16
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e069      	b.n	8004afe <UART_SetConfig+0x346>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <UART_SetConfig+0x2e8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d137      	bne.n	8004aa4 <UART_SetConfig+0x2ec>
 8004a34:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <UART_SetConfig+0x2d0>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a42:	d017      	beq.n	8004a74 <UART_SetConfig+0x2bc>
 8004a44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a48:	d817      	bhi.n	8004a7a <UART_SetConfig+0x2c2>
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4e:	d00b      	beq.n	8004a68 <UART_SetConfig+0x2b0>
 8004a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a54:	d811      	bhi.n	8004a7a <UART_SetConfig+0x2c2>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <UART_SetConfig+0x2aa>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5e:	d006      	beq.n	8004a6e <UART_SetConfig+0x2b6>
 8004a60:	e00b      	b.n	8004a7a <UART_SetConfig+0x2c2>
 8004a62:	2300      	movs	r3, #0
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e04a      	b.n	8004afe <UART_SetConfig+0x346>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e047      	b.n	8004afe <UART_SetConfig+0x346>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	77fb      	strb	r3, [r7, #31]
 8004a72:	e044      	b.n	8004afe <UART_SetConfig+0x346>
 8004a74:	2308      	movs	r3, #8
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e041      	b.n	8004afe <UART_SetConfig+0x346>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e03e      	b.n	8004afe <UART_SetConfig+0x346>
 8004a80:	efff69f3 	.word	0xefff69f3
 8004a84:	40011000 	.word	0x40011000
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	40004400 	.word	0x40004400
 8004a90:	40004800 	.word	0x40004800
 8004a94:	40004c00 	.word	0x40004c00
 8004a98:	40005000 	.word	0x40005000
 8004a9c:	40011400 	.word	0x40011400
 8004aa0:	40007800 	.word	0x40007800
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a71      	ldr	r2, [pc, #452]	; (8004c70 <UART_SetConfig+0x4b8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d125      	bne.n	8004afa <UART_SetConfig+0x342>
 8004aae:	4b71      	ldr	r3, [pc, #452]	; (8004c74 <UART_SetConfig+0x4bc>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ab8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004abc:	d017      	beq.n	8004aee <UART_SetConfig+0x336>
 8004abe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ac2:	d817      	bhi.n	8004af4 <UART_SetConfig+0x33c>
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d00b      	beq.n	8004ae2 <UART_SetConfig+0x32a>
 8004aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ace:	d811      	bhi.n	8004af4 <UART_SetConfig+0x33c>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <UART_SetConfig+0x324>
 8004ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad8:	d006      	beq.n	8004ae8 <UART_SetConfig+0x330>
 8004ada:	e00b      	b.n	8004af4 <UART_SetConfig+0x33c>
 8004adc:	2300      	movs	r3, #0
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e00d      	b.n	8004afe <UART_SetConfig+0x346>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e00a      	b.n	8004afe <UART_SetConfig+0x346>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e007      	b.n	8004afe <UART_SetConfig+0x346>
 8004aee:	2308      	movs	r3, #8
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e004      	b.n	8004afe <UART_SetConfig+0x346>
 8004af4:	2310      	movs	r3, #16
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e001      	b.n	8004afe <UART_SetConfig+0x346>
 8004afa:	2310      	movs	r3, #16
 8004afc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b06:	d15a      	bne.n	8004bbe <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004b08:	7ffb      	ldrb	r3, [r7, #31]
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d827      	bhi.n	8004b5e <UART_SetConfig+0x3a6>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0x35c>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	08004b5f 	.word	0x08004b5f
 8004b24:	08004b4f 	.word	0x08004b4f
 8004b28:	08004b5f 	.word	0x08004b5f
 8004b2c:	08004b5f 	.word	0x08004b5f
 8004b30:	08004b5f 	.word	0x08004b5f
 8004b34:	08004b57 	.word	0x08004b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fd fbe6 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	61b8      	str	r0, [r7, #24]
        break;
 8004b3e:	e013      	b.n	8004b68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fd fbf6 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8004b44:	61b8      	str	r0, [r7, #24]
        break;
 8004b46:	e00f      	b.n	8004b68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b4b      	ldr	r3, [pc, #300]	; (8004c78 <UART_SetConfig+0x4c0>)
 8004b4a:	61bb      	str	r3, [r7, #24]
        break;
 8004b4c:	e00c      	b.n	8004b68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fd faed 	bl	800212c <HAL_RCC_GetSysClockFreq>
 8004b52:	61b8      	str	r0, [r7, #24]
        break;
 8004b54:	e008      	b.n	8004b68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	61bb      	str	r3, [r7, #24]
        break;
 8004b5c:	e004      	b.n	8004b68 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	77bb      	strb	r3, [r7, #30]
        break;
 8004b66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d074      	beq.n	8004c58 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	005a      	lsls	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	441a      	add	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b0f      	cmp	r3, #15
 8004b88:	d916      	bls.n	8004bb8 <UART_SetConfig+0x400>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b90:	d212      	bcs.n	8004bb8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f023 030f 	bic.w	r3, r3, #15
 8004b9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	89fa      	ldrh	r2, [r7, #14]
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	e04f      	b.n	8004c58 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	77bb      	strb	r3, [r7, #30]
 8004bbc:	e04c      	b.n	8004c58 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bbe:	7ffb      	ldrb	r3, [r7, #31]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d828      	bhi.n	8004c16 <UART_SetConfig+0x45e>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0x414>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fd fb8a 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	61b8      	str	r0, [r7, #24]
        break;
 8004bf6:	e013      	b.n	8004c20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fd fb9a 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	61b8      	str	r0, [r7, #24]
        break;
 8004bfe:	e00f      	b.n	8004c20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <UART_SetConfig+0x4c0>)
 8004c02:	61bb      	str	r3, [r7, #24]
        break;
 8004c04:	e00c      	b.n	8004c20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fd fa91 	bl	800212c <HAL_RCC_GetSysClockFreq>
 8004c0a:	61b8      	str	r0, [r7, #24]
        break;
 8004c0c:	e008      	b.n	8004c20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	61bb      	str	r3, [r7, #24]
        break;
 8004c14:	e004      	b.n	8004c20 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c1e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d018      	beq.n	8004c58 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	085a      	lsrs	r2, r3, #1
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	441a      	add	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b0f      	cmp	r3, #15
 8004c3e:	d909      	bls.n	8004c54 <UART_SetConfig+0x49c>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c46:	d205      	bcs.n	8004c54 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	e001      	b.n	8004c58 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c64:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40007c00 	.word	0x40007c00
 8004c74:	40023800 	.word	0x40023800
 8004c78:	00f42400 	.word	0x00f42400

08004c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7a:	d10a      	bne.n	8004d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd0:	f7fc f8d0 	bl	8000f74 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d10e      	bne.n	8004e02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f82d 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e023      	b.n	8004e4a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d10e      	bne.n	8004e2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f817 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e00d      	b.n	8004e4a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b09c      	sub	sp, #112	; 0x70
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e62:	e0a5      	b.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	f000 80a1 	beq.w	8004fb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fc f881 	bl	8000f74 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d13e      	bne.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e98:	667b      	str	r3, [r7, #100]	; 0x64
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e6      	bne.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ed6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e067      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d04f      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1e:	d147      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e6      	bne.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f7c:	623a      	str	r2, [r7, #32]
 8004f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69f9      	ldr	r1, [r7, #28]
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e010      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69da      	ldr	r2, [r3, #28]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	f43f af4a 	beq.w	8004e64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3770      	adds	r7, #112	; 0x70
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b095      	sub	sp, #84	; 0x54
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005000:	643b      	str	r3, [r7, #64]	; 0x40
 8005002:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	61fb      	str	r3, [r7, #28]
   return(result);
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005034:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800503a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504c:	2b01      	cmp	r3, #1
 800504e:	d118      	bne.n	8005082 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	60bb      	str	r3, [r7, #8]
   return(result);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f023 0310 	bic.w	r3, r3, #16
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6979      	ldr	r1, [r7, #20]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	613b      	str	r3, [r7, #16]
   return(result);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005094:	bf00      	nop
 8005096:	3754      	adds	r7, #84	; 0x54
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff fb5a 	bl	8004778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e6      	bne.n	80050d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fb26 	bl	8004764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005118:	bf00      	nop
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005120:	b084      	sub	sp, #16
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	f107 001c 	add.w	r0, r7, #28
 800512e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	2b01      	cmp	r3, #1
 8005136:	d120      	bne.n	800517a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	4b20      	ldr	r3, [pc, #128]	; (80051cc <USB_CoreInit+0xac>)
 800514a:	4013      	ands	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800515c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa92 	bl	8005698 <USB_CoreReset>
 8005174:	4603      	mov	r3, r0
 8005176:	73fb      	strb	r3, [r7, #15]
 8005178:	e010      	b.n	800519c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa86 	bl	8005698 <USB_CoreReset>
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d10b      	bne.n	80051ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f043 0206 	orr.w	r2, r3, #6
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051c6:	b004      	add	sp, #16
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	ffbdffbf 	.word	0xffbdffbf

080051d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 0201 	bic.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d115      	bne.n	8005240 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005220:	2001      	movs	r0, #1
 8005222:	f7fb feb3 	bl	8000f8c <HAL_Delay>
      ms++;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3301      	adds	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa25 	bl	800567c <USB_GetMode>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d01e      	beq.n	8005276 <USB_SetCurrentMode+0x84>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b31      	cmp	r3, #49	; 0x31
 800523c:	d9f0      	bls.n	8005220 <USB_SetCurrentMode+0x2e>
 800523e:	e01a      	b.n	8005276 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d115      	bne.n	8005272 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005252:	2001      	movs	r0, #1
 8005254:	f7fb fe9a 	bl	8000f8c <HAL_Delay>
      ms++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa0c 	bl	800567c <USB_GetMode>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <USB_SetCurrentMode+0x84>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b31      	cmp	r3, #49	; 0x31
 800526e:	d9f0      	bls.n	8005252 <USB_SetCurrentMode+0x60>
 8005270:	e001      	b.n	8005276 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e005      	b.n	8005282 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b32      	cmp	r3, #50	; 0x32
 800527a:	d101      	bne.n	8005280 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800528c:	b084      	sub	sp, #16
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800529a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	e009      	b.n	80052c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3340      	adds	r3, #64	; 0x40
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	3301      	adds	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b0e      	cmp	r3, #14
 80052c4:	d9f2      	bls.n	80052ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11c      	bne.n	8005306 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052da:	f043 0302 	orr.w	r3, r3, #2
 80052de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e005      	b.n	8005312 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005318:	461a      	mov	r2, r3
 800531a:	2300      	movs	r3, #0
 800531c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	4619      	mov	r1, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	461a      	mov	r2, r3
 800532e:	680b      	ldr	r3, [r1, #0]
 8005330:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	2b01      	cmp	r3, #1
 8005336:	d10c      	bne.n	8005352 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800533e:	2100      	movs	r1, #0
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f961 	bl	8005608 <USB_SetDevSpeed>
 8005346:	e008      	b.n	800535a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005348:	2101      	movs	r1, #1
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f95c 	bl	8005608 <USB_SetDevSpeed>
 8005350:	e003      	b.n	800535a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005352:	2103      	movs	r1, #3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f957 	bl	8005608 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800535a:	2110      	movs	r1, #16
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8f3 	bl	8005548 <USB_FlushTxFifo>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f91d 	bl	80055ac <USB_FlushRxFifo>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	461a      	mov	r2, r3
 8005384:	2300      	movs	r3, #0
 8005386:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538e:	461a      	mov	r2, r3
 8005390:	2300      	movs	r3, #0
 8005392:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	461a      	mov	r2, r3
 800539c:	2300      	movs	r3, #0
 800539e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	e043      	b.n	800542e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053bc:	d118      	bne.n	80053f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e013      	b.n	8005402 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	461a      	mov	r2, r3
 80053e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e008      	b.n	8005402 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	461a      	mov	r2, r3
 80053fe:	2300      	movs	r3, #0
 8005400:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	461a      	mov	r2, r3
 8005410:	2300      	movs	r3, #0
 8005412:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	461a      	mov	r2, r3
 8005422:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005426:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	3301      	adds	r3, #1
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	429a      	cmp	r2, r3
 8005434:	d3b7      	bcc.n	80053a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	e043      	b.n	80054c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005452:	d118      	bne.n	8005486 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	461a      	mov	r2, r3
 8005468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e013      	b.n	8005498 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	461a      	mov	r2, r3
 800547e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e008      	b.n	8005498 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	461a      	mov	r2, r3
 80054a6:	2300      	movs	r3, #0
 80054a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	3301      	adds	r3, #1
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d3b7      	bcc.n	800543c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f043 0210 	orr.w	r2, r3, #16
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <USB_DevInit+0x2b4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f043 0208 	orr.w	r2, r3, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800551e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d105      	bne.n	8005530 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <USB_DevInit+0x2b8>)
 800552a:	4313      	orrs	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800553c:	b004      	add	sp, #16
 800553e:	4770      	bx	lr
 8005540:	803c3800 	.word	0x803c3800
 8005544:	40000004 	.word	0x40000004

08005548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	4a12      	ldr	r2, [pc, #72]	; (80055a8 <USB_FlushTxFifo+0x60>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e01a      	b.n	800559c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	daf3      	bge.n	8005556 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	019b      	lsls	r3, r3, #6
 8005576:	f043 0220 	orr.w	r2, r3, #32
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3301      	adds	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <USB_FlushTxFifo+0x60>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e006      	b.n	800559c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b20      	cmp	r3, #32
 8005598:	d0f1      	beq.n	800557e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	00030d40 	.word	0x00030d40

080055ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3301      	adds	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	4a11      	ldr	r2, [pc, #68]	; (8005604 <USB_FlushRxFifo+0x58>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e017      	b.n	80055f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	daf3      	bge.n	80055b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2210      	movs	r2, #16
 80055d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3301      	adds	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	4a08      	ldr	r2, [pc, #32]	; (8005604 <USB_FlushRxFifo+0x58>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e006      	b.n	80055f8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d0f1      	beq.n	80055da <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	00030d40 	.word	0x00030d40

08005608 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005668:	f043 0302 	orr.w	r3, r3, #2
 800566c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f003 0301 	and.w	r3, r3, #1
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3301      	adds	r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <USB_CoreReset+0x60>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e01a      	b.n	80056ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	daf3      	bge.n	80056a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f043 0201 	orr.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <USB_CoreReset+0x60>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e006      	b.n	80056ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d0f1      	beq.n	80056cc <USB_CoreReset+0x34>

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	00030d40 	.word	0x00030d40

080056fc <__errno>:
 80056fc:	4b01      	ldr	r3, [pc, #4]	; (8005704 <__errno+0x8>)
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c

08005708 <__libc_init_array>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4d0d      	ldr	r5, [pc, #52]	; (8005740 <__libc_init_array+0x38>)
 800570c:	4c0d      	ldr	r4, [pc, #52]	; (8005744 <__libc_init_array+0x3c>)
 800570e:	1b64      	subs	r4, r4, r5
 8005710:	10a4      	asrs	r4, r4, #2
 8005712:	2600      	movs	r6, #0
 8005714:	42a6      	cmp	r6, r4
 8005716:	d109      	bne.n	800572c <__libc_init_array+0x24>
 8005718:	4d0b      	ldr	r5, [pc, #44]	; (8005748 <__libc_init_array+0x40>)
 800571a:	4c0c      	ldr	r4, [pc, #48]	; (800574c <__libc_init_array+0x44>)
 800571c:	f001 f912 	bl	8006944 <_init>
 8005720:	1b64      	subs	r4, r4, r5
 8005722:	10a4      	asrs	r4, r4, #2
 8005724:	2600      	movs	r6, #0
 8005726:	42a6      	cmp	r6, r4
 8005728:	d105      	bne.n	8005736 <__libc_init_array+0x2e>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005730:	4798      	blx	r3
 8005732:	3601      	adds	r6, #1
 8005734:	e7ee      	b.n	8005714 <__libc_init_array+0xc>
 8005736:	f855 3b04 	ldr.w	r3, [r5], #4
 800573a:	4798      	blx	r3
 800573c:	3601      	adds	r6, #1
 800573e:	e7f2      	b.n	8005726 <__libc_init_array+0x1e>
 8005740:	08006b5c 	.word	0x08006b5c
 8005744:	08006b5c 	.word	0x08006b5c
 8005748:	08006b5c 	.word	0x08006b5c
 800574c:	08006b60 	.word	0x08006b60

08005750 <memset>:
 8005750:	4402      	add	r2, r0
 8005752:	4603      	mov	r3, r0
 8005754:	4293      	cmp	r3, r2
 8005756:	d100      	bne.n	800575a <memset+0xa>
 8005758:	4770      	bx	lr
 800575a:	f803 1b01 	strb.w	r1, [r3], #1
 800575e:	e7f9      	b.n	8005754 <memset+0x4>

08005760 <siprintf>:
 8005760:	b40e      	push	{r1, r2, r3}
 8005762:	b500      	push	{lr}
 8005764:	b09c      	sub	sp, #112	; 0x70
 8005766:	ab1d      	add	r3, sp, #116	; 0x74
 8005768:	9002      	str	r0, [sp, #8]
 800576a:	9006      	str	r0, [sp, #24]
 800576c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005770:	4809      	ldr	r0, [pc, #36]	; (8005798 <siprintf+0x38>)
 8005772:	9107      	str	r1, [sp, #28]
 8005774:	9104      	str	r1, [sp, #16]
 8005776:	4909      	ldr	r1, [pc, #36]	; (800579c <siprintf+0x3c>)
 8005778:	f853 2b04 	ldr.w	r2, [r3], #4
 800577c:	9105      	str	r1, [sp, #20]
 800577e:	6800      	ldr	r0, [r0, #0]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	a902      	add	r1, sp, #8
 8005784:	f000 f896 	bl	80058b4 <_svfiprintf_r>
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	b01c      	add	sp, #112	; 0x70
 8005790:	f85d eb04 	ldr.w	lr, [sp], #4
 8005794:	b003      	add	sp, #12
 8005796:	4770      	bx	lr
 8005798:	2000000c 	.word	0x2000000c
 800579c:	ffff0208 	.word	0xffff0208

080057a0 <siscanf>:
 80057a0:	b40e      	push	{r1, r2, r3}
 80057a2:	b510      	push	{r4, lr}
 80057a4:	b09f      	sub	sp, #124	; 0x7c
 80057a6:	ac21      	add	r4, sp, #132	; 0x84
 80057a8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80057ac:	f854 2b04 	ldr.w	r2, [r4], #4
 80057b0:	9201      	str	r2, [sp, #4]
 80057b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80057b6:	9004      	str	r0, [sp, #16]
 80057b8:	9008      	str	r0, [sp, #32]
 80057ba:	f7fa fd41 	bl	8000240 <strlen>
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <siscanf+0x50>)
 80057c0:	9005      	str	r0, [sp, #20]
 80057c2:	9009      	str	r0, [sp, #36]	; 0x24
 80057c4:	930d      	str	r3, [sp, #52]	; 0x34
 80057c6:	480b      	ldr	r0, [pc, #44]	; (80057f4 <siscanf+0x54>)
 80057c8:	9a01      	ldr	r2, [sp, #4]
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	9403      	str	r4, [sp, #12]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9311      	str	r3, [sp, #68]	; 0x44
 80057d2:	9316      	str	r3, [sp, #88]	; 0x58
 80057d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80057dc:	a904      	add	r1, sp, #16
 80057de:	4623      	mov	r3, r4
 80057e0:	f000 f9c2 	bl	8005b68 <__ssvfiscanf_r>
 80057e4:	b01f      	add	sp, #124	; 0x7c
 80057e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ea:	b003      	add	sp, #12
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	080057f9 	.word	0x080057f9
 80057f4:	2000000c 	.word	0x2000000c

080057f8 <__seofread>:
 80057f8:	2000      	movs	r0, #0
 80057fa:	4770      	bx	lr

080057fc <__ssputs_r>:
 80057fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005800:	688e      	ldr	r6, [r1, #8]
 8005802:	429e      	cmp	r6, r3
 8005804:	4682      	mov	sl, r0
 8005806:	460c      	mov	r4, r1
 8005808:	4690      	mov	r8, r2
 800580a:	461f      	mov	r7, r3
 800580c:	d838      	bhi.n	8005880 <__ssputs_r+0x84>
 800580e:	898a      	ldrh	r2, [r1, #12]
 8005810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005814:	d032      	beq.n	800587c <__ssputs_r+0x80>
 8005816:	6825      	ldr	r5, [r4, #0]
 8005818:	6909      	ldr	r1, [r1, #16]
 800581a:	eba5 0901 	sub.w	r9, r5, r1
 800581e:	6965      	ldr	r5, [r4, #20]
 8005820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005828:	3301      	adds	r3, #1
 800582a:	444b      	add	r3, r9
 800582c:	106d      	asrs	r5, r5, #1
 800582e:	429d      	cmp	r5, r3
 8005830:	bf38      	it	cc
 8005832:	461d      	movcc	r5, r3
 8005834:	0553      	lsls	r3, r2, #21
 8005836:	d531      	bpl.n	800589c <__ssputs_r+0xa0>
 8005838:	4629      	mov	r1, r5
 800583a:	f000 ffdf 	bl	80067fc <_malloc_r>
 800583e:	4606      	mov	r6, r0
 8005840:	b950      	cbnz	r0, 8005858 <__ssputs_r+0x5c>
 8005842:	230c      	movs	r3, #12
 8005844:	f8ca 3000 	str.w	r3, [sl]
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005858:	6921      	ldr	r1, [r4, #16]
 800585a:	464a      	mov	r2, r9
 800585c:	f000 ff56 	bl	800670c <memcpy>
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	6126      	str	r6, [r4, #16]
 800586e:	6165      	str	r5, [r4, #20]
 8005870:	444e      	add	r6, r9
 8005872:	eba5 0509 	sub.w	r5, r5, r9
 8005876:	6026      	str	r6, [r4, #0]
 8005878:	60a5      	str	r5, [r4, #8]
 800587a:	463e      	mov	r6, r7
 800587c:	42be      	cmp	r6, r7
 800587e:	d900      	bls.n	8005882 <__ssputs_r+0x86>
 8005880:	463e      	mov	r6, r7
 8005882:	4632      	mov	r2, r6
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	4641      	mov	r1, r8
 8005888:	f000 ff4e 	bl	8006728 <memmove>
 800588c:	68a3      	ldr	r3, [r4, #8]
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	1b9b      	subs	r3, r3, r6
 8005892:	4432      	add	r2, r6
 8005894:	60a3      	str	r3, [r4, #8]
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	2000      	movs	r0, #0
 800589a:	e7db      	b.n	8005854 <__ssputs_r+0x58>
 800589c:	462a      	mov	r2, r5
 800589e:	f001 f807 	bl	80068b0 <_realloc_r>
 80058a2:	4606      	mov	r6, r0
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d1e1      	bne.n	800586c <__ssputs_r+0x70>
 80058a8:	6921      	ldr	r1, [r4, #16]
 80058aa:	4650      	mov	r0, sl
 80058ac:	f000 ff56 	bl	800675c <_free_r>
 80058b0:	e7c7      	b.n	8005842 <__ssputs_r+0x46>
	...

080058b4 <_svfiprintf_r>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	4698      	mov	r8, r3
 80058ba:	898b      	ldrh	r3, [r1, #12]
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	b09d      	sub	sp, #116	; 0x74
 80058c0:	4607      	mov	r7, r0
 80058c2:	460d      	mov	r5, r1
 80058c4:	4614      	mov	r4, r2
 80058c6:	d50e      	bpl.n	80058e6 <_svfiprintf_r+0x32>
 80058c8:	690b      	ldr	r3, [r1, #16]
 80058ca:	b963      	cbnz	r3, 80058e6 <_svfiprintf_r+0x32>
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	f000 ff95 	bl	80067fc <_malloc_r>
 80058d2:	6028      	str	r0, [r5, #0]
 80058d4:	6128      	str	r0, [r5, #16]
 80058d6:	b920      	cbnz	r0, 80058e2 <_svfiprintf_r+0x2e>
 80058d8:	230c      	movs	r3, #12
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	e0d1      	b.n	8005a86 <_svfiprintf_r+0x1d2>
 80058e2:	2340      	movs	r3, #64	; 0x40
 80058e4:	616b      	str	r3, [r5, #20]
 80058e6:	2300      	movs	r3, #0
 80058e8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ea:	2320      	movs	r3, #32
 80058ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f4:	2330      	movs	r3, #48	; 0x30
 80058f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005aa0 <_svfiprintf_r+0x1ec>
 80058fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fe:	f04f 0901 	mov.w	r9, #1
 8005902:	4623      	mov	r3, r4
 8005904:	469a      	mov	sl, r3
 8005906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800590a:	b10a      	cbz	r2, 8005910 <_svfiprintf_r+0x5c>
 800590c:	2a25      	cmp	r2, #37	; 0x25
 800590e:	d1f9      	bne.n	8005904 <_svfiprintf_r+0x50>
 8005910:	ebba 0b04 	subs.w	fp, sl, r4
 8005914:	d00b      	beq.n	800592e <_svfiprintf_r+0x7a>
 8005916:	465b      	mov	r3, fp
 8005918:	4622      	mov	r2, r4
 800591a:	4629      	mov	r1, r5
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff ff6d 	bl	80057fc <__ssputs_r>
 8005922:	3001      	adds	r0, #1
 8005924:	f000 80aa 	beq.w	8005a7c <_svfiprintf_r+0x1c8>
 8005928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592a:	445a      	add	r2, fp
 800592c:	9209      	str	r2, [sp, #36]	; 0x24
 800592e:	f89a 3000 	ldrb.w	r3, [sl]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80a2 	beq.w	8005a7c <_svfiprintf_r+0x1c8>
 8005938:	2300      	movs	r3, #0
 800593a:	f04f 32ff 	mov.w	r2, #4294967295
 800593e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005942:	f10a 0a01 	add.w	sl, sl, #1
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800594e:	931a      	str	r3, [sp, #104]	; 0x68
 8005950:	4654      	mov	r4, sl
 8005952:	2205      	movs	r2, #5
 8005954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005958:	4851      	ldr	r0, [pc, #324]	; (8005aa0 <_svfiprintf_r+0x1ec>)
 800595a:	f7fa fc79 	bl	8000250 <memchr>
 800595e:	9a04      	ldr	r2, [sp, #16]
 8005960:	b9d8      	cbnz	r0, 800599a <_svfiprintf_r+0xe6>
 8005962:	06d0      	lsls	r0, r2, #27
 8005964:	bf44      	itt	mi
 8005966:	2320      	movmi	r3, #32
 8005968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800596c:	0711      	lsls	r1, r2, #28
 800596e:	bf44      	itt	mi
 8005970:	232b      	movmi	r3, #43	; 0x2b
 8005972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005976:	f89a 3000 	ldrb.w	r3, [sl]
 800597a:	2b2a      	cmp	r3, #42	; 0x2a
 800597c:	d015      	beq.n	80059aa <_svfiprintf_r+0xf6>
 800597e:	9a07      	ldr	r2, [sp, #28]
 8005980:	4654      	mov	r4, sl
 8005982:	2000      	movs	r0, #0
 8005984:	f04f 0c0a 	mov.w	ip, #10
 8005988:	4621      	mov	r1, r4
 800598a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800598e:	3b30      	subs	r3, #48	; 0x30
 8005990:	2b09      	cmp	r3, #9
 8005992:	d94e      	bls.n	8005a32 <_svfiprintf_r+0x17e>
 8005994:	b1b0      	cbz	r0, 80059c4 <_svfiprintf_r+0x110>
 8005996:	9207      	str	r2, [sp, #28]
 8005998:	e014      	b.n	80059c4 <_svfiprintf_r+0x110>
 800599a:	eba0 0308 	sub.w	r3, r0, r8
 800599e:	fa09 f303 	lsl.w	r3, r9, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	46a2      	mov	sl, r4
 80059a8:	e7d2      	b.n	8005950 <_svfiprintf_r+0x9c>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9103      	str	r1, [sp, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfbb      	ittet	lt
 80059b6:	425b      	neglt	r3, r3
 80059b8:	f042 0202 	orrlt.w	r2, r2, #2
 80059bc:	9307      	strge	r3, [sp, #28]
 80059be:	9307      	strlt	r3, [sp, #28]
 80059c0:	bfb8      	it	lt
 80059c2:	9204      	strlt	r2, [sp, #16]
 80059c4:	7823      	ldrb	r3, [r4, #0]
 80059c6:	2b2e      	cmp	r3, #46	; 0x2e
 80059c8:	d10c      	bne.n	80059e4 <_svfiprintf_r+0x130>
 80059ca:	7863      	ldrb	r3, [r4, #1]
 80059cc:	2b2a      	cmp	r3, #42	; 0x2a
 80059ce:	d135      	bne.n	8005a3c <_svfiprintf_r+0x188>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	9203      	str	r2, [sp, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfb8      	it	lt
 80059dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80059e0:	3402      	adds	r4, #2
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ab0 <_svfiprintf_r+0x1fc>
 80059e8:	7821      	ldrb	r1, [r4, #0]
 80059ea:	2203      	movs	r2, #3
 80059ec:	4650      	mov	r0, sl
 80059ee:	f7fa fc2f 	bl	8000250 <memchr>
 80059f2:	b140      	cbz	r0, 8005a06 <_svfiprintf_r+0x152>
 80059f4:	2340      	movs	r3, #64	; 0x40
 80059f6:	eba0 000a 	sub.w	r0, r0, sl
 80059fa:	fa03 f000 	lsl.w	r0, r3, r0
 80059fe:	9b04      	ldr	r3, [sp, #16]
 8005a00:	4303      	orrs	r3, r0
 8005a02:	3401      	adds	r4, #1
 8005a04:	9304      	str	r3, [sp, #16]
 8005a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0a:	4826      	ldr	r0, [pc, #152]	; (8005aa4 <_svfiprintf_r+0x1f0>)
 8005a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a10:	2206      	movs	r2, #6
 8005a12:	f7fa fc1d 	bl	8000250 <memchr>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d038      	beq.n	8005a8c <_svfiprintf_r+0x1d8>
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <_svfiprintf_r+0x1f4>)
 8005a1c:	bb1b      	cbnz	r3, 8005a66 <_svfiprintf_r+0x1b2>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	3307      	adds	r3, #7
 8005a22:	f023 0307 	bic.w	r3, r3, #7
 8005a26:	3308      	adds	r3, #8
 8005a28:	9303      	str	r3, [sp, #12]
 8005a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2c:	4433      	add	r3, r6
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	e767      	b.n	8005902 <_svfiprintf_r+0x4e>
 8005a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a36:	460c      	mov	r4, r1
 8005a38:	2001      	movs	r0, #1
 8005a3a:	e7a5      	b.n	8005988 <_svfiprintf_r+0xd4>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	3401      	adds	r4, #1
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	4619      	mov	r1, r3
 8005a44:	f04f 0c0a 	mov.w	ip, #10
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4e:	3a30      	subs	r2, #48	; 0x30
 8005a50:	2a09      	cmp	r2, #9
 8005a52:	d903      	bls.n	8005a5c <_svfiprintf_r+0x1a8>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0c5      	beq.n	80059e4 <_svfiprintf_r+0x130>
 8005a58:	9105      	str	r1, [sp, #20]
 8005a5a:	e7c3      	b.n	80059e4 <_svfiprintf_r+0x130>
 8005a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a60:	4604      	mov	r4, r0
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7f0      	b.n	8005a48 <_svfiprintf_r+0x194>
 8005a66:	ab03      	add	r3, sp, #12
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <_svfiprintf_r+0x1f8>)
 8005a6e:	a904      	add	r1, sp, #16
 8005a70:	4638      	mov	r0, r7
 8005a72:	f3af 8000 	nop.w
 8005a76:	1c42      	adds	r2, r0, #1
 8005a78:	4606      	mov	r6, r0
 8005a7a:	d1d6      	bne.n	8005a2a <_svfiprintf_r+0x176>
 8005a7c:	89ab      	ldrh	r3, [r5, #12]
 8005a7e:	065b      	lsls	r3, r3, #25
 8005a80:	f53f af2c 	bmi.w	80058dc <_svfiprintf_r+0x28>
 8005a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a86:	b01d      	add	sp, #116	; 0x74
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	ab03      	add	r3, sp, #12
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <_svfiprintf_r+0x1f8>)
 8005a94:	a904      	add	r1, sp, #16
 8005a96:	4638      	mov	r0, r7
 8005a98:	f000 fa4c 	bl	8005f34 <_printf_i>
 8005a9c:	e7eb      	b.n	8005a76 <_svfiprintf_r+0x1c2>
 8005a9e:	bf00      	nop
 8005aa0:	080069a4 	.word	0x080069a4
 8005aa4:	080069ae 	.word	0x080069ae
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	080057fd 	.word	0x080057fd
 8005ab0:	080069aa 	.word	0x080069aa

08005ab4 <_sungetc_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	1c4b      	adds	r3, r1, #1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	d103      	bne.n	8005ac4 <_sungetc_r+0x10>
 8005abc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	8993      	ldrh	r3, [r2, #12]
 8005ac6:	f023 0320 	bic.w	r3, r3, #32
 8005aca:	8193      	strh	r3, [r2, #12]
 8005acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	b2cd      	uxtb	r5, r1
 8005ad2:	b18b      	cbz	r3, 8005af8 <_sungetc_r+0x44>
 8005ad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	dd08      	ble.n	8005aec <_sungetc_r+0x38>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	6063      	str	r3, [r4, #4]
 8005aea:	e7e9      	b.n	8005ac0 <_sungetc_r+0xc>
 8005aec:	4621      	mov	r1, r4
 8005aee:	f000 fdd1 	bl	8006694 <__submore>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d0f1      	beq.n	8005ada <_sungetc_r+0x26>
 8005af6:	e7e1      	b.n	8005abc <_sungetc_r+0x8>
 8005af8:	6921      	ldr	r1, [r4, #16]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	b151      	cbz	r1, 8005b14 <_sungetc_r+0x60>
 8005afe:	4299      	cmp	r1, r3
 8005b00:	d208      	bcs.n	8005b14 <_sungetc_r+0x60>
 8005b02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005b06:	42a9      	cmp	r1, r5
 8005b08:	d104      	bne.n	8005b14 <_sungetc_r+0x60>
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	6062      	str	r2, [r4, #4]
 8005b12:	e7d5      	b.n	8005ac0 <_sungetc_r+0xc>
 8005b14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b1e:	2303      	movs	r3, #3
 8005b20:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b22:	4623      	mov	r3, r4
 8005b24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7dc      	b.n	8005ae8 <_sungetc_r+0x34>

08005b2e <__ssrefill_r>:
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	460c      	mov	r4, r1
 8005b32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005b34:	b169      	cbz	r1, 8005b52 <__ssrefill_r+0x24>
 8005b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b3a:	4299      	cmp	r1, r3
 8005b3c:	d001      	beq.n	8005b42 <__ssrefill_r+0x14>
 8005b3e:	f000 fe0d 	bl	800675c <_free_r>
 8005b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	2000      	movs	r0, #0
 8005b48:	6360      	str	r0, [r4, #52]	; 0x34
 8005b4a:	b113      	cbz	r3, 8005b52 <__ssrefill_r+0x24>
 8005b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6063      	str	r3, [r4, #4]
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f043 0320 	orr.w	r3, r3, #32
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	f04f 30ff 	mov.w	r0, #4294967295
 8005b66:	e7f3      	b.n	8005b50 <__ssrefill_r+0x22>

08005b68 <__ssvfiscanf_r>:
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005b72:	2100      	movs	r1, #0
 8005b74:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005b78:	49b2      	ldr	r1, [pc, #712]	; (8005e44 <__ssvfiscanf_r+0x2dc>)
 8005b7a:	91a0      	str	r1, [sp, #640]	; 0x280
 8005b7c:	f10d 0804 	add.w	r8, sp, #4
 8005b80:	49b1      	ldr	r1, [pc, #708]	; (8005e48 <__ssvfiscanf_r+0x2e0>)
 8005b82:	4fb2      	ldr	r7, [pc, #712]	; (8005e4c <__ssvfiscanf_r+0x2e4>)
 8005b84:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8005e50 <__ssvfiscanf_r+0x2e8>
 8005b88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	f892 a000 	ldrb.w	sl, [r2]
 8005b96:	f1ba 0f00 	cmp.w	sl, #0
 8005b9a:	f000 8151 	beq.w	8005e40 <__ssvfiscanf_r+0x2d8>
 8005b9e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8005ba2:	f013 0308 	ands.w	r3, r3, #8
 8005ba6:	f102 0501 	add.w	r5, r2, #1
 8005baa:	d019      	beq.n	8005be0 <__ssvfiscanf_r+0x78>
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd0f      	ble.n	8005bd2 <__ssvfiscanf_r+0x6a>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	5cba      	ldrb	r2, [r7, r2]
 8005bb8:	0712      	lsls	r2, r2, #28
 8005bba:	d401      	bmi.n	8005bc0 <__ssvfiscanf_r+0x58>
 8005bbc:	462a      	mov	r2, r5
 8005bbe:	e7e8      	b.n	8005b92 <__ssvfiscanf_r+0x2a>
 8005bc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005bc2:	3201      	adds	r2, #1
 8005bc4:	9245      	str	r2, [sp, #276]	; 0x114
 8005bc6:	6862      	ldr	r2, [r4, #4]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	3a01      	subs	r2, #1
 8005bcc:	6062      	str	r2, [r4, #4]
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	e7ec      	b.n	8005bac <__ssvfiscanf_r+0x44>
 8005bd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	4798      	blx	r3
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d0e9      	beq.n	8005bb2 <__ssvfiscanf_r+0x4a>
 8005bde:	e7ed      	b.n	8005bbc <__ssvfiscanf_r+0x54>
 8005be0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8005be4:	f040 8083 	bne.w	8005cee <__ssvfiscanf_r+0x186>
 8005be8:	9341      	str	r3, [sp, #260]	; 0x104
 8005bea:	9343      	str	r3, [sp, #268]	; 0x10c
 8005bec:	7853      	ldrb	r3, [r2, #1]
 8005bee:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf0:	bf02      	ittt	eq
 8005bf2:	2310      	moveq	r3, #16
 8005bf4:	1c95      	addeq	r5, r2, #2
 8005bf6:	9341      	streq	r3, [sp, #260]	; 0x104
 8005bf8:	220a      	movs	r2, #10
 8005bfa:	46ab      	mov	fp, r5
 8005bfc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8005c00:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	d91d      	bls.n	8005c44 <__ssvfiscanf_r+0xdc>
 8005c08:	4891      	ldr	r0, [pc, #580]	; (8005e50 <__ssvfiscanf_r+0x2e8>)
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	f7fa fb20 	bl	8000250 <memchr>
 8005c10:	b140      	cbz	r0, 8005c24 <__ssvfiscanf_r+0xbc>
 8005c12:	2301      	movs	r3, #1
 8005c14:	eba0 0009 	sub.w	r0, r0, r9
 8005c18:	fa03 f000 	lsl.w	r0, r3, r0
 8005c1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c1e:	4318      	orrs	r0, r3
 8005c20:	9041      	str	r0, [sp, #260]	; 0x104
 8005c22:	465d      	mov	r5, fp
 8005c24:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c28:	2b78      	cmp	r3, #120	; 0x78
 8005c2a:	d806      	bhi.n	8005c3a <__ssvfiscanf_r+0xd2>
 8005c2c:	2b57      	cmp	r3, #87	; 0x57
 8005c2e:	d810      	bhi.n	8005c52 <__ssvfiscanf_r+0xea>
 8005c30:	2b25      	cmp	r3, #37	; 0x25
 8005c32:	d05c      	beq.n	8005cee <__ssvfiscanf_r+0x186>
 8005c34:	d856      	bhi.n	8005ce4 <__ssvfiscanf_r+0x17c>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d074      	beq.n	8005d24 <__ssvfiscanf_r+0x1bc>
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	9347      	str	r3, [sp, #284]	; 0x11c
 8005c3e:	230a      	movs	r3, #10
 8005c40:	9342      	str	r3, [sp, #264]	; 0x108
 8005c42:	e081      	b.n	8005d48 <__ssvfiscanf_r+0x1e0>
 8005c44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005c46:	fb02 1303 	mla	r3, r2, r3, r1
 8005c4a:	3b30      	subs	r3, #48	; 0x30
 8005c4c:	9343      	str	r3, [sp, #268]	; 0x10c
 8005c4e:	465d      	mov	r5, fp
 8005c50:	e7d3      	b.n	8005bfa <__ssvfiscanf_r+0x92>
 8005c52:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005c56:	2a20      	cmp	r2, #32
 8005c58:	d8ef      	bhi.n	8005c3a <__ssvfiscanf_r+0xd2>
 8005c5a:	a101      	add	r1, pc, #4	; (adr r1, 8005c60 <__ssvfiscanf_r+0xf8>)
 8005c5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c60:	08005d33 	.word	0x08005d33
 8005c64:	08005c3b 	.word	0x08005c3b
 8005c68:	08005c3b 	.word	0x08005c3b
 8005c6c:	08005d91 	.word	0x08005d91
 8005c70:	08005c3b 	.word	0x08005c3b
 8005c74:	08005c3b 	.word	0x08005c3b
 8005c78:	08005c3b 	.word	0x08005c3b
 8005c7c:	08005c3b 	.word	0x08005c3b
 8005c80:	08005c3b 	.word	0x08005c3b
 8005c84:	08005c3b 	.word	0x08005c3b
 8005c88:	08005c3b 	.word	0x08005c3b
 8005c8c:	08005da7 	.word	0x08005da7
 8005c90:	08005d7d 	.word	0x08005d7d
 8005c94:	08005ceb 	.word	0x08005ceb
 8005c98:	08005ceb 	.word	0x08005ceb
 8005c9c:	08005ceb 	.word	0x08005ceb
 8005ca0:	08005c3b 	.word	0x08005c3b
 8005ca4:	08005d81 	.word	0x08005d81
 8005ca8:	08005c3b 	.word	0x08005c3b
 8005cac:	08005c3b 	.word	0x08005c3b
 8005cb0:	08005c3b 	.word	0x08005c3b
 8005cb4:	08005c3b 	.word	0x08005c3b
 8005cb8:	08005db7 	.word	0x08005db7
 8005cbc:	08005d89 	.word	0x08005d89
 8005cc0:	08005d2b 	.word	0x08005d2b
 8005cc4:	08005c3b 	.word	0x08005c3b
 8005cc8:	08005c3b 	.word	0x08005c3b
 8005ccc:	08005db3 	.word	0x08005db3
 8005cd0:	08005c3b 	.word	0x08005c3b
 8005cd4:	08005d7d 	.word	0x08005d7d
 8005cd8:	08005c3b 	.word	0x08005c3b
 8005cdc:	08005c3b 	.word	0x08005c3b
 8005ce0:	08005d33 	.word	0x08005d33
 8005ce4:	3b45      	subs	r3, #69	; 0x45
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d8a7      	bhi.n	8005c3a <__ssvfiscanf_r+0xd2>
 8005cea:	2305      	movs	r3, #5
 8005cec:	e02b      	b.n	8005d46 <__ssvfiscanf_r+0x1de>
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dd0d      	ble.n	8005d10 <__ssvfiscanf_r+0x1a8>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	781a      	ldrb	r2, [r3, #0]
 8005cf8:	4552      	cmp	r2, sl
 8005cfa:	f040 80a1 	bne.w	8005e40 <__ssvfiscanf_r+0x2d8>
 8005cfe:	3301      	adds	r3, #1
 8005d00:	6862      	ldr	r2, [r4, #4]
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005d06:	3a01      	subs	r2, #1
 8005d08:	3301      	adds	r3, #1
 8005d0a:	6062      	str	r2, [r4, #4]
 8005d0c:	9345      	str	r3, [sp, #276]	; 0x114
 8005d0e:	e755      	b.n	8005bbc <__ssvfiscanf_r+0x54>
 8005d10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d12:	4621      	mov	r1, r4
 8005d14:	4630      	mov	r0, r6
 8005d16:	4798      	blx	r3
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d0eb      	beq.n	8005cf4 <__ssvfiscanf_r+0x18c>
 8005d1c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f040 8084 	bne.w	8005e2c <__ssvfiscanf_r+0x2c4>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	e086      	b.n	8005e38 <__ssvfiscanf_r+0x2d0>
 8005d2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005d2c:	f042 0220 	orr.w	r2, r2, #32
 8005d30:	9241      	str	r2, [sp, #260]	; 0x104
 8005d32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d38:	9241      	str	r2, [sp, #260]	; 0x104
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	2b6f      	cmp	r3, #111	; 0x6f
 8005d3e:	9242      	str	r2, [sp, #264]	; 0x108
 8005d40:	bf34      	ite	cc
 8005d42:	2303      	movcc	r3, #3
 8005d44:	2304      	movcs	r3, #4
 8005d46:	9347      	str	r3, [sp, #284]	; 0x11c
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dd41      	ble.n	8005dd2 <__ssvfiscanf_r+0x26a>
 8005d4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d50:	0659      	lsls	r1, r3, #25
 8005d52:	d404      	bmi.n	8005d5e <__ssvfiscanf_r+0x1f6>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	781a      	ldrb	r2, [r3, #0]
 8005d58:	5cba      	ldrb	r2, [r7, r2]
 8005d5a:	0712      	lsls	r2, r2, #28
 8005d5c:	d440      	bmi.n	8005de0 <__ssvfiscanf_r+0x278>
 8005d5e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	dc4f      	bgt.n	8005e04 <__ssvfiscanf_r+0x29c>
 8005d64:	466b      	mov	r3, sp
 8005d66:	4622      	mov	r2, r4
 8005d68:	a941      	add	r1, sp, #260	; 0x104
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f000 fa08 	bl	8006180 <_scanf_chars>
 8005d70:	2801      	cmp	r0, #1
 8005d72:	d065      	beq.n	8005e40 <__ssvfiscanf_r+0x2d8>
 8005d74:	2802      	cmp	r0, #2
 8005d76:	f47f af21 	bne.w	8005bbc <__ssvfiscanf_r+0x54>
 8005d7a:	e7cf      	b.n	8005d1c <__ssvfiscanf_r+0x1b4>
 8005d7c:	220a      	movs	r2, #10
 8005d7e:	e7dd      	b.n	8005d3c <__ssvfiscanf_r+0x1d4>
 8005d80:	2300      	movs	r3, #0
 8005d82:	9342      	str	r3, [sp, #264]	; 0x108
 8005d84:	2303      	movs	r3, #3
 8005d86:	e7de      	b.n	8005d46 <__ssvfiscanf_r+0x1de>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	9342      	str	r3, [sp, #264]	; 0x108
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	e7da      	b.n	8005d46 <__ssvfiscanf_r+0x1de>
 8005d90:	4629      	mov	r1, r5
 8005d92:	4640      	mov	r0, r8
 8005d94:	f000 fb40 	bl	8006418 <__sccl>
 8005d98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d9e:	9341      	str	r3, [sp, #260]	; 0x104
 8005da0:	4605      	mov	r5, r0
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7cf      	b.n	8005d46 <__ssvfiscanf_r+0x1de>
 8005da6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dac:	9341      	str	r3, [sp, #260]	; 0x104
 8005dae:	2300      	movs	r3, #0
 8005db0:	e7c9      	b.n	8005d46 <__ssvfiscanf_r+0x1de>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e7c7      	b.n	8005d46 <__ssvfiscanf_r+0x1de>
 8005db6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005db8:	06c3      	lsls	r3, r0, #27
 8005dba:	f53f aeff 	bmi.w	8005bbc <__ssvfiscanf_r+0x54>
 8005dbe:	9b00      	ldr	r3, [sp, #0]
 8005dc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005dc2:	1d19      	adds	r1, r3, #4
 8005dc4:	9100      	str	r1, [sp, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	07c0      	lsls	r0, r0, #31
 8005dca:	bf4c      	ite	mi
 8005dcc:	801a      	strhmi	r2, [r3, #0]
 8005dce:	601a      	strpl	r2, [r3, #0]
 8005dd0:	e6f4      	b.n	8005bbc <__ssvfiscanf_r+0x54>
 8005dd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	4798      	blx	r3
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d0b7      	beq.n	8005d4e <__ssvfiscanf_r+0x1e6>
 8005dde:	e79d      	b.n	8005d1c <__ssvfiscanf_r+0x1b4>
 8005de0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005de2:	3201      	adds	r2, #1
 8005de4:	9245      	str	r2, [sp, #276]	; 0x114
 8005de6:	6862      	ldr	r2, [r4, #4]
 8005de8:	3a01      	subs	r2, #1
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	6062      	str	r2, [r4, #4]
 8005dee:	dd02      	ble.n	8005df6 <__ssvfiscanf_r+0x28e>
 8005df0:	3301      	adds	r3, #1
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	e7ae      	b.n	8005d54 <__ssvfiscanf_r+0x1ec>
 8005df6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4798      	blx	r3
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d0a8      	beq.n	8005d54 <__ssvfiscanf_r+0x1ec>
 8005e02:	e78b      	b.n	8005d1c <__ssvfiscanf_r+0x1b4>
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	dc06      	bgt.n	8005e16 <__ssvfiscanf_r+0x2ae>
 8005e08:	466b      	mov	r3, sp
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	a941      	add	r1, sp, #260	; 0x104
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f000 fa0e 	bl	8006230 <_scanf_i>
 8005e14:	e7ac      	b.n	8005d70 <__ssvfiscanf_r+0x208>
 8005e16:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <__ssvfiscanf_r+0x2ec>)
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f43f aecf 	beq.w	8005bbc <__ssvfiscanf_r+0x54>
 8005e1e:	466b      	mov	r3, sp
 8005e20:	4622      	mov	r2, r4
 8005e22:	a941      	add	r1, sp, #260	; 0x104
 8005e24:	4630      	mov	r0, r6
 8005e26:	f3af 8000 	nop.w
 8005e2a:	e7a1      	b.n	8005d70 <__ssvfiscanf_r+0x208>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e32:	bf18      	it	ne
 8005e34:	f04f 30ff 	movne.w	r0, #4294967295
 8005e38:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e40:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005e42:	e7f9      	b.n	8005e38 <__ssvfiscanf_r+0x2d0>
 8005e44:	08005ab5 	.word	0x08005ab5
 8005e48:	08005b2f 	.word	0x08005b2f
 8005e4c:	080069f3 	.word	0x080069f3
 8005e50:	080069aa 	.word	0x080069aa
 8005e54:	00000000 	.word	0x00000000

08005e58 <_printf_common>:
 8005e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	4699      	mov	r9, r3
 8005e60:	688a      	ldr	r2, [r1, #8]
 8005e62:	690b      	ldr	r3, [r1, #16]
 8005e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bfb8      	it	lt
 8005e6c:	4613      	movlt	r3, r2
 8005e6e:	6033      	str	r3, [r6, #0]
 8005e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e74:	4607      	mov	r7, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	b10a      	cbz	r2, 8005e7e <_printf_common+0x26>
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	6033      	str	r3, [r6, #0]
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	0699      	lsls	r1, r3, #26
 8005e82:	bf42      	ittt	mi
 8005e84:	6833      	ldrmi	r3, [r6, #0]
 8005e86:	3302      	addmi	r3, #2
 8005e88:	6033      	strmi	r3, [r6, #0]
 8005e8a:	6825      	ldr	r5, [r4, #0]
 8005e8c:	f015 0506 	ands.w	r5, r5, #6
 8005e90:	d106      	bne.n	8005ea0 <_printf_common+0x48>
 8005e92:	f104 0a19 	add.w	sl, r4, #25
 8005e96:	68e3      	ldr	r3, [r4, #12]
 8005e98:	6832      	ldr	r2, [r6, #0]
 8005e9a:	1a9b      	subs	r3, r3, r2
 8005e9c:	42ab      	cmp	r3, r5
 8005e9e:	dc26      	bgt.n	8005eee <_printf_common+0x96>
 8005ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ea4:	1e13      	subs	r3, r2, #0
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	bf18      	it	ne
 8005eaa:	2301      	movne	r3, #1
 8005eac:	0692      	lsls	r2, r2, #26
 8005eae:	d42b      	bmi.n	8005f08 <_printf_common+0xb0>
 8005eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	47c0      	blx	r8
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d01e      	beq.n	8005efc <_printf_common+0xa4>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	68e5      	ldr	r5, [r4, #12]
 8005ec2:	6832      	ldr	r2, [r6, #0]
 8005ec4:	f003 0306 	and.w	r3, r3, #6
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	bf08      	it	eq
 8005ecc:	1aad      	subeq	r5, r5, r2
 8005ece:	68a3      	ldr	r3, [r4, #8]
 8005ed0:	6922      	ldr	r2, [r4, #16]
 8005ed2:	bf0c      	ite	eq
 8005ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed8:	2500      	movne	r5, #0
 8005eda:	4293      	cmp	r3, r2
 8005edc:	bfc4      	itt	gt
 8005ede:	1a9b      	subgt	r3, r3, r2
 8005ee0:	18ed      	addgt	r5, r5, r3
 8005ee2:	2600      	movs	r6, #0
 8005ee4:	341a      	adds	r4, #26
 8005ee6:	42b5      	cmp	r5, r6
 8005ee8:	d11a      	bne.n	8005f20 <_printf_common+0xc8>
 8005eea:	2000      	movs	r0, #0
 8005eec:	e008      	b.n	8005f00 <_printf_common+0xa8>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4652      	mov	r2, sl
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	47c0      	blx	r8
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d103      	bne.n	8005f04 <_printf_common+0xac>
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
 8005f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f04:	3501      	adds	r5, #1
 8005f06:	e7c6      	b.n	8005e96 <_printf_common+0x3e>
 8005f08:	18e1      	adds	r1, r4, r3
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	2030      	movs	r0, #48	; 0x30
 8005f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f12:	4422      	add	r2, r4
 8005f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	e7c7      	b.n	8005eb0 <_printf_common+0x58>
 8005f20:	2301      	movs	r3, #1
 8005f22:	4622      	mov	r2, r4
 8005f24:	4649      	mov	r1, r9
 8005f26:	4638      	mov	r0, r7
 8005f28:	47c0      	blx	r8
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d0e6      	beq.n	8005efc <_printf_common+0xa4>
 8005f2e:	3601      	adds	r6, #1
 8005f30:	e7d9      	b.n	8005ee6 <_printf_common+0x8e>
	...

08005f34 <_printf_i>:
 8005f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	460c      	mov	r4, r1
 8005f3a:	4691      	mov	r9, r2
 8005f3c:	7e27      	ldrb	r7, [r4, #24]
 8005f3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f40:	2f78      	cmp	r7, #120	; 0x78
 8005f42:	4680      	mov	r8, r0
 8005f44:	469a      	mov	sl, r3
 8005f46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f4a:	d807      	bhi.n	8005f5c <_printf_i+0x28>
 8005f4c:	2f62      	cmp	r7, #98	; 0x62
 8005f4e:	d80a      	bhi.n	8005f66 <_printf_i+0x32>
 8005f50:	2f00      	cmp	r7, #0
 8005f52:	f000 80d8 	beq.w	8006106 <_printf_i+0x1d2>
 8005f56:	2f58      	cmp	r7, #88	; 0x58
 8005f58:	f000 80a3 	beq.w	80060a2 <_printf_i+0x16e>
 8005f5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f64:	e03a      	b.n	8005fdc <_printf_i+0xa8>
 8005f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f6a:	2b15      	cmp	r3, #21
 8005f6c:	d8f6      	bhi.n	8005f5c <_printf_i+0x28>
 8005f6e:	a001      	add	r0, pc, #4	; (adr r0, 8005f74 <_printf_i+0x40>)
 8005f70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f74:	08005fcd 	.word	0x08005fcd
 8005f78:	08005fe1 	.word	0x08005fe1
 8005f7c:	08005f5d 	.word	0x08005f5d
 8005f80:	08005f5d 	.word	0x08005f5d
 8005f84:	08005f5d 	.word	0x08005f5d
 8005f88:	08005f5d 	.word	0x08005f5d
 8005f8c:	08005fe1 	.word	0x08005fe1
 8005f90:	08005f5d 	.word	0x08005f5d
 8005f94:	08005f5d 	.word	0x08005f5d
 8005f98:	08005f5d 	.word	0x08005f5d
 8005f9c:	08005f5d 	.word	0x08005f5d
 8005fa0:	080060ed 	.word	0x080060ed
 8005fa4:	08006011 	.word	0x08006011
 8005fa8:	080060cf 	.word	0x080060cf
 8005fac:	08005f5d 	.word	0x08005f5d
 8005fb0:	08005f5d 	.word	0x08005f5d
 8005fb4:	0800610f 	.word	0x0800610f
 8005fb8:	08005f5d 	.word	0x08005f5d
 8005fbc:	08006011 	.word	0x08006011
 8005fc0:	08005f5d 	.word	0x08005f5d
 8005fc4:	08005f5d 	.word	0x08005f5d
 8005fc8:	080060d7 	.word	0x080060d7
 8005fcc:	680b      	ldr	r3, [r1, #0]
 8005fce:	1d1a      	adds	r2, r3, #4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	600a      	str	r2, [r1, #0]
 8005fd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0a3      	b.n	8006128 <_printf_i+0x1f4>
 8005fe0:	6825      	ldr	r5, [r4, #0]
 8005fe2:	6808      	ldr	r0, [r1, #0]
 8005fe4:	062e      	lsls	r6, r5, #24
 8005fe6:	f100 0304 	add.w	r3, r0, #4
 8005fea:	d50a      	bpl.n	8006002 <_printf_i+0xce>
 8005fec:	6805      	ldr	r5, [r0, #0]
 8005fee:	600b      	str	r3, [r1, #0]
 8005ff0:	2d00      	cmp	r5, #0
 8005ff2:	da03      	bge.n	8005ffc <_printf_i+0xc8>
 8005ff4:	232d      	movs	r3, #45	; 0x2d
 8005ff6:	426d      	negs	r5, r5
 8005ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ffc:	485e      	ldr	r0, [pc, #376]	; (8006178 <_printf_i+0x244>)
 8005ffe:	230a      	movs	r3, #10
 8006000:	e019      	b.n	8006036 <_printf_i+0x102>
 8006002:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006006:	6805      	ldr	r5, [r0, #0]
 8006008:	600b      	str	r3, [r1, #0]
 800600a:	bf18      	it	ne
 800600c:	b22d      	sxthne	r5, r5
 800600e:	e7ef      	b.n	8005ff0 <_printf_i+0xbc>
 8006010:	680b      	ldr	r3, [r1, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	1d18      	adds	r0, r3, #4
 8006016:	6008      	str	r0, [r1, #0]
 8006018:	0628      	lsls	r0, r5, #24
 800601a:	d501      	bpl.n	8006020 <_printf_i+0xec>
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	e002      	b.n	8006026 <_printf_i+0xf2>
 8006020:	0669      	lsls	r1, r5, #25
 8006022:	d5fb      	bpl.n	800601c <_printf_i+0xe8>
 8006024:	881d      	ldrh	r5, [r3, #0]
 8006026:	4854      	ldr	r0, [pc, #336]	; (8006178 <_printf_i+0x244>)
 8006028:	2f6f      	cmp	r7, #111	; 0x6f
 800602a:	bf0c      	ite	eq
 800602c:	2308      	moveq	r3, #8
 800602e:	230a      	movne	r3, #10
 8006030:	2100      	movs	r1, #0
 8006032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006036:	6866      	ldr	r6, [r4, #4]
 8006038:	60a6      	str	r6, [r4, #8]
 800603a:	2e00      	cmp	r6, #0
 800603c:	bfa2      	ittt	ge
 800603e:	6821      	ldrge	r1, [r4, #0]
 8006040:	f021 0104 	bicge.w	r1, r1, #4
 8006044:	6021      	strge	r1, [r4, #0]
 8006046:	b90d      	cbnz	r5, 800604c <_printf_i+0x118>
 8006048:	2e00      	cmp	r6, #0
 800604a:	d04d      	beq.n	80060e8 <_printf_i+0x1b4>
 800604c:	4616      	mov	r6, r2
 800604e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006052:	fb03 5711 	mls	r7, r3, r1, r5
 8006056:	5dc7      	ldrb	r7, [r0, r7]
 8006058:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800605c:	462f      	mov	r7, r5
 800605e:	42bb      	cmp	r3, r7
 8006060:	460d      	mov	r5, r1
 8006062:	d9f4      	bls.n	800604e <_printf_i+0x11a>
 8006064:	2b08      	cmp	r3, #8
 8006066:	d10b      	bne.n	8006080 <_printf_i+0x14c>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	07df      	lsls	r7, r3, #31
 800606c:	d508      	bpl.n	8006080 <_printf_i+0x14c>
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	6861      	ldr	r1, [r4, #4]
 8006072:	4299      	cmp	r1, r3
 8006074:	bfde      	ittt	le
 8006076:	2330      	movle	r3, #48	; 0x30
 8006078:	f806 3c01 	strble.w	r3, [r6, #-1]
 800607c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006080:	1b92      	subs	r2, r2, r6
 8006082:	6122      	str	r2, [r4, #16]
 8006084:	f8cd a000 	str.w	sl, [sp]
 8006088:	464b      	mov	r3, r9
 800608a:	aa03      	add	r2, sp, #12
 800608c:	4621      	mov	r1, r4
 800608e:	4640      	mov	r0, r8
 8006090:	f7ff fee2 	bl	8005e58 <_printf_common>
 8006094:	3001      	adds	r0, #1
 8006096:	d14c      	bne.n	8006132 <_printf_i+0x1fe>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	b004      	add	sp, #16
 800609e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a2:	4835      	ldr	r0, [pc, #212]	; (8006178 <_printf_i+0x244>)
 80060a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	680e      	ldr	r6, [r1, #0]
 80060ac:	061f      	lsls	r7, r3, #24
 80060ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80060b2:	600e      	str	r6, [r1, #0]
 80060b4:	d514      	bpl.n	80060e0 <_printf_i+0x1ac>
 80060b6:	07d9      	lsls	r1, r3, #31
 80060b8:	bf44      	itt	mi
 80060ba:	f043 0320 	orrmi.w	r3, r3, #32
 80060be:	6023      	strmi	r3, [r4, #0]
 80060c0:	b91d      	cbnz	r5, 80060ca <_printf_i+0x196>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	f023 0320 	bic.w	r3, r3, #32
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	2310      	movs	r3, #16
 80060cc:	e7b0      	b.n	8006030 <_printf_i+0xfc>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	f043 0320 	orr.w	r3, r3, #32
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	2378      	movs	r3, #120	; 0x78
 80060d8:	4828      	ldr	r0, [pc, #160]	; (800617c <_printf_i+0x248>)
 80060da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060de:	e7e3      	b.n	80060a8 <_printf_i+0x174>
 80060e0:	065e      	lsls	r6, r3, #25
 80060e2:	bf48      	it	mi
 80060e4:	b2ad      	uxthmi	r5, r5
 80060e6:	e7e6      	b.n	80060b6 <_printf_i+0x182>
 80060e8:	4616      	mov	r6, r2
 80060ea:	e7bb      	b.n	8006064 <_printf_i+0x130>
 80060ec:	680b      	ldr	r3, [r1, #0]
 80060ee:	6826      	ldr	r6, [r4, #0]
 80060f0:	6960      	ldr	r0, [r4, #20]
 80060f2:	1d1d      	adds	r5, r3, #4
 80060f4:	600d      	str	r5, [r1, #0]
 80060f6:	0635      	lsls	r5, r6, #24
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	d501      	bpl.n	8006100 <_printf_i+0x1cc>
 80060fc:	6018      	str	r0, [r3, #0]
 80060fe:	e002      	b.n	8006106 <_printf_i+0x1d2>
 8006100:	0671      	lsls	r1, r6, #25
 8006102:	d5fb      	bpl.n	80060fc <_printf_i+0x1c8>
 8006104:	8018      	strh	r0, [r3, #0]
 8006106:	2300      	movs	r3, #0
 8006108:	6123      	str	r3, [r4, #16]
 800610a:	4616      	mov	r6, r2
 800610c:	e7ba      	b.n	8006084 <_printf_i+0x150>
 800610e:	680b      	ldr	r3, [r1, #0]
 8006110:	1d1a      	adds	r2, r3, #4
 8006112:	600a      	str	r2, [r1, #0]
 8006114:	681e      	ldr	r6, [r3, #0]
 8006116:	6862      	ldr	r2, [r4, #4]
 8006118:	2100      	movs	r1, #0
 800611a:	4630      	mov	r0, r6
 800611c:	f7fa f898 	bl	8000250 <memchr>
 8006120:	b108      	cbz	r0, 8006126 <_printf_i+0x1f2>
 8006122:	1b80      	subs	r0, r0, r6
 8006124:	6060      	str	r0, [r4, #4]
 8006126:	6863      	ldr	r3, [r4, #4]
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	2300      	movs	r3, #0
 800612c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006130:	e7a8      	b.n	8006084 <_printf_i+0x150>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	4632      	mov	r2, r6
 8006136:	4649      	mov	r1, r9
 8006138:	4640      	mov	r0, r8
 800613a:	47d0      	blx	sl
 800613c:	3001      	adds	r0, #1
 800613e:	d0ab      	beq.n	8006098 <_printf_i+0x164>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	079b      	lsls	r3, r3, #30
 8006144:	d413      	bmi.n	800616e <_printf_i+0x23a>
 8006146:	68e0      	ldr	r0, [r4, #12]
 8006148:	9b03      	ldr	r3, [sp, #12]
 800614a:	4298      	cmp	r0, r3
 800614c:	bfb8      	it	lt
 800614e:	4618      	movlt	r0, r3
 8006150:	e7a4      	b.n	800609c <_printf_i+0x168>
 8006152:	2301      	movs	r3, #1
 8006154:	4632      	mov	r2, r6
 8006156:	4649      	mov	r1, r9
 8006158:	4640      	mov	r0, r8
 800615a:	47d0      	blx	sl
 800615c:	3001      	adds	r0, #1
 800615e:	d09b      	beq.n	8006098 <_printf_i+0x164>
 8006160:	3501      	adds	r5, #1
 8006162:	68e3      	ldr	r3, [r4, #12]
 8006164:	9903      	ldr	r1, [sp, #12]
 8006166:	1a5b      	subs	r3, r3, r1
 8006168:	42ab      	cmp	r3, r5
 800616a:	dcf2      	bgt.n	8006152 <_printf_i+0x21e>
 800616c:	e7eb      	b.n	8006146 <_printf_i+0x212>
 800616e:	2500      	movs	r5, #0
 8006170:	f104 0619 	add.w	r6, r4, #25
 8006174:	e7f5      	b.n	8006162 <_printf_i+0x22e>
 8006176:	bf00      	nop
 8006178:	080069b5 	.word	0x080069b5
 800617c:	080069c6 	.word	0x080069c6

08006180 <_scanf_chars>:
 8006180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006184:	4615      	mov	r5, r2
 8006186:	688a      	ldr	r2, [r1, #8]
 8006188:	4680      	mov	r8, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b932      	cbnz	r2, 800619c <_scanf_chars+0x1c>
 800618e:	698a      	ldr	r2, [r1, #24]
 8006190:	2a00      	cmp	r2, #0
 8006192:	bf0c      	ite	eq
 8006194:	2201      	moveq	r2, #1
 8006196:	f04f 32ff 	movne.w	r2, #4294967295
 800619a:	608a      	str	r2, [r1, #8]
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800622c <_scanf_chars+0xac>
 80061a2:	06d1      	lsls	r1, r2, #27
 80061a4:	bf5f      	itttt	pl
 80061a6:	681a      	ldrpl	r2, [r3, #0]
 80061a8:	1d11      	addpl	r1, r2, #4
 80061aa:	6019      	strpl	r1, [r3, #0]
 80061ac:	6816      	ldrpl	r6, [r2, #0]
 80061ae:	2700      	movs	r7, #0
 80061b0:	69a0      	ldr	r0, [r4, #24]
 80061b2:	b188      	cbz	r0, 80061d8 <_scanf_chars+0x58>
 80061b4:	2801      	cmp	r0, #1
 80061b6:	d107      	bne.n	80061c8 <_scanf_chars+0x48>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	6963      	ldr	r3, [r4, #20]
 80061be:	5c9b      	ldrb	r3, [r3, r2]
 80061c0:	b953      	cbnz	r3, 80061d8 <_scanf_chars+0x58>
 80061c2:	bb27      	cbnz	r7, 800620e <_scanf_chars+0x8e>
 80061c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c8:	2802      	cmp	r0, #2
 80061ca:	d120      	bne.n	800620e <_scanf_chars+0x8e>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80061d4:	071b      	lsls	r3, r3, #28
 80061d6:	d41a      	bmi.n	800620e <_scanf_chars+0x8e>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	06da      	lsls	r2, r3, #27
 80061dc:	bf5e      	ittt	pl
 80061de:	682b      	ldrpl	r3, [r5, #0]
 80061e0:	781b      	ldrbpl	r3, [r3, #0]
 80061e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80061e6:	682a      	ldr	r2, [r5, #0]
 80061e8:	686b      	ldr	r3, [r5, #4]
 80061ea:	3201      	adds	r2, #1
 80061ec:	602a      	str	r2, [r5, #0]
 80061ee:	68a2      	ldr	r2, [r4, #8]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	3a01      	subs	r2, #1
 80061f4:	606b      	str	r3, [r5, #4]
 80061f6:	3701      	adds	r7, #1
 80061f8:	60a2      	str	r2, [r4, #8]
 80061fa:	b142      	cbz	r2, 800620e <_scanf_chars+0x8e>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dcd7      	bgt.n	80061b0 <_scanf_chars+0x30>
 8006200:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006204:	4629      	mov	r1, r5
 8006206:	4640      	mov	r0, r8
 8006208:	4798      	blx	r3
 800620a:	2800      	cmp	r0, #0
 800620c:	d0d0      	beq.n	80061b0 <_scanf_chars+0x30>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	f013 0310 	ands.w	r3, r3, #16
 8006214:	d105      	bne.n	8006222 <_scanf_chars+0xa2>
 8006216:	68e2      	ldr	r2, [r4, #12]
 8006218:	3201      	adds	r2, #1
 800621a:	60e2      	str	r2, [r4, #12]
 800621c:	69a2      	ldr	r2, [r4, #24]
 800621e:	b102      	cbz	r2, 8006222 <_scanf_chars+0xa2>
 8006220:	7033      	strb	r3, [r6, #0]
 8006222:	6923      	ldr	r3, [r4, #16]
 8006224:	441f      	add	r7, r3
 8006226:	6127      	str	r7, [r4, #16]
 8006228:	2000      	movs	r0, #0
 800622a:	e7cb      	b.n	80061c4 <_scanf_chars+0x44>
 800622c:	080069f3 	.word	0x080069f3

08006230 <_scanf_i>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	4698      	mov	r8, r3
 8006236:	4b74      	ldr	r3, [pc, #464]	; (8006408 <_scanf_i+0x1d8>)
 8006238:	460c      	mov	r4, r1
 800623a:	4682      	mov	sl, r0
 800623c:	4616      	mov	r6, r2
 800623e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006242:	b087      	sub	sp, #28
 8006244:	ab03      	add	r3, sp, #12
 8006246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800624a:	4b70      	ldr	r3, [pc, #448]	; (800640c <_scanf_i+0x1dc>)
 800624c:	69a1      	ldr	r1, [r4, #24]
 800624e:	4a70      	ldr	r2, [pc, #448]	; (8006410 <_scanf_i+0x1e0>)
 8006250:	2903      	cmp	r1, #3
 8006252:	bf18      	it	ne
 8006254:	461a      	movne	r2, r3
 8006256:	68a3      	ldr	r3, [r4, #8]
 8006258:	9201      	str	r2, [sp, #4]
 800625a:	1e5a      	subs	r2, r3, #1
 800625c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006260:	bf88      	it	hi
 8006262:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006266:	4627      	mov	r7, r4
 8006268:	bf82      	ittt	hi
 800626a:	eb03 0905 	addhi.w	r9, r3, r5
 800626e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006272:	60a3      	strhi	r3, [r4, #8]
 8006274:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006278:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800627c:	bf98      	it	ls
 800627e:	f04f 0900 	movls.w	r9, #0
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	463d      	mov	r5, r7
 8006286:	f04f 0b00 	mov.w	fp, #0
 800628a:	6831      	ldr	r1, [r6, #0]
 800628c:	ab03      	add	r3, sp, #12
 800628e:	7809      	ldrb	r1, [r1, #0]
 8006290:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006294:	2202      	movs	r2, #2
 8006296:	f7f9 ffdb 	bl	8000250 <memchr>
 800629a:	b328      	cbz	r0, 80062e8 <_scanf_i+0xb8>
 800629c:	f1bb 0f01 	cmp.w	fp, #1
 80062a0:	d159      	bne.n	8006356 <_scanf_i+0x126>
 80062a2:	6862      	ldr	r2, [r4, #4]
 80062a4:	b92a      	cbnz	r2, 80062b2 <_scanf_i+0x82>
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	2308      	movs	r3, #8
 80062aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ae:	6063      	str	r3, [r4, #4]
 80062b0:	6022      	str	r2, [r4, #0]
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80062b8:	6022      	str	r2, [r4, #0]
 80062ba:	68a2      	ldr	r2, [r4, #8]
 80062bc:	1e51      	subs	r1, r2, #1
 80062be:	60a1      	str	r1, [r4, #8]
 80062c0:	b192      	cbz	r2, 80062e8 <_scanf_i+0xb8>
 80062c2:	6832      	ldr	r2, [r6, #0]
 80062c4:	1c51      	adds	r1, r2, #1
 80062c6:	6031      	str	r1, [r6, #0]
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	f805 2b01 	strb.w	r2, [r5], #1
 80062ce:	6872      	ldr	r2, [r6, #4]
 80062d0:	3a01      	subs	r2, #1
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	6072      	str	r2, [r6, #4]
 80062d6:	dc07      	bgt.n	80062e8 <_scanf_i+0xb8>
 80062d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80062dc:	4631      	mov	r1, r6
 80062de:	4650      	mov	r0, sl
 80062e0:	4790      	blx	r2
 80062e2:	2800      	cmp	r0, #0
 80062e4:	f040 8085 	bne.w	80063f2 <_scanf_i+0x1c2>
 80062e8:	f10b 0b01 	add.w	fp, fp, #1
 80062ec:	f1bb 0f03 	cmp.w	fp, #3
 80062f0:	d1cb      	bne.n	800628a <_scanf_i+0x5a>
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	b90b      	cbnz	r3, 80062fa <_scanf_i+0xca>
 80062f6:	230a      	movs	r3, #10
 80062f8:	6063      	str	r3, [r4, #4]
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	4945      	ldr	r1, [pc, #276]	; (8006414 <_scanf_i+0x1e4>)
 80062fe:	6960      	ldr	r0, [r4, #20]
 8006300:	1ac9      	subs	r1, r1, r3
 8006302:	f000 f889 	bl	8006418 <__sccl>
 8006306:	f04f 0b00 	mov.w	fp, #0
 800630a:	68a3      	ldr	r3, [r4, #8]
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d03d      	beq.n	800638e <_scanf_i+0x15e>
 8006312:	6831      	ldr	r1, [r6, #0]
 8006314:	6960      	ldr	r0, [r4, #20]
 8006316:	f891 c000 	ldrb.w	ip, [r1]
 800631a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800631e:	2800      	cmp	r0, #0
 8006320:	d035      	beq.n	800638e <_scanf_i+0x15e>
 8006322:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006326:	d124      	bne.n	8006372 <_scanf_i+0x142>
 8006328:	0510      	lsls	r0, r2, #20
 800632a:	d522      	bpl.n	8006372 <_scanf_i+0x142>
 800632c:	f10b 0b01 	add.w	fp, fp, #1
 8006330:	f1b9 0f00 	cmp.w	r9, #0
 8006334:	d003      	beq.n	800633e <_scanf_i+0x10e>
 8006336:	3301      	adds	r3, #1
 8006338:	f109 39ff 	add.w	r9, r9, #4294967295
 800633c:	60a3      	str	r3, [r4, #8]
 800633e:	6873      	ldr	r3, [r6, #4]
 8006340:	3b01      	subs	r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	6073      	str	r3, [r6, #4]
 8006346:	dd1b      	ble.n	8006380 <_scanf_i+0x150>
 8006348:	6833      	ldr	r3, [r6, #0]
 800634a:	3301      	adds	r3, #1
 800634c:	6033      	str	r3, [r6, #0]
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	3b01      	subs	r3, #1
 8006352:	60a3      	str	r3, [r4, #8]
 8006354:	e7d9      	b.n	800630a <_scanf_i+0xda>
 8006356:	f1bb 0f02 	cmp.w	fp, #2
 800635a:	d1ae      	bne.n	80062ba <_scanf_i+0x8a>
 800635c:	6822      	ldr	r2, [r4, #0]
 800635e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006362:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006366:	d1bf      	bne.n	80062e8 <_scanf_i+0xb8>
 8006368:	2310      	movs	r3, #16
 800636a:	6063      	str	r3, [r4, #4]
 800636c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006370:	e7a2      	b.n	80062b8 <_scanf_i+0x88>
 8006372:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006376:	6022      	str	r2, [r4, #0]
 8006378:	780b      	ldrb	r3, [r1, #0]
 800637a:	f805 3b01 	strb.w	r3, [r5], #1
 800637e:	e7de      	b.n	800633e <_scanf_i+0x10e>
 8006380:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006384:	4631      	mov	r1, r6
 8006386:	4650      	mov	r0, sl
 8006388:	4798      	blx	r3
 800638a:	2800      	cmp	r0, #0
 800638c:	d0df      	beq.n	800634e <_scanf_i+0x11e>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	05d9      	lsls	r1, r3, #23
 8006392:	d50d      	bpl.n	80063b0 <_scanf_i+0x180>
 8006394:	42bd      	cmp	r5, r7
 8006396:	d909      	bls.n	80063ac <_scanf_i+0x17c>
 8006398:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800639c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063a0:	4632      	mov	r2, r6
 80063a2:	4650      	mov	r0, sl
 80063a4:	4798      	blx	r3
 80063a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80063aa:	464d      	mov	r5, r9
 80063ac:	42bd      	cmp	r5, r7
 80063ae:	d028      	beq.n	8006402 <_scanf_i+0x1d2>
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	f012 0210 	ands.w	r2, r2, #16
 80063b6:	d113      	bne.n	80063e0 <_scanf_i+0x1b0>
 80063b8:	702a      	strb	r2, [r5, #0]
 80063ba:	6863      	ldr	r3, [r4, #4]
 80063bc:	9e01      	ldr	r6, [sp, #4]
 80063be:	4639      	mov	r1, r7
 80063c0:	4650      	mov	r0, sl
 80063c2:	47b0      	blx	r6
 80063c4:	f8d8 3000 	ldr.w	r3, [r8]
 80063c8:	6821      	ldr	r1, [r4, #0]
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	f8c8 2000 	str.w	r2, [r8]
 80063d0:	f011 0f20 	tst.w	r1, #32
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	d00f      	beq.n	80063f8 <_scanf_i+0x1c8>
 80063d8:	6018      	str	r0, [r3, #0]
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	60e3      	str	r3, [r4, #12]
 80063e0:	1bed      	subs	r5, r5, r7
 80063e2:	44ab      	add	fp, r5
 80063e4:	6925      	ldr	r5, [r4, #16]
 80063e6:	445d      	add	r5, fp
 80063e8:	6125      	str	r5, [r4, #16]
 80063ea:	2000      	movs	r0, #0
 80063ec:	b007      	add	sp, #28
 80063ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f2:	f04f 0b00 	mov.w	fp, #0
 80063f6:	e7ca      	b.n	800638e <_scanf_i+0x15e>
 80063f8:	07ca      	lsls	r2, r1, #31
 80063fa:	bf4c      	ite	mi
 80063fc:	8018      	strhmi	r0, [r3, #0]
 80063fe:	6018      	strpl	r0, [r3, #0]
 8006400:	e7eb      	b.n	80063da <_scanf_i+0x1aa>
 8006402:	2001      	movs	r0, #1
 8006404:	e7f2      	b.n	80063ec <_scanf_i+0x1bc>
 8006406:	bf00      	nop
 8006408:	08006980 	.word	0x08006980
 800640c:	08006691 	.word	0x08006691
 8006410:	08006595 	.word	0x08006595
 8006414:	080069f0 	.word	0x080069f0

08006418 <__sccl>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	780b      	ldrb	r3, [r1, #0]
 800641c:	4604      	mov	r4, r0
 800641e:	2b5e      	cmp	r3, #94	; 0x5e
 8006420:	bf0b      	itete	eq
 8006422:	784b      	ldrbeq	r3, [r1, #1]
 8006424:	1c48      	addne	r0, r1, #1
 8006426:	1c88      	addeq	r0, r1, #2
 8006428:	2200      	movne	r2, #0
 800642a:	bf08      	it	eq
 800642c:	2201      	moveq	r2, #1
 800642e:	1e61      	subs	r1, r4, #1
 8006430:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006434:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006438:	42a9      	cmp	r1, r5
 800643a:	d1fb      	bne.n	8006434 <__sccl+0x1c>
 800643c:	b90b      	cbnz	r3, 8006442 <__sccl+0x2a>
 800643e:	3801      	subs	r0, #1
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	f082 0101 	eor.w	r1, r2, #1
 8006446:	54e1      	strb	r1, [r4, r3]
 8006448:	1c42      	adds	r2, r0, #1
 800644a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800644e:	2d2d      	cmp	r5, #45	; 0x2d
 8006450:	f102 36ff 	add.w	r6, r2, #4294967295
 8006454:	4610      	mov	r0, r2
 8006456:	d006      	beq.n	8006466 <__sccl+0x4e>
 8006458:	2d5d      	cmp	r5, #93	; 0x5d
 800645a:	d0f1      	beq.n	8006440 <__sccl+0x28>
 800645c:	b90d      	cbnz	r5, 8006462 <__sccl+0x4a>
 800645e:	4630      	mov	r0, r6
 8006460:	e7ee      	b.n	8006440 <__sccl+0x28>
 8006462:	462b      	mov	r3, r5
 8006464:	e7ef      	b.n	8006446 <__sccl+0x2e>
 8006466:	7816      	ldrb	r6, [r2, #0]
 8006468:	2e5d      	cmp	r6, #93	; 0x5d
 800646a:	d0fa      	beq.n	8006462 <__sccl+0x4a>
 800646c:	42b3      	cmp	r3, r6
 800646e:	dcf8      	bgt.n	8006462 <__sccl+0x4a>
 8006470:	4618      	mov	r0, r3
 8006472:	3001      	adds	r0, #1
 8006474:	4286      	cmp	r6, r0
 8006476:	5421      	strb	r1, [r4, r0]
 8006478:	dcfb      	bgt.n	8006472 <__sccl+0x5a>
 800647a:	43d8      	mvns	r0, r3
 800647c:	4430      	add	r0, r6
 800647e:	1c5d      	adds	r5, r3, #1
 8006480:	42b3      	cmp	r3, r6
 8006482:	bfa8      	it	ge
 8006484:	2000      	movge	r0, #0
 8006486:	182b      	adds	r3, r5, r0
 8006488:	3202      	adds	r2, #2
 800648a:	e7de      	b.n	800644a <__sccl+0x32>

0800648c <_strtol_l.isra.0>:
 800648c:	2b01      	cmp	r3, #1
 800648e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006492:	d001      	beq.n	8006498 <_strtol_l.isra.0+0xc>
 8006494:	2b24      	cmp	r3, #36	; 0x24
 8006496:	d906      	bls.n	80064a6 <_strtol_l.isra.0+0x1a>
 8006498:	f7ff f930 	bl	80056fc <__errno>
 800649c:	2316      	movs	r3, #22
 800649e:	6003      	str	r3, [r0, #0]
 80064a0:	2000      	movs	r0, #0
 80064a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a6:	4f3a      	ldr	r7, [pc, #232]	; (8006590 <_strtol_l.isra.0+0x104>)
 80064a8:	468e      	mov	lr, r1
 80064aa:	4676      	mov	r6, lr
 80064ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80064b0:	5de5      	ldrb	r5, [r4, r7]
 80064b2:	f015 0508 	ands.w	r5, r5, #8
 80064b6:	d1f8      	bne.n	80064aa <_strtol_l.isra.0+0x1e>
 80064b8:	2c2d      	cmp	r4, #45	; 0x2d
 80064ba:	d134      	bne.n	8006526 <_strtol_l.isra.0+0x9a>
 80064bc:	f89e 4000 	ldrb.w	r4, [lr]
 80064c0:	f04f 0801 	mov.w	r8, #1
 80064c4:	f106 0e02 	add.w	lr, r6, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d05c      	beq.n	8006586 <_strtol_l.isra.0+0xfa>
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d10c      	bne.n	80064ea <_strtol_l.isra.0+0x5e>
 80064d0:	2c30      	cmp	r4, #48	; 0x30
 80064d2:	d10a      	bne.n	80064ea <_strtol_l.isra.0+0x5e>
 80064d4:	f89e 4000 	ldrb.w	r4, [lr]
 80064d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80064dc:	2c58      	cmp	r4, #88	; 0x58
 80064de:	d14d      	bne.n	800657c <_strtol_l.isra.0+0xf0>
 80064e0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80064e4:	2310      	movs	r3, #16
 80064e6:	f10e 0e02 	add.w	lr, lr, #2
 80064ea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80064ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80064f2:	2600      	movs	r6, #0
 80064f4:	fbbc f9f3 	udiv	r9, ip, r3
 80064f8:	4635      	mov	r5, r6
 80064fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80064fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006502:	2f09      	cmp	r7, #9
 8006504:	d818      	bhi.n	8006538 <_strtol_l.isra.0+0xac>
 8006506:	463c      	mov	r4, r7
 8006508:	42a3      	cmp	r3, r4
 800650a:	dd24      	ble.n	8006556 <_strtol_l.isra.0+0xca>
 800650c:	2e00      	cmp	r6, #0
 800650e:	db1f      	blt.n	8006550 <_strtol_l.isra.0+0xc4>
 8006510:	45a9      	cmp	r9, r5
 8006512:	d31d      	bcc.n	8006550 <_strtol_l.isra.0+0xc4>
 8006514:	d101      	bne.n	800651a <_strtol_l.isra.0+0x8e>
 8006516:	45a2      	cmp	sl, r4
 8006518:	db1a      	blt.n	8006550 <_strtol_l.isra.0+0xc4>
 800651a:	fb05 4503 	mla	r5, r5, r3, r4
 800651e:	2601      	movs	r6, #1
 8006520:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006524:	e7eb      	b.n	80064fe <_strtol_l.isra.0+0x72>
 8006526:	2c2b      	cmp	r4, #43	; 0x2b
 8006528:	bf08      	it	eq
 800652a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800652e:	46a8      	mov	r8, r5
 8006530:	bf08      	it	eq
 8006532:	f106 0e02 	addeq.w	lr, r6, #2
 8006536:	e7c7      	b.n	80064c8 <_strtol_l.isra.0+0x3c>
 8006538:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800653c:	2f19      	cmp	r7, #25
 800653e:	d801      	bhi.n	8006544 <_strtol_l.isra.0+0xb8>
 8006540:	3c37      	subs	r4, #55	; 0x37
 8006542:	e7e1      	b.n	8006508 <_strtol_l.isra.0+0x7c>
 8006544:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006548:	2f19      	cmp	r7, #25
 800654a:	d804      	bhi.n	8006556 <_strtol_l.isra.0+0xca>
 800654c:	3c57      	subs	r4, #87	; 0x57
 800654e:	e7db      	b.n	8006508 <_strtol_l.isra.0+0x7c>
 8006550:	f04f 36ff 	mov.w	r6, #4294967295
 8006554:	e7e4      	b.n	8006520 <_strtol_l.isra.0+0x94>
 8006556:	2e00      	cmp	r6, #0
 8006558:	da05      	bge.n	8006566 <_strtol_l.isra.0+0xda>
 800655a:	2322      	movs	r3, #34	; 0x22
 800655c:	6003      	str	r3, [r0, #0]
 800655e:	4665      	mov	r5, ip
 8006560:	b942      	cbnz	r2, 8006574 <_strtol_l.isra.0+0xe8>
 8006562:	4628      	mov	r0, r5
 8006564:	e79d      	b.n	80064a2 <_strtol_l.isra.0+0x16>
 8006566:	f1b8 0f00 	cmp.w	r8, #0
 800656a:	d000      	beq.n	800656e <_strtol_l.isra.0+0xe2>
 800656c:	426d      	negs	r5, r5
 800656e:	2a00      	cmp	r2, #0
 8006570:	d0f7      	beq.n	8006562 <_strtol_l.isra.0+0xd6>
 8006572:	b10e      	cbz	r6, 8006578 <_strtol_l.isra.0+0xec>
 8006574:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006578:	6011      	str	r1, [r2, #0]
 800657a:	e7f2      	b.n	8006562 <_strtol_l.isra.0+0xd6>
 800657c:	2430      	movs	r4, #48	; 0x30
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1b3      	bne.n	80064ea <_strtol_l.isra.0+0x5e>
 8006582:	2308      	movs	r3, #8
 8006584:	e7b1      	b.n	80064ea <_strtol_l.isra.0+0x5e>
 8006586:	2c30      	cmp	r4, #48	; 0x30
 8006588:	d0a4      	beq.n	80064d4 <_strtol_l.isra.0+0x48>
 800658a:	230a      	movs	r3, #10
 800658c:	e7ad      	b.n	80064ea <_strtol_l.isra.0+0x5e>
 800658e:	bf00      	nop
 8006590:	080069f3 	.word	0x080069f3

08006594 <_strtol_r>:
 8006594:	f7ff bf7a 	b.w	800648c <_strtol_l.isra.0>

08006598 <_strtoul_l.isra.0>:
 8006598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800659c:	4e3b      	ldr	r6, [pc, #236]	; (800668c <_strtoul_l.isra.0+0xf4>)
 800659e:	4686      	mov	lr, r0
 80065a0:	468c      	mov	ip, r1
 80065a2:	4660      	mov	r0, ip
 80065a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80065a8:	5da5      	ldrb	r5, [r4, r6]
 80065aa:	f015 0508 	ands.w	r5, r5, #8
 80065ae:	d1f8      	bne.n	80065a2 <_strtoul_l.isra.0+0xa>
 80065b0:	2c2d      	cmp	r4, #45	; 0x2d
 80065b2:	d134      	bne.n	800661e <_strtoul_l.isra.0+0x86>
 80065b4:	f89c 4000 	ldrb.w	r4, [ip]
 80065b8:	f04f 0801 	mov.w	r8, #1
 80065bc:	f100 0c02 	add.w	ip, r0, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d05e      	beq.n	8006682 <_strtoul_l.isra.0+0xea>
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d10c      	bne.n	80065e2 <_strtoul_l.isra.0+0x4a>
 80065c8:	2c30      	cmp	r4, #48	; 0x30
 80065ca:	d10a      	bne.n	80065e2 <_strtoul_l.isra.0+0x4a>
 80065cc:	f89c 0000 	ldrb.w	r0, [ip]
 80065d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80065d4:	2858      	cmp	r0, #88	; 0x58
 80065d6:	d14f      	bne.n	8006678 <_strtoul_l.isra.0+0xe0>
 80065d8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80065dc:	2310      	movs	r3, #16
 80065de:	f10c 0c02 	add.w	ip, ip, #2
 80065e2:	f04f 37ff 	mov.w	r7, #4294967295
 80065e6:	2500      	movs	r5, #0
 80065e8:	fbb7 f7f3 	udiv	r7, r7, r3
 80065ec:	fb03 f907 	mul.w	r9, r3, r7
 80065f0:	ea6f 0909 	mvn.w	r9, r9
 80065f4:	4628      	mov	r0, r5
 80065f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80065fa:	2e09      	cmp	r6, #9
 80065fc:	d818      	bhi.n	8006630 <_strtoul_l.isra.0+0x98>
 80065fe:	4634      	mov	r4, r6
 8006600:	42a3      	cmp	r3, r4
 8006602:	dd24      	ble.n	800664e <_strtoul_l.isra.0+0xb6>
 8006604:	2d00      	cmp	r5, #0
 8006606:	db1f      	blt.n	8006648 <_strtoul_l.isra.0+0xb0>
 8006608:	4287      	cmp	r7, r0
 800660a:	d31d      	bcc.n	8006648 <_strtoul_l.isra.0+0xb0>
 800660c:	d101      	bne.n	8006612 <_strtoul_l.isra.0+0x7a>
 800660e:	45a1      	cmp	r9, r4
 8006610:	db1a      	blt.n	8006648 <_strtoul_l.isra.0+0xb0>
 8006612:	fb00 4003 	mla	r0, r0, r3, r4
 8006616:	2501      	movs	r5, #1
 8006618:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800661c:	e7eb      	b.n	80065f6 <_strtoul_l.isra.0+0x5e>
 800661e:	2c2b      	cmp	r4, #43	; 0x2b
 8006620:	bf08      	it	eq
 8006622:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006626:	46a8      	mov	r8, r5
 8006628:	bf08      	it	eq
 800662a:	f100 0c02 	addeq.w	ip, r0, #2
 800662e:	e7c7      	b.n	80065c0 <_strtoul_l.isra.0+0x28>
 8006630:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006634:	2e19      	cmp	r6, #25
 8006636:	d801      	bhi.n	800663c <_strtoul_l.isra.0+0xa4>
 8006638:	3c37      	subs	r4, #55	; 0x37
 800663a:	e7e1      	b.n	8006600 <_strtoul_l.isra.0+0x68>
 800663c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006640:	2e19      	cmp	r6, #25
 8006642:	d804      	bhi.n	800664e <_strtoul_l.isra.0+0xb6>
 8006644:	3c57      	subs	r4, #87	; 0x57
 8006646:	e7db      	b.n	8006600 <_strtoul_l.isra.0+0x68>
 8006648:	f04f 35ff 	mov.w	r5, #4294967295
 800664c:	e7e4      	b.n	8006618 <_strtoul_l.isra.0+0x80>
 800664e:	2d00      	cmp	r5, #0
 8006650:	da07      	bge.n	8006662 <_strtoul_l.isra.0+0xca>
 8006652:	2322      	movs	r3, #34	; 0x22
 8006654:	f8ce 3000 	str.w	r3, [lr]
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	b942      	cbnz	r2, 8006670 <_strtoul_l.isra.0+0xd8>
 800665e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006662:	f1b8 0f00 	cmp.w	r8, #0
 8006666:	d000      	beq.n	800666a <_strtoul_l.isra.0+0xd2>
 8006668:	4240      	negs	r0, r0
 800666a:	2a00      	cmp	r2, #0
 800666c:	d0f7      	beq.n	800665e <_strtoul_l.isra.0+0xc6>
 800666e:	b10d      	cbz	r5, 8006674 <_strtoul_l.isra.0+0xdc>
 8006670:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006674:	6011      	str	r1, [r2, #0]
 8006676:	e7f2      	b.n	800665e <_strtoul_l.isra.0+0xc6>
 8006678:	2430      	movs	r4, #48	; 0x30
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1b1      	bne.n	80065e2 <_strtoul_l.isra.0+0x4a>
 800667e:	2308      	movs	r3, #8
 8006680:	e7af      	b.n	80065e2 <_strtoul_l.isra.0+0x4a>
 8006682:	2c30      	cmp	r4, #48	; 0x30
 8006684:	d0a2      	beq.n	80065cc <_strtoul_l.isra.0+0x34>
 8006686:	230a      	movs	r3, #10
 8006688:	e7ab      	b.n	80065e2 <_strtoul_l.isra.0+0x4a>
 800668a:	bf00      	nop
 800668c:	080069f3 	.word	0x080069f3

08006690 <_strtoul_r>:
 8006690:	f7ff bf82 	b.w	8006598 <_strtoul_l.isra.0>

08006694 <__submore>:
 8006694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006698:	460c      	mov	r4, r1
 800669a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800669c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a0:	4299      	cmp	r1, r3
 80066a2:	d11d      	bne.n	80066e0 <__submore+0x4c>
 80066a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066a8:	f000 f8a8 	bl	80067fc <_malloc_r>
 80066ac:	b918      	cbnz	r0, 80066b6 <__submore+0x22>
 80066ae:	f04f 30ff 	mov.w	r0, #4294967295
 80066b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80066bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80066c0:	6360      	str	r0, [r4, #52]	; 0x34
 80066c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80066c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80066ca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80066ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80066d2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80066d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80066da:	6020      	str	r0, [r4, #0]
 80066dc:	2000      	movs	r0, #0
 80066de:	e7e8      	b.n	80066b2 <__submore+0x1e>
 80066e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80066e2:	0077      	lsls	r7, r6, #1
 80066e4:	463a      	mov	r2, r7
 80066e6:	f000 f8e3 	bl	80068b0 <_realloc_r>
 80066ea:	4605      	mov	r5, r0
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d0de      	beq.n	80066ae <__submore+0x1a>
 80066f0:	eb00 0806 	add.w	r8, r0, r6
 80066f4:	4601      	mov	r1, r0
 80066f6:	4632      	mov	r2, r6
 80066f8:	4640      	mov	r0, r8
 80066fa:	f000 f807 	bl	800670c <memcpy>
 80066fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006702:	f8c4 8000 	str.w	r8, [r4]
 8006706:	e7e9      	b.n	80066dc <__submore+0x48>

08006708 <__retarget_lock_acquire_recursive>:
 8006708:	4770      	bx	lr

0800670a <__retarget_lock_release_recursive>:
 800670a:	4770      	bx	lr

0800670c <memcpy>:
 800670c:	440a      	add	r2, r1
 800670e:	4291      	cmp	r1, r2
 8006710:	f100 33ff 	add.w	r3, r0, #4294967295
 8006714:	d100      	bne.n	8006718 <memcpy+0xc>
 8006716:	4770      	bx	lr
 8006718:	b510      	push	{r4, lr}
 800671a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800671e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006722:	4291      	cmp	r1, r2
 8006724:	d1f9      	bne.n	800671a <memcpy+0xe>
 8006726:	bd10      	pop	{r4, pc}

08006728 <memmove>:
 8006728:	4288      	cmp	r0, r1
 800672a:	b510      	push	{r4, lr}
 800672c:	eb01 0402 	add.w	r4, r1, r2
 8006730:	d902      	bls.n	8006738 <memmove+0x10>
 8006732:	4284      	cmp	r4, r0
 8006734:	4623      	mov	r3, r4
 8006736:	d807      	bhi.n	8006748 <memmove+0x20>
 8006738:	1e43      	subs	r3, r0, #1
 800673a:	42a1      	cmp	r1, r4
 800673c:	d008      	beq.n	8006750 <memmove+0x28>
 800673e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006746:	e7f8      	b.n	800673a <memmove+0x12>
 8006748:	4402      	add	r2, r0
 800674a:	4601      	mov	r1, r0
 800674c:	428a      	cmp	r2, r1
 800674e:	d100      	bne.n	8006752 <memmove+0x2a>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800675a:	e7f7      	b.n	800674c <memmove+0x24>

0800675c <_free_r>:
 800675c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800675e:	2900      	cmp	r1, #0
 8006760:	d048      	beq.n	80067f4 <_free_r+0x98>
 8006762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006766:	9001      	str	r0, [sp, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f1a1 0404 	sub.w	r4, r1, #4
 800676e:	bfb8      	it	lt
 8006770:	18e4      	addlt	r4, r4, r3
 8006772:	f000 f8d3 	bl	800691c <__malloc_lock>
 8006776:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <_free_r+0x9c>)
 8006778:	9801      	ldr	r0, [sp, #4]
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	4615      	mov	r5, r2
 800677e:	b933      	cbnz	r3, 800678e <_free_r+0x32>
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	6014      	str	r4, [r2, #0]
 8006784:	b003      	add	sp, #12
 8006786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800678a:	f000 b8cd 	b.w	8006928 <__malloc_unlock>
 800678e:	42a3      	cmp	r3, r4
 8006790:	d90b      	bls.n	80067aa <_free_r+0x4e>
 8006792:	6821      	ldr	r1, [r4, #0]
 8006794:	1862      	adds	r2, r4, r1
 8006796:	4293      	cmp	r3, r2
 8006798:	bf04      	itt	eq
 800679a:	681a      	ldreq	r2, [r3, #0]
 800679c:	685b      	ldreq	r3, [r3, #4]
 800679e:	6063      	str	r3, [r4, #4]
 80067a0:	bf04      	itt	eq
 80067a2:	1852      	addeq	r2, r2, r1
 80067a4:	6022      	streq	r2, [r4, #0]
 80067a6:	602c      	str	r4, [r5, #0]
 80067a8:	e7ec      	b.n	8006784 <_free_r+0x28>
 80067aa:	461a      	mov	r2, r3
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b10b      	cbz	r3, 80067b4 <_free_r+0x58>
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	d9fa      	bls.n	80067aa <_free_r+0x4e>
 80067b4:	6811      	ldr	r1, [r2, #0]
 80067b6:	1855      	adds	r5, r2, r1
 80067b8:	42a5      	cmp	r5, r4
 80067ba:	d10b      	bne.n	80067d4 <_free_r+0x78>
 80067bc:	6824      	ldr	r4, [r4, #0]
 80067be:	4421      	add	r1, r4
 80067c0:	1854      	adds	r4, r2, r1
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	6011      	str	r1, [r2, #0]
 80067c6:	d1dd      	bne.n	8006784 <_free_r+0x28>
 80067c8:	681c      	ldr	r4, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	6053      	str	r3, [r2, #4]
 80067ce:	4421      	add	r1, r4
 80067d0:	6011      	str	r1, [r2, #0]
 80067d2:	e7d7      	b.n	8006784 <_free_r+0x28>
 80067d4:	d902      	bls.n	80067dc <_free_r+0x80>
 80067d6:	230c      	movs	r3, #12
 80067d8:	6003      	str	r3, [r0, #0]
 80067da:	e7d3      	b.n	8006784 <_free_r+0x28>
 80067dc:	6825      	ldr	r5, [r4, #0]
 80067de:	1961      	adds	r1, r4, r5
 80067e0:	428b      	cmp	r3, r1
 80067e2:	bf04      	itt	eq
 80067e4:	6819      	ldreq	r1, [r3, #0]
 80067e6:	685b      	ldreq	r3, [r3, #4]
 80067e8:	6063      	str	r3, [r4, #4]
 80067ea:	bf04      	itt	eq
 80067ec:	1949      	addeq	r1, r1, r5
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	6054      	str	r4, [r2, #4]
 80067f2:	e7c7      	b.n	8006784 <_free_r+0x28>
 80067f4:	b003      	add	sp, #12
 80067f6:	bd30      	pop	{r4, r5, pc}
 80067f8:	20000094 	.word	0x20000094

080067fc <_malloc_r>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	1ccd      	adds	r5, r1, #3
 8006800:	f025 0503 	bic.w	r5, r5, #3
 8006804:	3508      	adds	r5, #8
 8006806:	2d0c      	cmp	r5, #12
 8006808:	bf38      	it	cc
 800680a:	250c      	movcc	r5, #12
 800680c:	2d00      	cmp	r5, #0
 800680e:	4606      	mov	r6, r0
 8006810:	db01      	blt.n	8006816 <_malloc_r+0x1a>
 8006812:	42a9      	cmp	r1, r5
 8006814:	d903      	bls.n	800681e <_malloc_r+0x22>
 8006816:	230c      	movs	r3, #12
 8006818:	6033      	str	r3, [r6, #0]
 800681a:	2000      	movs	r0, #0
 800681c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800681e:	f000 f87d 	bl	800691c <__malloc_lock>
 8006822:	4921      	ldr	r1, [pc, #132]	; (80068a8 <_malloc_r+0xac>)
 8006824:	680a      	ldr	r2, [r1, #0]
 8006826:	4614      	mov	r4, r2
 8006828:	b99c      	cbnz	r4, 8006852 <_malloc_r+0x56>
 800682a:	4f20      	ldr	r7, [pc, #128]	; (80068ac <_malloc_r+0xb0>)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	b923      	cbnz	r3, 800683a <_malloc_r+0x3e>
 8006830:	4621      	mov	r1, r4
 8006832:	4630      	mov	r0, r6
 8006834:	f000 f862 	bl	80068fc <_sbrk_r>
 8006838:	6038      	str	r0, [r7, #0]
 800683a:	4629      	mov	r1, r5
 800683c:	4630      	mov	r0, r6
 800683e:	f000 f85d 	bl	80068fc <_sbrk_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d123      	bne.n	800688e <_malloc_r+0x92>
 8006846:	230c      	movs	r3, #12
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	4630      	mov	r0, r6
 800684c:	f000 f86c 	bl	8006928 <__malloc_unlock>
 8006850:	e7e3      	b.n	800681a <_malloc_r+0x1e>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	1b5b      	subs	r3, r3, r5
 8006856:	d417      	bmi.n	8006888 <_malloc_r+0x8c>
 8006858:	2b0b      	cmp	r3, #11
 800685a:	d903      	bls.n	8006864 <_malloc_r+0x68>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	441c      	add	r4, r3
 8006860:	6025      	str	r5, [r4, #0]
 8006862:	e004      	b.n	800686e <_malloc_r+0x72>
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	42a2      	cmp	r2, r4
 8006868:	bf0c      	ite	eq
 800686a:	600b      	streq	r3, [r1, #0]
 800686c:	6053      	strne	r3, [r2, #4]
 800686e:	4630      	mov	r0, r6
 8006870:	f000 f85a 	bl	8006928 <__malloc_unlock>
 8006874:	f104 000b 	add.w	r0, r4, #11
 8006878:	1d23      	adds	r3, r4, #4
 800687a:	f020 0007 	bic.w	r0, r0, #7
 800687e:	1ac2      	subs	r2, r0, r3
 8006880:	d0cc      	beq.n	800681c <_malloc_r+0x20>
 8006882:	1a1b      	subs	r3, r3, r0
 8006884:	50a3      	str	r3, [r4, r2]
 8006886:	e7c9      	b.n	800681c <_malloc_r+0x20>
 8006888:	4622      	mov	r2, r4
 800688a:	6864      	ldr	r4, [r4, #4]
 800688c:	e7cc      	b.n	8006828 <_malloc_r+0x2c>
 800688e:	1cc4      	adds	r4, r0, #3
 8006890:	f024 0403 	bic.w	r4, r4, #3
 8006894:	42a0      	cmp	r0, r4
 8006896:	d0e3      	beq.n	8006860 <_malloc_r+0x64>
 8006898:	1a21      	subs	r1, r4, r0
 800689a:	4630      	mov	r0, r6
 800689c:	f000 f82e 	bl	80068fc <_sbrk_r>
 80068a0:	3001      	adds	r0, #1
 80068a2:	d1dd      	bne.n	8006860 <_malloc_r+0x64>
 80068a4:	e7cf      	b.n	8006846 <_malloc_r+0x4a>
 80068a6:	bf00      	nop
 80068a8:	20000094 	.word	0x20000094
 80068ac:	20000098 	.word	0x20000098

080068b0 <_realloc_r>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	4607      	mov	r7, r0
 80068b4:	4614      	mov	r4, r2
 80068b6:	460e      	mov	r6, r1
 80068b8:	b921      	cbnz	r1, 80068c4 <_realloc_r+0x14>
 80068ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068be:	4611      	mov	r1, r2
 80068c0:	f7ff bf9c 	b.w	80067fc <_malloc_r>
 80068c4:	b922      	cbnz	r2, 80068d0 <_realloc_r+0x20>
 80068c6:	f7ff ff49 	bl	800675c <_free_r>
 80068ca:	4625      	mov	r5, r4
 80068cc:	4628      	mov	r0, r5
 80068ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d0:	f000 f830 	bl	8006934 <_malloc_usable_size_r>
 80068d4:	42a0      	cmp	r0, r4
 80068d6:	d20f      	bcs.n	80068f8 <_realloc_r+0x48>
 80068d8:	4621      	mov	r1, r4
 80068da:	4638      	mov	r0, r7
 80068dc:	f7ff ff8e 	bl	80067fc <_malloc_r>
 80068e0:	4605      	mov	r5, r0
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d0f2      	beq.n	80068cc <_realloc_r+0x1c>
 80068e6:	4631      	mov	r1, r6
 80068e8:	4622      	mov	r2, r4
 80068ea:	f7ff ff0f 	bl	800670c <memcpy>
 80068ee:	4631      	mov	r1, r6
 80068f0:	4638      	mov	r0, r7
 80068f2:	f7ff ff33 	bl	800675c <_free_r>
 80068f6:	e7e9      	b.n	80068cc <_realloc_r+0x1c>
 80068f8:	4635      	mov	r5, r6
 80068fa:	e7e7      	b.n	80068cc <_realloc_r+0x1c>

080068fc <_sbrk_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d06      	ldr	r5, [pc, #24]	; (8006918 <_sbrk_r+0x1c>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	f7fa f89a 	bl	8000a40 <_sbrk>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_sbrk_r+0x1a>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_sbrk_r+0x1a>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	200005d8 	.word	0x200005d8

0800691c <__malloc_lock>:
 800691c:	4801      	ldr	r0, [pc, #4]	; (8006924 <__malloc_lock+0x8>)
 800691e:	f7ff bef3 	b.w	8006708 <__retarget_lock_acquire_recursive>
 8006922:	bf00      	nop
 8006924:	200005e0 	.word	0x200005e0

08006928 <__malloc_unlock>:
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <__malloc_unlock+0x8>)
 800692a:	f7ff beee 	b.w	800670a <__retarget_lock_release_recursive>
 800692e:	bf00      	nop
 8006930:	200005e0 	.word	0x200005e0

08006934 <_malloc_usable_size_r>:
 8006934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006938:	1f18      	subs	r0, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	bfbc      	itt	lt
 800693e:	580b      	ldrlt	r3, [r1, r0]
 8006940:	18c0      	addlt	r0, r0, r3
 8006942:	4770      	bx	lr

08006944 <_init>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr

08006950 <_fini>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr
