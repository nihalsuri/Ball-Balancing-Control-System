
SM_FT_VCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007688  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007870  08007870  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007878  08007878  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007878  08007878  00017878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000000c  0800788c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  0800788c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a45b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c9  00000000  00000000  0003a497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027db3  00000000  00000000  00040488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4f2  00000000  00000000  0006823b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4aab  00000000  00000000  0008372d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001781d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000598c  00000000  00000000  0017822c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007838 	.word	0x08007838

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08007838 	.word	0x08007838

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b96e 	b.w	8000cd8 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468c      	mov	ip, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f040 8083 	bne.w	8000b2a <__udivmoddi4+0x116>
 8000a24:	428a      	cmp	r2, r1
 8000a26:	4617      	mov	r7, r2
 8000a28:	d947      	bls.n	8000aba <__udivmoddi4+0xa6>
 8000a2a:	fab2 f282 	clz	r2, r2
 8000a2e:	b142      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a30:	f1c2 0020 	rsb	r0, r2, #32
 8000a34:	fa24 f000 	lsr.w	r0, r4, r0
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	4097      	lsls	r7, r2
 8000a3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a40:	4094      	lsls	r4, r2
 8000a42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a46:	0c23      	lsrs	r3, r4, #16
 8000a48:	fbbc f6f8 	udiv	r6, ip, r8
 8000a4c:	fa1f fe87 	uxth.w	lr, r7
 8000a50:	fb08 c116 	mls	r1, r8, r6, ip
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f10e 	mul.w	r1, r6, lr
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d909      	bls.n	8000a74 <__udivmoddi4+0x60>
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a66:	f080 8119 	bcs.w	8000c9c <__udivmoddi4+0x288>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 8116 	bls.w	8000c9c <__udivmoddi4+0x288>
 8000a70:	3e02      	subs	r6, #2
 8000a72:	443b      	add	r3, r7
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	45a6      	cmp	lr, r4
 8000a8a:	d909      	bls.n	8000aa0 <__udivmoddi4+0x8c>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a92:	f080 8105 	bcs.w	8000ca0 <__udivmoddi4+0x28c>
 8000a96:	45a6      	cmp	lr, r4
 8000a98:	f240 8102 	bls.w	8000ca0 <__udivmoddi4+0x28c>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	443c      	add	r4, r7
 8000aa0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa4:	eba4 040e 	sub.w	r4, r4, lr
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	b11d      	cbz	r5, 8000ab4 <__udivmoddi4+0xa0>
 8000aac:	40d4      	lsrs	r4, r2
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab4:	4631      	mov	r1, r6
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	b902      	cbnz	r2, 8000abe <__udivmoddi4+0xaa>
 8000abc:	deff      	udf	#255	; 0xff
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d150      	bne.n	8000b68 <__udivmoddi4+0x154>
 8000ac6:	1bcb      	subs	r3, r1, r7
 8000ac8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000acc:	fa1f f887 	uxth.w	r8, r7
 8000ad0:	2601      	movs	r6, #1
 8000ad2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ad6:	0c21      	lsrs	r1, r4, #16
 8000ad8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000adc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0xe4>
 8000ae8:	1879      	adds	r1, r7, r1
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0xe2>
 8000af0:	428b      	cmp	r3, r1
 8000af2:	f200 80e9 	bhi.w	8000cc8 <__udivmoddi4+0x2b4>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1ac9      	subs	r1, r1, r3
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x10c>
 8000b10:	193c      	adds	r4, r7, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x10a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80d9 	bhi.w	8000cd0 <__udivmoddi4+0x2bc>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e7bf      	b.n	8000aaa <__udivmoddi4+0x96>
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0x12e>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	f000 80b1 	beq.w	8000c96 <__udivmoddi4+0x282>
 8000b34:	2600      	movs	r6, #0
 8000b36:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f683 	clz	r6, r3
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d14a      	bne.n	8000be0 <__udivmoddi4+0x1cc>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0x140>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80b8 	bhi.w	8000cc4 <__udivmoddi4+0x2b0>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0103 	sbc.w	r1, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	468c      	mov	ip, r1
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0a8      	beq.n	8000ab4 <__udivmoddi4+0xa0>
 8000b62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b66:	e7a5      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000b68:	f1c2 0320 	rsb	r3, r2, #32
 8000b6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b70:	4097      	lsls	r7, r2
 8000b72:	fa01 f002 	lsl.w	r0, r1, r2
 8000b76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b7a:	40d9      	lsrs	r1, r3
 8000b7c:	4330      	orrs	r0, r6
 8000b7e:	0c03      	lsrs	r3, r0, #16
 8000b80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f108 	mul.w	r1, r6, r8
 8000b94:	4299      	cmp	r1, r3
 8000b96:	fa04 f402 	lsl.w	r4, r4, r2
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x19c>
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ba2:	f080 808d 	bcs.w	8000cc0 <__udivmoddi4+0x2ac>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 808a 	bls.w	8000cc0 <__udivmoddi4+0x2ac>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	443b      	add	r3, r7
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b281      	uxth	r1, r0
 8000bb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc0:	fb00 f308 	mul.w	r3, r0, r8
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x1c4>
 8000bc8:	1879      	adds	r1, r7, r1
 8000bca:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bce:	d273      	bcs.n	8000cb8 <__udivmoddi4+0x2a4>
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d971      	bls.n	8000cb8 <__udivmoddi4+0x2a4>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4439      	add	r1, r7
 8000bd8:	1acb      	subs	r3, r1, r3
 8000bda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bde:	e778      	b.n	8000ad2 <__udivmoddi4+0xbe>
 8000be0:	f1c6 0c20 	rsb	ip, r6, #32
 8000be4:	fa03 f406 	lsl.w	r4, r3, r6
 8000be8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bec:	431c      	orrs	r4, r3
 8000bee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bfa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	0c3b      	lsrs	r3, r7, #16
 8000c02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c06:	fa1f f884 	uxth.w	r8, r4
 8000c0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c12:	fb09 fa08 	mul.w	sl, r9, r8
 8000c16:	458a      	cmp	sl, r1
 8000c18:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x220>
 8000c22:	1861      	adds	r1, r4, r1
 8000c24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c28:	d248      	bcs.n	8000cbc <__udivmoddi4+0x2a8>
 8000c2a:	458a      	cmp	sl, r1
 8000c2c:	d946      	bls.n	8000cbc <__udivmoddi4+0x2a8>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4421      	add	r1, r4
 8000c34:	eba1 010a 	sub.w	r1, r1, sl
 8000c38:	b2bf      	uxth	r7, r7
 8000c3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c46:	fb00 f808 	mul.w	r8, r0, r8
 8000c4a:	45b8      	cmp	r8, r7
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x24a>
 8000c4e:	19e7      	adds	r7, r4, r7
 8000c50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c54:	d22e      	bcs.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c56:	45b8      	cmp	r8, r7
 8000c58:	d92c      	bls.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4427      	add	r7, r4
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	eba7 0708 	sub.w	r7, r7, r8
 8000c66:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6a:	454f      	cmp	r7, r9
 8000c6c:	46c6      	mov	lr, r8
 8000c6e:	4649      	mov	r1, r9
 8000c70:	d31a      	bcc.n	8000ca8 <__udivmoddi4+0x294>
 8000c72:	d017      	beq.n	8000ca4 <__udivmoddi4+0x290>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x27a>
 8000c76:	ebb3 020e 	subs.w	r2, r3, lr
 8000c7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c82:	40f2      	lsrs	r2, r6
 8000c84:	ea4c 0202 	orr.w	r2, ip, r2
 8000c88:	40f7      	lsrs	r7, r6
 8000c8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	462e      	mov	r6, r5
 8000c98:	4628      	mov	r0, r5
 8000c9a:	e70b      	b.n	8000ab4 <__udivmoddi4+0xa0>
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0x60>
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	e6fd      	b.n	8000aa0 <__udivmoddi4+0x8c>
 8000ca4:	4543      	cmp	r3, r8
 8000ca6:	d2e5      	bcs.n	8000c74 <__udivmoddi4+0x260>
 8000ca8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cac:	eb69 0104 	sbc.w	r1, r9, r4
 8000cb0:	3801      	subs	r0, #1
 8000cb2:	e7df      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	e7d2      	b.n	8000c5e <__udivmoddi4+0x24a>
 8000cb8:	4660      	mov	r0, ip
 8000cba:	e78d      	b.n	8000bd8 <__udivmoddi4+0x1c4>
 8000cbc:	4681      	mov	r9, r0
 8000cbe:	e7b9      	b.n	8000c34 <__udivmoddi4+0x220>
 8000cc0:	4666      	mov	r6, ip
 8000cc2:	e775      	b.n	8000bb0 <__udivmoddi4+0x19c>
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	e74a      	b.n	8000b5e <__udivmoddi4+0x14a>
 8000cc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ccc:	4439      	add	r1, r7
 8000cce:	e713      	b.n	8000af8 <__udivmoddi4+0xe4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	e724      	b.n	8000b20 <__udivmoddi4+0x10c>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_idiv0>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000cf0:	4a28      	ldr	r2, [pc, #160]	; (8000d94 <MX_ADC1_Init+0xb8>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000cf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d08:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <MX_ADC1_Init+0xbc>)
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d3c:	4814      	ldr	r0, [pc, #80]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d3e:	f001 f8c9 	bl	8001ed4 <HAL_ADC_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d48:	f000 fc42 	bl	80015d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d54:	2307      	movs	r3, #7
 8000d56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d5e:	f001 fa5d 	bl	800221c <HAL_ADC_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d68:	f000 fc32 	bl	80015d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d6c:	230a      	movs	r3, #10
 8000d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d7a:	f001 fa4f 	bl	800221c <HAL_ADC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d84:	f000 fc24 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000038 	.word	0x20000038
 8000d94:	40012000 	.word	0x40012000
 8000d98:	0f000001 	.word	0x0f000001

08000d9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <HAL_ADC_MspInit+0x114>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d173      	bne.n	8000ea6 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dbe:	4b3d      	ldr	r3, [pc, #244]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a3c      	ldr	r2, [pc, #240]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_ADC_MspInit+0x118>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4827      	ldr	r0, [pc, #156]	; (8000eb8 <HAL_ADC_MspInit+0x11c>)
 8000e1a:	f002 f8e9 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4822      	ldr	r0, [pc, #136]	; (8000ebc <HAL_ADC_MspInit+0x120>)
 8000e32:	f002 f8dd 	bl	8002ff0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e38:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_ADC_MspInit+0x128>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e7c:	f001 fd2e 	bl	80028dc <HAL_DMA_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000e86:	f000 fba3 	bl	80015d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_ADC_MspInit+0x124>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2012      	movs	r0, #18
 8000e9c:	f001 fce7 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ea0:	2012      	movs	r0, #18
 8000ea2:	f001 fd00 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	20000080 	.word	0x20000080
 8000ec4:	40026410 	.word	0x40026410

08000ec8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_DMA_Init+0x38>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <MX_DMA_Init+0x38>)
 8000ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_DMA_Init+0x38>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2038      	movs	r0, #56	; 0x38
 8000eec:	f001 fcbf 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ef0:	2038      	movs	r0, #56	; 0x38
 8000ef2:	f001 fcd8 	bl	80028a6 <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	4b93      	ldr	r3, [pc, #588]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a92      	ldr	r2, [pc, #584]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b90      	ldr	r3, [pc, #576]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b8d      	ldr	r3, [pc, #564]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a8c      	ldr	r2, [pc, #560]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b8a      	ldr	r3, [pc, #552]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	4b87      	ldr	r3, [pc, #540]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a86      	ldr	r2, [pc, #536]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b84      	ldr	r3, [pc, #528]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b81      	ldr	r3, [pc, #516]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a80      	ldr	r2, [pc, #512]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b7e      	ldr	r3, [pc, #504]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b7b      	ldr	r3, [pc, #492]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a7a      	ldr	r2, [pc, #488]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b78      	ldr	r3, [pc, #480]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b75      	ldr	r3, [pc, #468]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a74      	ldr	r2, [pc, #464]	; (8001168 <MX_GPIO_Init+0x264>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b72      	ldr	r3, [pc, #456]	; (8001168 <MX_GPIO_Init+0x264>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000faa:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <MX_GPIO_Init+0x264>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <MX_GPIO_Init+0x264>)
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b6c      	ldr	r3, [pc, #432]	; (8001168 <MX_GPIO_Init+0x264>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2118      	movs	r1, #24
 8000fc6:	4869      	ldr	r0, [pc, #420]	; (800116c <MX_GPIO_Init+0x268>)
 8000fc8:	f002 f9be 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fd2:	4867      	ldr	r0, [pc, #412]	; (8001170 <MX_GPIO_Init+0x26c>)
 8000fd4:	f002 f9b8 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	4865      	ldr	r0, [pc, #404]	; (8001174 <MX_GPIO_Init+0x270>)
 8000fde:	f002 f9b3 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	4864      	ldr	r0, [pc, #400]	; (8001178 <MX_GPIO_Init+0x274>)
 8000fe8:	f002 f9ae 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 8000fec:	2318      	movs	r3, #24
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	485a      	ldr	r0, [pc, #360]	; (800116c <MX_GPIO_Init+0x268>)
 8001004:	f001 fff4 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <MX_GPIO_Init+0x278>)
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	4856      	ldr	r0, [pc, #344]	; (8001178 <MX_GPIO_Init+0x274>)
 800101e:	f001 ffe7 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001022:	2332      	movs	r3, #50	; 0x32
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	484e      	ldr	r0, [pc, #312]	; (8001178 <MX_GPIO_Init+0x274>)
 800103e:	f001 ffd7 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001042:	2386      	movs	r3, #134	; 0x86
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001052:	230b      	movs	r3, #11
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4848      	ldr	r0, [pc, #288]	; (8001180 <MX_GPIO_Init+0x27c>)
 800105e:	f001 ffc7 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001062:	f244 0381 	movw	r3, #16513	; 0x4081
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	483d      	ldr	r0, [pc, #244]	; (8001170 <MX_GPIO_Init+0x26c>)
 800107c:	f001 ffb8 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001092:	230b      	movs	r3, #11
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4834      	ldr	r0, [pc, #208]	; (8001170 <MX_GPIO_Init+0x26c>)
 800109e:	f001 ffa7 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a2:	2340      	movs	r3, #64	; 0x40
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	482e      	ldr	r0, [pc, #184]	; (8001174 <MX_GPIO_Init+0x270>)
 80010ba:	f001 ff99 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4828      	ldr	r0, [pc, #160]	; (8001174 <MX_GPIO_Init+0x270>)
 80010d2:	f001 ff8d 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4822      	ldr	r0, [pc, #136]	; (8001178 <MX_GPIO_Init+0x274>)
 80010ee:	f001 ff7f 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001104:	230a      	movs	r3, #10
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	481c      	ldr	r0, [pc, #112]	; (8001180 <MX_GPIO_Init+0x27c>)
 8001110:	f001 ff6e 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4815      	ldr	r0, [pc, #84]	; (8001180 <MX_GPIO_Init+0x27c>)
 800112a:	f001 ff61 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800112e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001140:	230b      	movs	r3, #11
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	480a      	ldr	r0, [pc, #40]	; (8001174 <MX_GPIO_Init+0x270>)
 800114c:	f001 ff50 	bl	8002ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2028      	movs	r0, #40	; 0x28
 8001156:	f001 fb8a 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800115a:	2028      	movs	r0, #40	; 0x28
 800115c:	f001 fba3 	bl	80028a6 <HAL_NVIC_EnableIRQ>

}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40021000 	.word	0x40021000
 8001170:	40020400 	.word	0x40020400
 8001174:	40021800 	.word	0x40021800
 8001178:	40020800 	.word	0x40020800
 800117c:	10110000 	.word	0x10110000
 8001180:	40020000 	.word	0x40020000

08001184 <delay_us>:
 * @param[in] htim8 :  Input Capture timer handler
 * @return None
 */

void delay_us(uint16_t time, TIM_HandleTypeDef *htim8)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim8, 0);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (htim8) < time);
 8001198:	bf00      	nop
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d3f9      	bcc.n	800119a <delay_us+0x16>

}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	0000      	movs	r0, r0
	...

080011b8 <HAL_TIM_IC_CaptureCallback>:
 * @return None
 */


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim8)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	if (htim8->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7f1b      	ldrb	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	f040 8083 	bne.w	80012d0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80011ca:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d11a      	bne.n	8001208 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim8, TIM_CHANNEL_1); // read the first value
 80011d2:	2100      	movs	r1, #0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f004 ff31 	bl	800603c <HAL_TIM_ReadCapturedValue>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a41      	ldr	r2, [pc, #260]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011de:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80011e0:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim8, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 020a 	bic.w	r2, r2, #10
 80011f4:	621a      	str	r2, [r3, #32]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0202 	orr.w	r2, r2, #2
 8001204:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim8, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim8, TIM_IT_CC1);
		}
	}
}
 8001206:	e063      	b.n	80012d0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001208:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d15f      	bne.n	80012d0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim8, TIM_CHANNEL_1);  // read second value
 8001210:	2100      	movs	r1, #0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f004 ff12 	bl	800603c <HAL_TIM_ReadCapturedValue>
 8001218:	4603      	mov	r3, r0
 800121a:	4a33      	ldr	r2, [pc, #204]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800121c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim8, 0);  // reset the counter
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d907      	bls.n	8001242 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	4a2b      	ldr	r2, [pc, #172]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x134>)
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e00f      	b.n	8001262 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d909      	bls.n	8001262 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800125c:	4413      	add	r3, r2
 800125e:	4a23      	ldr	r2, [pc, #140]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001260:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f910 	bl	800048c <__aeabi_ui2d>
 800126c:	a31a      	add	r3, pc, #104	; (adr r3, 80012d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff f985 	bl	8000580 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001286:	f7ff faa5 	bl	80007d4 <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fb87 	bl	80009a4 <__aeabi_d2uiz>
 8001296:	4603      	mov	r3, r0
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800129c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim8, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a1a      	ldr	r2, [r3, #32]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 020a 	bic.w	r2, r2, #10
 80012b2:	621a      	str	r2, [r3, #32]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6a12      	ldr	r2, [r2, #32]
 80012be:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim8, TIM_IT_CC1);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0202 	bic.w	r2, r2, #2
 80012ce:	60da      	str	r2, [r3, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	b020c49c 	.word	0xb020c49c
 80012dc:	3fa16872 	.word	0x3fa16872
 80012e0:	20000034 	.word	0x20000034
 80012e4:	20000028 	.word	0x20000028
 80012e8:	2000002c 	.word	0x2000002c
 80012ec:	20000030 	.word	0x20000030
 80012f0:	20000035 	.word	0x20000035

080012f4 <HCSRO4_Read>:
 */



void HCSRO4_Read (TIM_HandleTypeDef *htim8)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80012fc:	2201      	movs	r2, #1
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <HCSRO4_Read+0x3c>)
 8001302:	f002 f821 	bl	8003348 <HAL_GPIO_WritePin>
	delay_us(10, htim8);  // wait for 10 us
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	200a      	movs	r0, #10
 800130a:	f7ff ff3b 	bl	8001184 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800130e:	2200      	movs	r2, #0
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <HCSRO4_Read+0x3c>)
 8001314:	f002 f818 	bl	8003348 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim8, TIM_IT_CC1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0202 	orr.w	r2, r2, #2
 8001326:	60da      	str	r2, [r3, #12]
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020800 	.word	0x40020800

08001334 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_I2C1_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_I2C1_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <MX_I2C1_Init+0x7c>)
 8001342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_I2C1_Init+0x74>)
 800134c:	2201      	movs	r2, #1
 800134e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_I2C1_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001370:	f002 f828 	bl	80033c4 <HAL_I2C_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800137a:	f000 f929 	bl	80015d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137e:	2100      	movs	r1, #0
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001382:	f002 fe46 	bl	8004012 <HAL_I2CEx_ConfigAnalogFilter>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800138c:	f000 f920 	bl	80015d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001390:	2100      	movs	r1, #0
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001394:	f002 fe88 	bl	80040a8 <HAL_I2CEx_ConfigDigitalFilter>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 f917 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200000e0 	.word	0x200000e0
 80013ac:	40005400 	.word	0x40005400
 80013b0:	20404768 	.word	0x20404768

080013b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_I2C_MspInit+0x9c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d138      	bne.n	8001448 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_I2C_MspInit+0xa0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_I2C_MspInit+0xa0>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_I2C_MspInit+0xa0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f4:	2312      	movs	r3, #18
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001400:	2304      	movs	r3, #4
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <HAL_I2C_MspInit+0xa4>)
 800140c:	f001 fdf0 	bl	8002ff0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_I2C_MspInit+0xa0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_I2C_MspInit+0xa0>)
 8001416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_I2C_MspInit+0xa0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	201f      	movs	r0, #31
 800142e:	f001 fa1e 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001432:	201f      	movs	r0, #31
 8001434:	f001 fa37 	bl	80028a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2020      	movs	r0, #32
 800143e:	f001 fa16 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001442:	2020      	movs	r0, #32
 8001444:	f001 fa2f 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40005400 	.word	0x40005400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020400 	.word	0x40020400

0800145c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f000 fcb7 	bl	8001dd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001464:	f000 f820 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001468:	f000 f9fa 	bl	8001860 <MX_TIM2_Init>
  MX_I2C1_Init();
 800146c:	f7ff ff62 	bl	8001334 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001470:	f000 fc0a 	bl	8001c88 <MX_USART3_UART_Init>
  MX_GPIO_Init();
 8001474:	f7ff fd46 	bl	8000f04 <MX_GPIO_Init>
  MX_SPI4_Init();
 8001478:	f000 f8b0 	bl	80015dc <MX_SPI4_Init>
  MX_DMA_Init();
 800147c:	f7ff fd24 	bl	8000ec8 <MX_DMA_Init>
  MX_TIM8_Init();
 8001480:	f000 fab2 	bl	80019e8 <MX_TIM8_Init>
  MX_ADC1_Init();
 8001484:	f7ff fc2a 	bl	8000cdc <MX_ADC1_Init>
  MX_TIM5_Init();
 8001488:	f000 fa5a 	bl	8001940 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1); // captures pulses
 800148c:	2100      	movs	r1, #0
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <main+0x48>)
 8001490:	f004 f9c6 	bl	8005820 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSRO4_Read(&htim8);
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <main+0x48>)
 8001496:	f7ff ff2d 	bl	80012f4 <HCSRO4_Read>
	  HAL_Delay(100);
 800149a:	2064      	movs	r0, #100	; 0x64
 800149c:	f000 fcf6 	bl	8001e8c <HAL_Delay>
  {
 80014a0:	e7f8      	b.n	8001494 <main+0x38>
 80014a2:	bf00      	nop
 80014a4:	20000190 	.word	0x20000190

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0b4      	sub	sp, #208	; 0xd0
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f006 f9b6 	bl	8007828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	2284      	movs	r2, #132	; 0x84
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 f9a7 	bl	8007828 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014da:	f002 fe31 	bl	8004140 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <SystemClock_Config+0x120>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a39      	ldr	r2, [pc, #228]	; (80015c8 <SystemClock_Config+0x120>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <SystemClock_Config+0x120>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f6:	4b35      	ldr	r3, [pc, #212]	; (80015cc <SystemClock_Config+0x124>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a34      	ldr	r2, [pc, #208]	; (80015cc <SystemClock_Config+0x124>)
 80014fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b32      	ldr	r3, [pc, #200]	; (80015cc <SystemClock_Config+0x124>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800150e:	2301      	movs	r3, #1
 8001510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001514:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152a:	2304      	movs	r3, #4
 800152c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001530:	23d8      	movs	r3, #216	; 0xd8
 8001532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800153c:	2303      	movs	r3, #3
 800153e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fe5a 	bl	8004200 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001552:	f000 f83d 	bl	80015d0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001556:	f002 fe03 	bl	8004160 <HAL_PWREx_EnableOverDrive>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001560:	f000 f836 	bl	80015d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001576:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001586:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800158a:	2107      	movs	r1, #7
 800158c:	4618      	mov	r0, r3
 800158e:	f003 f8db 	bl	8004748 <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001598:	f000 f81a 	bl	80015d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800159c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80015a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 facc 	bl	8004b4c <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x116>
  {
    Error_Handler();
 80015ba:	f000 f809 	bl	80015d0 <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	37d0      	adds	r7, #208	; 0xd0
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_SPI4_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_SPI4_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_SPI4_Init+0x74>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_SPI4_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI4_Init+0x74>)
 80015f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015fa:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_SPI4_Init+0x74>)
 80015fe:	2202      	movs	r2, #2
 8001600:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_SPI4_Init+0x74>)
 8001604:	2201      	movs	r2, #1
 8001606:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI4_Init+0x74>)
 800160a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_SPI4_Init+0x74>)
 8001612:	2210      	movs	r2, #16
 8001614:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI4_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SPI4_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_SPI4_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI4_Init+0x74>)
 800162a:	2207      	movs	r2, #7
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_SPI4_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI4_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_SPI4_Init+0x74>)
 800163c:	f003 fe76 	bl	800532c <HAL_SPI_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001646:	f7ff ffc3 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000012c 	.word	0x2000012c
 8001654:	40013400 	.word	0x40013400

08001658 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <HAL_SPI_MspInit+0x8c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12f      	bne.n	80016da <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_SPI_MspInit+0x90>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_SPI_MspInit+0x90>)
 8001680:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_SPI_MspInit+0x90>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_SPI_MspInit+0x90>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <HAL_SPI_MspInit+0x90>)
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_SPI_MspInit+0x90>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80016aa:	2364      	movs	r3, #100	; 0x64
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016ba:	2305      	movs	r3, #5
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <HAL_SPI_MspInit+0x94>)
 80016c6:	f001 fc93 	bl	8002ff0 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2054      	movs	r0, #84	; 0x54
 80016d0:	f001 f8cd 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80016d4:	2054      	movs	r0, #84	; 0x54
 80016d6:	f001 f8e6 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40013400 	.word	0x40013400
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x44>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_MspInit+0x44>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x44>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x44>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x44>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x44>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 fb62 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <ADC_IRQHandler+0x10>)
 8001792:	f000 fbe3 	bl	8001f5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000038 	.word	0x20000038

080017a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <TIM2_IRQHandler+0x10>)
 80017a6:	f004 f985 	bl	8005ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000228 	.word	0x20000228

080017b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <I2C1_EV_IRQHandler+0x10>)
 80017ba:	f001 fe93 	bl	80034e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000e0 	.word	0x200000e0

080017c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <I2C1_ER_IRQHandler+0x10>)
 80017ce:	f001 fea3 	bl	8003518 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000e0 	.word	0x200000e0

080017dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <USART3_IRQHandler+0x10>)
 80017e2:	f005 f9df 	bl	8006ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000274 	.word	0x20000274

080017f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017f8:	f001 fdc0 	bl	800337c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <TIM8_CC_IRQHandler+0x10>)
 8001806:	f004 f955 	bl	8005ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000190 	.word	0x20000190

08001814 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA2_Stream0_IRQHandler+0x10>)
 800181a:	f001 f99f 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000080 	.word	0x20000080

08001828 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <SPI4_IRQHandler+0x10>)
 800182e:	f003 fe29 	bl	8005484 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000012c 	.word	0x2000012c

0800183c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <SystemInit+0x20>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <SystemInit+0x20>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_TIM2_Init+0xdc>)
 8001886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080 - 1;
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <MX_TIM2_Init+0xdc>)
 800188e:	f240 4237 	movw	r2, #1079	; 0x437
 8001892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <MX_TIM2_Init+0xdc>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 -1;
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <MX_TIM2_Init+0xdc>)
 800189c:	2263      	movs	r2, #99	; 0x63
 800189e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_TIM2_Init+0xdc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_TIM2_Init+0xdc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ac:	4823      	ldr	r0, [pc, #140]	; (800193c <MX_TIM2_Init+0xdc>)
 80018ae:	f003 ff08 	bl	80056c2 <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80018b8:	f7ff fe8a 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	481c      	ldr	r0, [pc, #112]	; (800193c <MX_TIM2_Init+0xdc>)
 80018cc:	f005 f870 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018d6:	f7ff fe7b 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	; 0x60
 80018dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80018de:	2332      	movs	r3, #50	; 0x32
 80018e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4812      	ldr	r0, [pc, #72]	; (800193c <MX_TIM2_Init+0xdc>)
 80018f2:	f004 fa93 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80018fc:	f7ff fe68 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	2208      	movs	r2, #8
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_TIM2_Init+0xdc>)
 8001908:	f004 fa88 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001912:	f7ff fe5d 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	220c      	movs	r2, #12
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM2_Init+0xdc>)
 800191e:	f004 fa7d 	bl	8005e1c <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001928:	f7ff fe52 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM2_Init+0xdc>)
 800192e:	f000 f957 	bl	8001be0 <HAL_TIM_MspPostInit>

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000228 	.word	0x20000228

08001940 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <MX_TIM5_Init+0xa0>)
 8001960:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <MX_TIM5_Init+0xa4>)
 8001962:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_TIM5_Init+0xa0>)
 8001966:	226c      	movs	r2, #108	; 0x6c
 8001968:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <MX_TIM5_Init+0xa0>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff - 1;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <MX_TIM5_Init+0xa0>)
 8001972:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001976:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <MX_TIM5_Init+0xa0>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <MX_TIM5_Init+0xa0>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001984:	4816      	ldr	r0, [pc, #88]	; (80019e0 <MX_TIM5_Init+0xa0>)
 8001986:	f003 fef3 	bl	8005770 <HAL_TIM_IC_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001990:	f7ff fe1e 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	480f      	ldr	r0, [pc, #60]	; (80019e0 <MX_TIM5_Init+0xa0>)
 80019a4:	f005 f804 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80019ae:	f7ff fe0f 	bl	80015d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019b6:	2301      	movs	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_TIM5_Init+0xa0>)
 80019ca:	f004 f992 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80019d4:	f7ff fdfc 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200001dc 	.word	0x200001dc
 80019e4:	40000c00 	.word	0x40000c00

080019e8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <MX_TIM8_Init+0xb0>)
 8001a0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 216-1;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a0e:	22d7      	movs	r2, #215	; 0xd7
 8001a10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001a32:	4818      	ldr	r0, [pc, #96]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a34:	f003 fe9c 	bl	8005770 <HAL_TIM_IC_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001a3e:	f7ff fdc7 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	480f      	ldr	r0, [pc, #60]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a56:	f004 ffab 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001a60:	f7ff fdb6 	bl	80015d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_TIM8_Init+0xac>)
 8001a7c:	f004 f939 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8001a86:	f7ff fda3 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000190 	.word	0x20000190
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aac:	d113      	bne.n	8001ad6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_TIM_PWM_MspInit+0x44>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <HAL_TIM_PWM_MspInit+0x44>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_TIM_PWM_MspInit+0x44>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	201c      	movs	r0, #28
 8001acc:	f000 fecf 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad0:	201c      	movs	r0, #28
 8001ad2:	f000 fee8 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a32      	ldr	r2, [pc, #200]	; (8001bcc <HAL_TIM_IC_MspInit+0xe8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d128      	bne.n	8001b58 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b06:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b46:	2302      	movs	r3, #2
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <HAL_TIM_IC_MspInit+0xf0>)
 8001b52:	f001 fa4d 	bl	8002ff0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001b56:	e034      	b.n	8001bc2 <HAL_TIM_IC_MspInit+0xde>
  else if(tim_icHandle->Instance==TIM8)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <HAL_TIM_IC_MspInit+0xf4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12f      	bne.n	8001bc2 <HAL_TIM_IC_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a1a      	ldr	r2, [pc, #104]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_TIM_IC_MspInit+0xec>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b92:	2340      	movs	r3, #64	; 0x40
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <HAL_TIM_IC_MspInit+0xf8>)
 8001bae:	f001 fa1f 	bl	8002ff0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	202e      	movs	r0, #46	; 0x2e
 8001bb8:	f000 fe59 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001bbc:	202e      	movs	r0, #46	; 0x2e
 8001bbe:	f000 fe72 	bl	80028a6 <HAL_NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3730      	adds	r7, #48	; 0x30
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40000c00 	.word	0x40000c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40010400 	.word	0x40010400
 8001bdc:	40020800 	.word	0x40020800

08001be0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	d138      	bne.n	8001c74 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_TIM_MspPostInit+0x9c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_TIM_MspPostInit+0x9c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_TIM_MspPostInit+0x9c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_TIM_MspPostInit+0x9c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_TIM_MspPostInit+0x9c>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_TIM_MspPostInit+0x9c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = TIM2_CH1_Pin;
 8001c32:	2320      	movs	r3, #32
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <HAL_TIM_MspPostInit+0xa0>)
 8001c4e:	f001 f9cf 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c64:	2301      	movs	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <HAL_TIM_MspPostInit+0xa4>)
 8001c70:	f001 f9be 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400

08001c88 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001c8e:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <MX_USART3_UART_Init+0x5c>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001c94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001ccc:	f004 ff1c 	bl	8006b08 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cd6:	f7ff fc7b 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000274 	.word	0x20000274
 8001ce4:	40004800 	.word	0x40004800

08001ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_UART_MspInit+0x8c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d130      	bne.n	8001d6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_UART_MspInit+0x90>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a1a      	ldr	r2, [pc, #104]	; (8001d78 <HAL_UART_MspInit+0x90>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_UART_MspInit+0x90>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_UART_MspInit+0x90>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_UART_MspInit+0x90>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_UART_MspInit+0x90>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	4809      	ldr	r0, [pc, #36]	; (8001d7c <HAL_UART_MspInit+0x94>)
 8001d58:	f001 f94a 	bl	8002ff0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2027      	movs	r0, #39	; 0x27
 8001d62:	f000 fd84 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d66:	2027      	movs	r0, #39	; 0x27
 8001d68:	f000 fd9d 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40004800 	.word	0x40004800
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020c00 	.word	0x40020c00

08001d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d86:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d9c:	4c0b      	ldr	r4, [pc, #44]	; (8001dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001daa:	f7ff fd47 	bl	800183c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dae:	f005 fd17 	bl	80077e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db2:	f7ff fb53 	bl	800145c <main>
  bx  lr    
 8001db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dc4:	08007880 	.word	0x08007880
  ldr r2, =_sbss
 8001dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dcc:	200002fc 	.word	0x200002fc

08001dd0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <CAN1_RX0_IRQHandler>

08001dd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f000 fd3e 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f000 f805 	bl	8001dec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001de2:	f7ff fc85 	bl	80016f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x54>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x58>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fd59 	bl	80028c2 <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 fd21 	bl	800286e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_InitTick+0x5c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000008 	.word	0x20000008
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	200002f8 	.word	0x200002f8

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	200002f8 	.word	0x200002f8

08001e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff ffee 	bl	8001e74 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d005      	beq.n	8001eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_Delay+0x44>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eb2:	bf00      	nop
 8001eb4:	f7ff ffde 	bl	8001e74 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d8f7      	bhi.n	8001eb4 <HAL_Delay+0x28>
  {
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e031      	b.n	8001f4e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe ff52 	bl	8000d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_ADC_Init+0x84>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	f043 0202 	orr.w	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fac4 	bl	80024b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f3e:	e001      	b.n	8001f44 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	ffffeefd 	.word	0xffffeefd

08001f5c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	bf0c      	ite	eq
 8001f7a:	2301      	moveq	r3, #1
 8001f7c:	2300      	movne	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d049      	beq.n	8002032 <HAL_ADC_IRQHandler+0xd6>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d046      	beq.n	8002032 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d12b      	bne.n	8002022 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d127      	bne.n	8002022 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d119      	bne.n	8002022 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0220 	bic.w	r2, r2, #32
 8001ffc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8db 	bl	80021de <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0212 	mvn.w	r2, #18
 8002030:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b04      	cmp	r3, #4
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d057      	beq.n	8002114 <HAL_ADC_IRQHandler+0x1b8>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d054      	beq.n	8002114 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d139      	bne.n	8002104 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d12b      	bne.n	8002104 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d124      	bne.n	8002104 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11d      	bne.n	8002104 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d119      	bne.n	8002104 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 facd 	bl	80026a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 020c 	mvn.w	r2, #12
 8002112:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	bf0c      	ite	eq
 8002122:	2301      	moveq	r3, #1
 8002124:	2300      	movne	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d017      	beq.n	8002176 <HAL_ADC_IRQHandler+0x21a>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d014      	beq.n	8002176 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10d      	bne.n	8002176 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f843 	bl	80021f2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0201 	mvn.w	r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b20      	cmp	r3, #32
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002196:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <HAL_ADC_IRQHandler+0x27a>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0220 	mvn.w	r2, #32
 80021c4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f81d 	bl	8002206 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0220 	mvn.w	r2, #32
 80021d4:	601a      	str	r2, [r3, #0]
  }
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1c>
 8002234:	2302      	movs	r3, #2
 8002236:	e12a      	b.n	800248e <HAL_ADC_ConfigChannel+0x272>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b09      	cmp	r3, #9
 8002246:	d93a      	bls.n	80022be <HAL_ADC_ConfigChannel+0xa2>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002250:	d035      	beq.n	80022be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68d9      	ldr	r1, [r3, #12]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	3b1e      	subs	r3, #30
 8002268:	2207      	movs	r2, #7
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	400a      	ands	r2, r1
 8002276:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a87      	ldr	r2, [pc, #540]	; (800249c <HAL_ADC_ConfigChannel+0x280>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10a      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68d9      	ldr	r1, [r3, #12]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	061a      	lsls	r2, r3, #24
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002296:	e035      	b.n	8002304 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68d9      	ldr	r1, [r3, #12]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4403      	add	r3, r0
 80022b0:	3b1e      	subs	r3, #30
 80022b2:	409a      	lsls	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022bc:	e022      	b.n	8002304 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6919      	ldr	r1, [r3, #16]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	2207      	movs	r2, #7
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43da      	mvns	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	400a      	ands	r2, r1
 80022e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6919      	ldr	r1, [r3, #16]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4403      	add	r3, r0
 80022fa:	409a      	lsls	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d824      	bhi.n	8002356 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b05      	subs	r3, #5
 800231e:	221f      	movs	r2, #31
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43da      	mvns	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	400a      	ands	r2, r1
 800232c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	3b05      	subs	r3, #5
 8002348:	fa00 f203 	lsl.w	r2, r0, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	635a      	str	r2, [r3, #52]	; 0x34
 8002354:	e04c      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d824      	bhi.n	80023a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	3b23      	subs	r3, #35	; 0x23
 8002370:	221f      	movs	r2, #31
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b23      	subs	r3, #35	; 0x23
 800239a:	fa00 f203 	lsl.w	r2, r0, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
 80023a6:	e023      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b41      	subs	r3, #65	; 0x41
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43da      	mvns	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	400a      	ands	r2, r1
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b41      	subs	r3, #65	; 0x41
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_ADC_ConfigChannel+0x284>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10a      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x1f4>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002402:	d105      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_ADC_ConfigChannel+0x288>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_ADC_ConfigChannel+0x288>)
 800240a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800240e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <HAL_ADC_ConfigChannel+0x284>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d109      	bne.n	800242e <HAL_ADC_ConfigChannel+0x212>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b12      	cmp	r3, #18
 8002420:	d105      	bne.n	800242e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_ADC_ConfigChannel+0x288>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_ADC_ConfigChannel+0x288>)
 8002428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800242c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_ADC_ConfigChannel+0x284>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d125      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x268>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_ADC_ConfigChannel+0x280>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d003      	beq.n	800244a <HAL_ADC_ConfigChannel+0x22e>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b11      	cmp	r3, #17
 8002448:	d11c      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_ADC_ConfigChannel+0x288>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_ADC_ConfigChannel+0x288>)
 8002450:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002454:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <HAL_ADC_ConfigChannel+0x280>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d111      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_ADC_ConfigChannel+0x28c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_ADC_ConfigChannel+0x290>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9a      	lsrs	r2, r3, #18
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002476:	e002      	b.n	800247e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b01      	subs	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	10000012 	.word	0x10000012
 80024a0:	40012000 	.word	0x40012000
 80024a4:	40012300 	.word	0x40012300
 80024a8:	20000000 	.word	0x20000000
 80024ac:	431bde83 	.word	0x431bde83

080024b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80024b8:	4b78      	ldr	r3, [pc, #480]	; (800269c <ADC_Init+0x1ec>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a77      	ldr	r2, [pc, #476]	; (800269c <ADC_Init+0x1ec>)
 80024be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80024c4:	4b75      	ldr	r3, [pc, #468]	; (800269c <ADC_Init+0x1ec>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4973      	ldr	r1, [pc, #460]	; (800269c <ADC_Init+0x1ec>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	021a      	lsls	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <ADC_Init+0x1f0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	e00f      	b.n	80025aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0202 	bic.w	r2, r2, #2
 80025b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	005a      	lsls	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	3b01      	subs	r3, #1
 8002604:	035a      	lsls	r2, r3, #13
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e007      	b.n	8002620 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	3b01      	subs	r3, #1
 800263c:	051a      	lsls	r2, r3, #20
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002662:	025a      	lsls	r2, r3, #9
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	029a      	lsls	r2, r3, #10
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40012300 	.word	0x40012300
 80026a0:	0f000001 	.word	0x0f000001

080026a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	05fa0000 	.word	0x05fa0000

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <__NVIC_EnableIRQ+0x38>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	; (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	; (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002824:	d301      	bcc.n	800282a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002826:	2301      	movs	r3, #1
 8002828:	e00f      	b.n	800284a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <SysTick_Config+0x40>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002832:	210f      	movs	r1, #15
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7ff ff8e 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SysTick_Config+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <SysTick_Config+0x40>)
 8002844:	2207      	movs	r2, #7
 8002846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff29 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002880:	f7ff ff3e 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f7ff ff8e 	bl	80027ac <NVIC_EncodePriority>
 8002890:	4602      	mov	r2, r0
 8002892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff5d 	bl	8002758 <__NVIC_SetPriority>
}
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff31 	bl	800271c <__NVIC_EnableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffa2 	bl	8002814 <SysTick_Config>
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff fac4 	bl	8001e74 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e099      	b.n	8002a2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002918:	e00f      	b.n	800293a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800291a:	f7ff faab 	bl	8001e74 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b05      	cmp	r3, #5
 8002926:	d908      	bls.n	800293a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2203      	movs	r2, #3
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e078      	b.n	8002a2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e8      	bne.n	800291a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <HAL_DMA_Init+0x158>)
 8002954:	4013      	ands	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002966:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b04      	cmp	r3, #4
 8002992:	d107      	bne.n	80029a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4313      	orrs	r3, r2
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d117      	bne.n	80029fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00e      	beq.n	80029fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fa89 	bl	8002ef8 <DMA_CheckFifoParam>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2240      	movs	r2, #64	; 0x40
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029fa:	2301      	movs	r3, #1
 80029fc:	e016      	b.n	8002a2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa40 	bl	8002e8c <DMA_CalcBaseAndBitshift>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	223f      	movs	r2, #63	; 0x3f
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	f010803f 	.word	0xf010803f

08002a38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a46:	f7ff fa15 	bl	8001e74 <HAL_GetTick>
 8002a4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e052      	b.n	8002b10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0216 	bic.w	r2, r2, #22
 8002a78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <HAL_DMA_Abort+0x62>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0208 	bic.w	r2, r2, #8
 8002aa8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aba:	e013      	b.n	8002ae4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002abc:	f7ff f9da 	bl	8001e74 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d90c      	bls.n	8002ae4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e015      	b.n	8002b10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e4      	bne.n	8002abc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	223f      	movs	r2, #63	; 0x3f
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d004      	beq.n	8002b36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00c      	b.n	8002b50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2205      	movs	r2, #5
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b68:	4b92      	ldr	r3, [pc, #584]	; (8002db4 <HAL_DMA_IRQHandler+0x258>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a92      	ldr	r2, [pc, #584]	; (8002db8 <HAL_DMA_IRQHandler+0x25c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2208      	movs	r2, #8
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2204      	movs	r2, #4
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2204      	movs	r2, #4
 8002c22:	409a      	lsls	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2210      	movs	r2, #16
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d043      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03c      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	2210      	movs	r2, #16
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
 8002c8a:	e01f      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e016      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0208 	bic.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808e 	beq.w	8002dfa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8086 	beq.w	8002dfa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d136      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0216 	bic.w	r2, r2, #22
 8002d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x1da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0208 	bic.w	r2, r2, #8
 8002d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	223f      	movs	r2, #63	; 0x3f
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07d      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
        }
        return;
 8002d72:	e078      	b.n	8002e66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01c      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d108      	bne.n	8002da2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d030      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e02b      	b.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d027      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
 8002db2:	e022      	b.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
 8002db4:	20000000 	.word	0x20000000
 8002db8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0210 	bic.w	r2, r2, #16
 8002dd8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d032      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2205      	movs	r2, #5
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d307      	bcc.n	8002e42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f2      	bne.n	8002e26 <HAL_DMA_IRQHandler+0x2ca>
 8002e40:	e000      	b.n	8002e44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e000      	b.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e66:	bf00      	nop
    }
  }
}
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop

08002e70 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7e:	b2db      	uxtb	r3, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	3b10      	subs	r3, #16
 8002e9c:	4a13      	ldr	r2, [pc, #76]	; (8002eec <DMA_CalcBaseAndBitshift+0x60>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ea6:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <DMA_CalcBaseAndBitshift+0x64>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d908      	bls.n	8002ecc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	1d1a      	adds	r2, r3, #4
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	659a      	str	r2, [r3, #88]	; 0x58
 8002eca:	e006      	b.n	8002eda <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	aaaaaaab 	.word	0xaaaaaaab
 8002ef0:	08007868 	.word	0x08007868
 8002ef4:	fffffc00 	.word	0xfffffc00

08002ef8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d11f      	bne.n	8002f52 <DMA_CheckFifoParam+0x5a>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d856      	bhi.n	8002fc6 <DMA_CheckFifoParam+0xce>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <DMA_CheckFifoParam+0x28>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f43 	.word	0x08002f43
 8002f28:	08002f31 	.word	0x08002f31
 8002f2c:	08002fc7 	.word	0x08002fc7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d046      	beq.n	8002fca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f40:	e043      	b.n	8002fca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f4a:	d140      	bne.n	8002fce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f50:	e03d      	b.n	8002fce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5a:	d121      	bne.n	8002fa0 <DMA_CheckFifoParam+0xa8>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d837      	bhi.n	8002fd2 <DMA_CheckFifoParam+0xda>
 8002f62:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <DMA_CheckFifoParam+0x70>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f7f 	.word	0x08002f7f
 8002f70:	08002f79 	.word	0x08002f79
 8002f74:	08002f91 	.word	0x08002f91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e030      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d025      	beq.n	8002fd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8e:	e022      	b.n	8002fd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f98:	d11f      	bne.n	8002fda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f9e:	e01c      	b.n	8002fda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d903      	bls.n	8002fae <DMA_CheckFifoParam+0xb6>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d003      	beq.n	8002fb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fac:	e018      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb2:	e015      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00e      	beq.n	8002fde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc4:	e00b      	b.n	8002fde <DMA_CheckFifoParam+0xe6>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e00a      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e008      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e006      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e004      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e002      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
    }
  } 
  
  return status; 
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e175      	b.n	80032fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	f040 8164 	bne.w	80032f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d00b      	beq.n	800304e <HAL_GPIO_Init+0x5e>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d007      	beq.n	800304e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003042:	2b11      	cmp	r3, #17
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b12      	cmp	r3, #18
 800304c:	d130      	bne.n	80030b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 0201 	and.w	r2, r3, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x100>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b12      	cmp	r3, #18
 80030ee:	d123      	bne.n	8003138 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80be 	beq.w	80032f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_GPIO_Init+0x324>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a65      	ldr	r2, [pc, #404]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003192:	4a61      	ldr	r2, [pc, #388]	; (8003318 <HAL_GPIO_Init+0x328>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_GPIO_Init+0x32c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d037      	beq.n	800322e <HAL_GPIO_Init+0x23e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a57      	ldr	r2, [pc, #348]	; (8003320 <HAL_GPIO_Init+0x330>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_GPIO_Init+0x23a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a56      	ldr	r2, [pc, #344]	; (8003324 <HAL_GPIO_Init+0x334>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02b      	beq.n	8003226 <HAL_GPIO_Init+0x236>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a55      	ldr	r2, [pc, #340]	; (8003328 <HAL_GPIO_Init+0x338>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d025      	beq.n	8003222 <HAL_GPIO_Init+0x232>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a54      	ldr	r2, [pc, #336]	; (800332c <HAL_GPIO_Init+0x33c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01f      	beq.n	800321e <HAL_GPIO_Init+0x22e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a53      	ldr	r2, [pc, #332]	; (8003330 <HAL_GPIO_Init+0x340>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d019      	beq.n	800321a <HAL_GPIO_Init+0x22a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_GPIO_Init+0x344>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_GPIO_Init+0x226>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a51      	ldr	r2, [pc, #324]	; (8003338 <HAL_GPIO_Init+0x348>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00d      	beq.n	8003212 <HAL_GPIO_Init+0x222>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a50      	ldr	r2, [pc, #320]	; (800333c <HAL_GPIO_Init+0x34c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <HAL_GPIO_Init+0x21e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4f      	ldr	r2, [pc, #316]	; (8003340 <HAL_GPIO_Init+0x350>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_GPIO_Init+0x21a>
 8003206:	2309      	movs	r3, #9
 8003208:	e012      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800320a:	230a      	movs	r3, #10
 800320c:	e010      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800320e:	2308      	movs	r3, #8
 8003210:	e00e      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003212:	2307      	movs	r3, #7
 8003214:	e00c      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003216:	2306      	movs	r3, #6
 8003218:	e00a      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800321a:	2305      	movs	r3, #5
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800321e:	2304      	movs	r3, #4
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800322e:	2300      	movs	r3, #0
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f002 0203 	and.w	r2, r2, #3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003240:	4935      	ldr	r1, [pc, #212]	; (8003318 <HAL_GPIO_Init+0x328>)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_GPIO_Init+0x354>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003272:	4a34      	ldr	r2, [pc, #208]	; (8003344 <HAL_GPIO_Init+0x354>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003278:	4b32      	ldr	r3, [pc, #200]	; (8003344 <HAL_GPIO_Init+0x354>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329c:	4a29      	ldr	r2, [pc, #164]	; (8003344 <HAL_GPIO_Init+0x354>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_GPIO_Init+0x354>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032c6:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <HAL_GPIO_Init+0x354>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_GPIO_Init+0x354>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_GPIO_Init+0x354>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	f67f ae86 	bls.w	8003010 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40021400 	.word	0x40021400
 8003334:	40021800 	.word	0x40021800
 8003338:	40021c00 	.word	0x40021c00
 800333c:	40022000 	.word	0x40022000
 8003340:	40022400 	.word	0x40022400
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
 8003354:	4613      	mov	r3, r2
 8003356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003358:	787b      	ldrb	r3, [r7, #1]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003364:	e003      	b.n	800336e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	041a      	lsls	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	619a      	str	r2, [r3, #24]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d006      	beq.n	80033a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f806 	bl	80033ac <HAL_GPIO_EXTI_Callback>
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40013c00 	.word	0x40013c00

080033ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd ffe2 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003414:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003424:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	e006      	b.n	800344c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800344a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d104      	bne.n	800345e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800345c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_I2C_Init+0x11c>)
 800346a:	430b      	orrs	r3, r1
 800346c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800347c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	ea42 0103 	orr.w	r1, r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69d9      	ldr	r1, [r3, #28]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1a      	ldr	r2, [r3, #32]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	02008000 	.word	0x02008000

080034e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
  }
}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <HAL_I2C_ER_IRQHandler+0x46>
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	09db      	lsrs	r3, r3, #7
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800355c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	0a9b      	lsrs	r3, r3, #10
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <HAL_I2C_ER_IRQHandler+0x74>
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	09db      	lsrs	r3, r3, #7
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f043 0208 	orr.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800358a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	0a5b      	lsrs	r3, r3, #9
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_I2C_ER_IRQHandler+0xa2>
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	09db      	lsrs	r3, r3, #7
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f043 0202 	orr.w	r2, r3, #2
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 030b 	and.w	r3, r3, #11
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb89 	bl	8003ce4 <I2C_ITError>
  }
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	70fb      	strb	r3, [r7, #3]
 800360e:	4613      	mov	r3, r2
 8003610:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <I2C_Slave_ISR_IT+0x24>
 800367a:	2302      	movs	r3, #2
 800367c:	e0ec      	b.n	8003858 <I2C_Slave_ISR_IT+0x1fe>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <I2C_Slave_ISR_IT+0x4c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800369e:	6939      	ldr	r1, [r7, #16]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f9bf 	bl	8003a24 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d04d      	beq.n	800374e <I2C_Slave_ISR_IT+0xf4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d047      	beq.n	800374e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d128      	bne.n	800371a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b28      	cmp	r3, #40	; 0x28
 80036d2:	d108      	bne.n	80036e6 <I2C_Slave_ISR_IT+0x8c>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036da:	d104      	bne.n	80036e6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80036dc:	6939      	ldr	r1, [r7, #16]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 faaa 	bl	8003c38 <I2C_ITListenCplt>
 80036e4:	e032      	b.n	800374c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b29      	cmp	r3, #41	; 0x29
 80036f0:	d10e      	bne.n	8003710 <I2C_Slave_ISR_IT+0xb6>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036f8:	d00a      	beq.n	8003710 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2210      	movs	r2, #16
 8003700:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fbe5 	bl	8003ed2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f92d 	bl	8003968 <I2C_ITSlaveSeqCplt>
 800370e:	e01d      	b.n	800374c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2210      	movs	r2, #16
 8003716:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003718:	e096      	b.n	8003848 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2210      	movs	r2, #16
 8003720:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f043 0204 	orr.w	r2, r3, #4
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <I2C_Slave_ISR_IT+0xe4>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800373a:	f040 8085 	bne.w	8003848 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	4619      	mov	r1, r3
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 facd 	bl	8003ce4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800374a:	e07d      	b.n	8003848 <I2C_Slave_ISR_IT+0x1ee>
 800374c:	e07c      	b.n	8003848 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d030      	beq.n	80037bc <I2C_Slave_ISR_IT+0x162>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02a      	beq.n	80037bc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d018      	beq.n	80037a2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d14f      	bne.n	800384c <I2C_Slave_ISR_IT+0x1f2>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b2:	d04b      	beq.n	800384c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f8d7 	bl	8003968 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80037ba:	e047      	b.n	800384c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	08db      	lsrs	r3, r3, #3
 80037cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80037d4:	6939      	ldr	r1, [r7, #16]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f842 	bl	8003860 <I2C_ITAddrCplt>
 80037dc:	e037      	b.n	800384e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d031      	beq.n	800384e <I2C_Slave_ISR_IT+0x1f4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d02b      	beq.n	800384e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d018      	beq.n	8003832 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003830:	e00d      	b.n	800384e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003838:	d002      	beq.n	8003840 <I2C_Slave_ISR_IT+0x1e6>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f891 	bl	8003968 <I2C_ITSlaveSeqCplt>
 8003846:	e002      	b.n	800384e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800384c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003876:	2b28      	cmp	r3, #40	; 0x28
 8003878:	d16a      	bne.n	8003950 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b29b      	uxth	r3, r3
 8003894:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003898:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80038b4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d138      	bne.n	8003930 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80038be:	897b      	ldrh	r3, [r7, #10]
 80038c0:	09db      	lsrs	r3, r3, #7
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	89bb      	ldrh	r3, [r7, #12]
 80038c6:	4053      	eors	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f003 0306 	and.w	r3, r3, #6
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11c      	bne.n	800390c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d13b      	bne.n	8003960 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2208      	movs	r2, #8
 80038f4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038fe:	89ba      	ldrh	r2, [r7, #12]
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fe7c 	bl	8003602 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800390a:	e029      	b.n	8003960 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800390c:	893b      	ldrh	r3, [r7, #8]
 800390e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fb1e 	bl	8003f56 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003922:	89ba      	ldrh	r2, [r7, #12]
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fe6a 	bl	8003602 <HAL_I2C_AddrCallback>
}
 800392e:	e017      	b.n	8003960 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fb0e 	bl	8003f56 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003942:	89ba      	ldrh	r2, [r7, #12]
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fe5a 	bl	8003602 <HAL_I2C_AddrCallback>
}
 800394e:	e007      	b.n	8003960 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2208      	movs	r2, #8
 8003956:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	0b9b      	lsrs	r3, r3, #14
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e00d      	b.n	80039ba <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0bdb      	lsrs	r3, r3, #15
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b29      	cmp	r3, #41	; 0x29
 80039c4:	d112      	bne.n	80039ec <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2228      	movs	r2, #40	; 0x28
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2221      	movs	r2, #33	; 0x21
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039d4:	2101      	movs	r1, #1
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fabd 	bl	8003f56 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fdf8 	bl	80035da <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80039ea:	e017      	b.n	8003a1c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b2a      	cmp	r3, #42	; 0x2a
 80039f6:	d111      	bne.n	8003a1c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2228      	movs	r2, #40	; 0x28
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2222      	movs	r2, #34	; 0x22
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a06:	2102      	movs	r1, #2
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 faa4 	bl	8003f56 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fde9 	bl	80035ee <HAL_I2C_SlaveRxCpltCallback>
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a40:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2220      	movs	r2, #32
 8003a48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b21      	cmp	r3, #33	; 0x21
 8003a4e:	d002      	beq.n	8003a56 <I2C_ITSlaveCplt+0x32>
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b29      	cmp	r3, #41	; 0x29
 8003a54:	d108      	bne.n	8003a68 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a56:	f248 0101 	movw	r1, #32769	; 0x8001
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa7b 	bl	8003f56 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2221      	movs	r2, #33	; 0x21
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
 8003a66:	e00d      	b.n	8003a84 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b22      	cmp	r3, #34	; 0x22
 8003a6c:	d002      	beq.n	8003a74 <I2C_ITSlaveCplt+0x50>
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b2a      	cmp	r3, #42	; 0x2a
 8003a72:	d107      	bne.n	8003a84 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003a74:	f248 0102 	movw	r1, #32770	; 0x8002
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fa6c 	bl	8003f56 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2222      	movs	r2, #34	; 0x22
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a92:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b64      	ldr	r3, [pc, #400]	; (8003c30 <I2C_ITSlaveCplt+0x20c>)
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa14 	bl	8003ed2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	0b9b      	lsrs	r3, r3, #14
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ac4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d020      	beq.n	8003b10 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003adc:	e018      	b.n	8003b10 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	0bdb      	lsrs	r3, r3, #15
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d006      	beq.n	8003b10 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0304 	bic.w	r3, r3, #4
 8003b22:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f043 0204 	orr.w	r2, r3, #4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f8a7 	bl	8003ce4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b28      	cmp	r3, #40	; 0x28
 8003ba0:	d141      	bne.n	8003c26 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ba2:	6979      	ldr	r1, [r7, #20]
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f847 	bl	8003c38 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003baa:	e03c      	b.n	8003c26 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bb4:	d014      	beq.n	8003be0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fed6 	bl	8003968 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <I2C_ITSlaveCplt+0x210>)
 8003bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fd20 	bl	800361e <HAL_I2C_ListenCpltCallback>
}
 8003bde:	e022      	b.n	8003c26 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b22      	cmp	r3, #34	; 0x22
 8003bea:	d10e      	bne.n	8003c0a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fcf3 	bl	80035ee <HAL_I2C_SlaveRxCpltCallback>
}
 8003c08:	e00d      	b.n	8003c26 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fcda 	bl	80035da <HAL_I2C_SlaveTxCpltCallback>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	fe00e800 	.word	0xfe00e800
 8003c34:	ffff0000 	.word	0xffff0000

08003c38 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <I2C_ITListenCplt+0xa8>)
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d022      	beq.n	8003cb6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d012      	beq.n	8003cb6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f043 0204 	orr.w	r2, r3, #4
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cb6:	f248 0103 	movw	r1, #32771	; 0x8003
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f94b 	bl	8003f56 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fca4 	bl	800361e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	ffff0000 	.word	0xffff0000

08003ce4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <I2C_ITError+0x194>)
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b28      	cmp	r3, #40	; 0x28
 8003d1a:	d005      	beq.n	8003d28 <I2C_ITError+0x44>
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b29      	cmp	r3, #41	; 0x29
 8003d20:	d002      	beq.n	8003d28 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b2a      	cmp	r3, #42	; 0x2a
 8003d26:	d10b      	bne.n	8003d40 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d28:	2103      	movs	r1, #3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f913 	bl	8003f56 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2228      	movs	r2, #40	; 0x28
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a50      	ldr	r2, [pc, #320]	; (8003e7c <I2C_ITError+0x198>)
 8003d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3e:	e011      	b.n	8003d64 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d40:	f248 0103 	movw	r1, #32771	; 0x8003
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f906 	bl	8003f56 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b60      	cmp	r3, #96	; 0x60
 8003d54:	d003      	beq.n	8003d5e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d039      	beq.n	8003de6 <I2C_ITError+0x102>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b11      	cmp	r3, #17
 8003d76:	d002      	beq.n	8003d7e <I2C_ITError+0x9a>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b21      	cmp	r3, #33	; 0x21
 8003d7c:	d133      	bne.n	8003de6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d8c:	d107      	bne.n	8003d9e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d9c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f864 	bl	8002e70 <HAL_DMA_GetState>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d017      	beq.n	8003dde <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	4a33      	ldr	r2, [pc, #204]	; (8003e80 <I2C_ITError+0x19c>)
 8003db4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fea8 	bl	8002b18 <HAL_DMA_Abort_IT>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d04d      	beq.n	8003e6a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ddc:	e045      	b.n	8003e6a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f850 	bl	8003e84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003de4:	e041      	b.n	8003e6a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d039      	beq.n	8003e62 <I2C_ITError+0x17e>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b12      	cmp	r3, #18
 8003df2:	d002      	beq.n	8003dfa <I2C_ITError+0x116>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b22      	cmp	r3, #34	; 0x22
 8003df8:	d133      	bne.n	8003e62 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e08:	d107      	bne.n	8003e1a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff f826 	bl	8002e70 <HAL_DMA_GetState>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d017      	beq.n	8003e5a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <I2C_ITError+0x19c>)
 8003e30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fe6a 	bl	8002b18 <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e54:	4610      	mov	r0, r2
 8003e56:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e58:	e009      	b.n	8003e6e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f812 	bl	8003e84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e60:	e005      	b.n	8003e6e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f80e 	bl	8003e84 <I2C_TreatErrorCallback>
  }
}
 8003e68:	e002      	b.n	8003e70 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e6e:	bf00      	nop
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	ffff0000 	.word	0xffff0000
 8003e7c:	0800365b 	.word	0x0800365b
 8003e80:	08003f1b 	.word	0x08003f1b

08003e84 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b60      	cmp	r3, #96	; 0x60
 8003e96:	d10e      	bne.n	8003eb6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fbc9 	bl	8003646 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003eb4:	e009      	b.n	8003eca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fbb4 	bl	8003632 <HAL_I2C_ErrorCallback>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d103      	bne.n	8003ef0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d007      	beq.n	8003f0e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699a      	ldr	r2, [r3, #24]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	619a      	str	r2, [r3, #24]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	2200      	movs	r2, #0
 8003f36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	2200      	movs	r2, #0
 8003f46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff ff9b 	bl	8003e84 <I2C_TreatErrorCallback>
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f66:	887b      	ldrh	r3, [r7, #2]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00f      	beq.n	8003f90 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003f76:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f84:	2b28      	cmp	r3, #40	; 0x28
 8003f86:	d003      	beq.n	8003f90 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f8e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f90:	887b      	ldrh	r3, [r7, #2]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00f      	beq.n	8003fba <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003fa0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fae:	2b28      	cmp	r3, #40	; 0x28
 8003fb0:	d003      	beq.n	8003fba <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003fb8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da03      	bge.n	8003fca <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d103      	bne.n	8003fd8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d103      	bne.n	8003fe6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f043 0320 	orr.w	r3, r3, #32
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d103      	bne.n	8003ff4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	400a      	ands	r2, r1
 8004004:	601a      	str	r2, [r3, #0]
}
 8004006:	bf00      	nop
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b20      	cmp	r3, #32
 8004026:	d138      	bne.n	800409a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004032:	2302      	movs	r3, #2
 8004034:	e032      	b.n	800409c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2224      	movs	r2, #36	; 0x24
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004064:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d139      	bne.n	8004132 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e033      	b.n	8004134 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2224      	movs	r2, #36	; 0x24
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800414a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414e:	6013      	str	r3, [r2, #0]
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40007000 	.word	0x40007000

08004160 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800418e:	f7fd fe71 	bl	8001e74 <HAL_GetTick>
 8004192:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004194:	e009      	b.n	80041aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004196:	f7fd fe6d 	bl	8001e74 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041a4:	d901      	bls.n	80041aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e022      	b.n	80041f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b6:	d1ee      	bne.n	8004196 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041b8:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0f      	ldr	r2, [pc, #60]	; (80041fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80041be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c4:	f7fd fe56 	bl	8001e74 <HAL_GetTick>
 80041c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041ca:	e009      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041cc:	f7fd fe52 	bl	8001e74 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041da:	d901      	bls.n	80041e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e007      	b.n	80041f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ec:	d1ee      	bne.n	80041cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	40007000 	.word	0x40007000

08004200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004208:	2300      	movs	r3, #0
 800420a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e291      	b.n	800473a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8087 	beq.w	8004332 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004224:	4b96      	ldr	r3, [pc, #600]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b04      	cmp	r3, #4
 800422e:	d00c      	beq.n	800424a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004230:	4b93      	ldr	r3, [pc, #588]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b08      	cmp	r3, #8
 800423a:	d112      	bne.n	8004262 <HAL_RCC_OscConfig+0x62>
 800423c:	4b90      	ldr	r3, [pc, #576]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004248:	d10b      	bne.n	8004262 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424a:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d06c      	beq.n	8004330 <HAL_RCC_OscConfig+0x130>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d168      	bne.n	8004330 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e26b      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x7a>
 800426c:	4b84      	ldr	r3, [pc, #528]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a83      	ldr	r2, [pc, #524]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e02e      	b.n	80042d8 <HAL_RCC_OscConfig+0xd8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x9c>
 8004282:	4b7f      	ldr	r3, [pc, #508]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a7e      	ldr	r2, [pc, #504]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b7c      	ldr	r3, [pc, #496]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a7b      	ldr	r2, [pc, #492]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e01d      	b.n	80042d8 <HAL_RCC_OscConfig+0xd8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0xc0>
 80042a6:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a75      	ldr	r2, [pc, #468]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b73      	ldr	r3, [pc, #460]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a72      	ldr	r2, [pc, #456]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0xd8>
 80042c0:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a6e      	ldr	r2, [pc, #440]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b6c      	ldr	r3, [pc, #432]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a6b      	ldr	r2, [pc, #428]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fdc8 	bl	8001e74 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fd fdc4 	bl	8001e74 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e21f      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe8>
 8004306:	e014      	b.n	8004332 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd fdb4 	bl	8001e74 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fd fdb0 	bl	8001e74 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e20b      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	4b57      	ldr	r3, [pc, #348]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x110>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d069      	beq.n	8004412 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800433e:	4b50      	ldr	r3, [pc, #320]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434a:	4b4d      	ldr	r3, [pc, #308]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b08      	cmp	r3, #8
 8004354:	d11c      	bne.n	8004390 <HAL_RCC_OscConfig+0x190>
 8004356:	4b4a      	ldr	r3, [pc, #296]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d116      	bne.n	8004390 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	4b47      	ldr	r3, [pc, #284]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_RCC_OscConfig+0x17a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e1df      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437a:	4b41      	ldr	r3, [pc, #260]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	493d      	ldr	r1, [pc, #244]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	e040      	b.n	8004412 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d023      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004398:	4b39      	ldr	r3, [pc, #228]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a38      	ldr	r2, [pc, #224]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd fd66 	bl	8001e74 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fd fd62 	bl	8001e74 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1bd      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b30      	ldr	r3, [pc, #192]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ca:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4929      	ldr	r1, [pc, #164]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]
 80043de:	e018      	b.n	8004412 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a26      	ldr	r2, [pc, #152]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fd42 	bl	8001e74 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fd fd3e 	bl	8001e74 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e199      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d038      	beq.n	8004490 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d019      	beq.n	800445a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	4a15      	ldr	r2, [pc, #84]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd fd1f 	bl	8001e74 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443a:	f7fd fd1b 	bl	8001e74 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e176      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x23a>
 8004458:	e01a      	b.n	8004490 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800445c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fd fd05 	bl	8001e74 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fd fd01 	bl	8001e74 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d903      	bls.n	8004484 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e15c      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
 8004480:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	4b91      	ldr	r3, [pc, #580]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ee      	bne.n	800446e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a4 	beq.w	80045e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4b8b      	ldr	r3, [pc, #556]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	4b88      	ldr	r3, [pc, #544]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	4a87      	ldr	r2, [pc, #540]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b4:	6413      	str	r3, [r2, #64]	; 0x40
 80044b6:	4b85      	ldr	r3, [pc, #532]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c6:	4b82      	ldr	r3, [pc, #520]	; (80046d0 <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044d2:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <HAL_RCC_OscConfig+0x4d0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7e      	ldr	r2, [pc, #504]	; (80046d0 <HAL_RCC_OscConfig+0x4d0>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044de:	f7fd fcc9 	bl	8001e74 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e6:	f7fd fcc5 	bl	8001e74 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b64      	cmp	r3, #100	; 0x64
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e120      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044f8:	4b75      	ldr	r3, [pc, #468]	; (80046d0 <HAL_RCC_OscConfig+0x4d0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x31a>
 800450c:	4b6f      	ldr	r3, [pc, #444]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a6e      	ldr	r2, [pc, #440]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	e02d      	b.n	8004576 <HAL_RCC_OscConfig+0x376>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x33c>
 8004522:	4b6a      	ldr	r3, [pc, #424]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a69      	ldr	r2, [pc, #420]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
 800452e:	4b67      	ldr	r3, [pc, #412]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a66      	ldr	r2, [pc, #408]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004534:	f023 0304 	bic.w	r3, r3, #4
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
 800453a:	e01c      	b.n	8004576 <HAL_RCC_OscConfig+0x376>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b05      	cmp	r3, #5
 8004542:	d10c      	bne.n	800455e <HAL_RCC_OscConfig+0x35e>
 8004544:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a60      	ldr	r2, [pc, #384]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
 8004550:	4b5e      	ldr	r3, [pc, #376]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	4a5d      	ldr	r2, [pc, #372]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6713      	str	r3, [r2, #112]	; 0x70
 800455c:	e00b      	b.n	8004576 <HAL_RCC_OscConfig+0x376>
 800455e:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a5a      	ldr	r2, [pc, #360]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
 800456a:	4b58      	ldr	r3, [pc, #352]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a57      	ldr	r2, [pc, #348]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004570:	f023 0304 	bic.w	r3, r3, #4
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d015      	beq.n	80045aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fd fc79 	bl	8001e74 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fd fc75 	bl	8001e74 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0ce      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ee      	beq.n	8004586 <HAL_RCC_OscConfig+0x386>
 80045a8:	e014      	b.n	80045d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fd fc63 	bl	8001e74 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fd fc5f 	bl	8001e74 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0b8      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c8:	4b40      	ldr	r3, [pc, #256]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ee      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d105      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b3c      	ldr	r3, [pc, #240]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a3b      	ldr	r2, [pc, #236]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80a4 	beq.w	8004738 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f0:	4b36      	ldr	r3, [pc, #216]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 030c 	and.w	r3, r3, #12
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d06b      	beq.n	80046d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d149      	bne.n	8004698 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004604:	4b31      	ldr	r3, [pc, #196]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a30      	ldr	r2, [pc, #192]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800460a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800460e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fd fc30 	bl	8001e74 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fd fc2c 	bl	8001e74 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e087      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	019b      	lsls	r3, r3, #6
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	3b01      	subs	r3, #1
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	4313      	orrs	r3, r2
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800465e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004662:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd fc00 	bl	8001e74 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd fbfc 	bl	8001e74 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e057      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x478>
 8004696:	e04f      	b.n	8004738 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fbe6 	bl	8001e74 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd fbe2 	bl	8001e74 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e03d      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	4b03      	ldr	r3, [pc, #12]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x4ac>
 80046ca:	e035      	b.n	8004738 <HAL_RCC_OscConfig+0x538>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_OscConfig+0x544>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d028      	beq.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d121      	bne.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d11a      	bne.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004704:	4013      	ands	r3, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800470a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800470c:	4293      	cmp	r3, r2
 800470e:	d111      	bne.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	3b01      	subs	r3, #1
 800471e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800

08004748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0d0      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b6a      	ldr	r3, [pc, #424]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d910      	bls.n	8004790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b67      	ldr	r3, [pc, #412]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 020f 	bic.w	r2, r3, #15
 8004776:	4965      	ldr	r1, [pc, #404]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b63      	ldr	r3, [pc, #396]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0b8      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a8:	4b59      	ldr	r3, [pc, #356]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a58      	ldr	r2, [pc, #352]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c0:	4b53      	ldr	r3, [pc, #332]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a52      	ldr	r2, [pc, #328]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047cc:	4b50      	ldr	r3, [pc, #320]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	494d      	ldr	r1, [pc, #308]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d040      	beq.n	800486c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d115      	bne.n	800482a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e07f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480a:	4b41      	ldr	r3, [pc, #260]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e073      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e06b      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482a:	4b39      	ldr	r3, [pc, #228]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4936      	ldr	r1, [pc, #216]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483c:	f7fd fb1a 	bl	8001e74 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fd fb16 	bl	8001e74 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e053      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 020c 	and.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	429a      	cmp	r2, r3
 800486a:	d1eb      	bne.n	8004844 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d210      	bcs.n	800489c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 020f 	bic.w	r2, r3, #15
 8004882:	4922      	ldr	r1, [pc, #136]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e032      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4916      	ldr	r1, [pc, #88]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048da:	f000 f821 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80048de:	4602      	mov	r2, r0
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	490a      	ldr	r1, [pc, #40]	; (8004914 <HAL_RCC_ClockConfig+0x1cc>)
 80048ec:	5ccb      	ldrb	r3, [r1, r3]
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <HAL_RCC_ClockConfig+0x1d0>)
 80048f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCC_ClockConfig+0x1d4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fd fa76 	bl	8001dec <HAL_InitTick>

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023c00 	.word	0x40023c00
 8004910:	40023800 	.word	0x40023800
 8004914:	08007850 	.word	0x08007850
 8004918:	20000000 	.word	0x20000000
 800491c:	20000004 	.word	0x20000004

08004920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	2300      	movs	r3, #0
 8004932:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004938:	4b67      	ldr	r3, [pc, #412]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d00d      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x40>
 8004944:	2b08      	cmp	r3, #8
 8004946:	f200 80bd 	bhi.w	8004ac4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x34>
 800494e:	2b04      	cmp	r3, #4
 8004950:	d003      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x3a>
 8004952:	e0b7      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b61      	ldr	r3, [pc, #388]	; (8004adc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004956:	60bb      	str	r3, [r7, #8]
      break;
 8004958:	e0b7      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495a:	4b61      	ldr	r3, [pc, #388]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800495c:	60bb      	str	r3, [r7, #8]
      break;
 800495e:	e0b4      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004960:	4b5d      	ldr	r3, [pc, #372]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004968:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800496a:	4b5b      	ldr	r3, [pc, #364]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04d      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004976:	4b58      	ldr	r3, [pc, #352]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	461a      	mov	r2, r3
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	ea02 0800 	and.w	r8, r2, r0
 800498e:	ea03 0901 	and.w	r9, r3, r1
 8004992:	4640      	mov	r0, r8
 8004994:	4649      	mov	r1, r9
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	014b      	lsls	r3, r1, #5
 80049a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049a4:	0142      	lsls	r2, r0, #5
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	ebb0 0008 	subs.w	r0, r0, r8
 80049ae:	eb61 0109 	sbc.w	r1, r1, r9
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	018b      	lsls	r3, r1, #6
 80049bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049c0:	0182      	lsls	r2, r0, #6
 80049c2:	1a12      	subs	r2, r2, r0
 80049c4:	eb63 0301 	sbc.w	r3, r3, r1
 80049c8:	f04f 0000 	mov.w	r0, #0
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	00d9      	lsls	r1, r3, #3
 80049d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049d6:	00d0      	lsls	r0, r2, #3
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	eb12 0208 	adds.w	r2, r2, r8
 80049e0:	eb43 0309 	adc.w	r3, r3, r9
 80049e4:	f04f 0000 	mov.w	r0, #0
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	0259      	lsls	r1, r3, #9
 80049ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049f2:	0250      	lsls	r0, r2, #9
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4610      	mov	r0, r2
 80049fa:	4619      	mov	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	f7fb ffee 	bl	80009e4 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e04a      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a12:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	ea02 0400 	and.w	r4, r2, r0
 8004a2a:	ea03 0501 	and.w	r5, r3, r1
 8004a2e:	4620      	mov	r0, r4
 8004a30:	4629      	mov	r1, r5
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	014b      	lsls	r3, r1, #5
 8004a3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a40:	0142      	lsls	r2, r0, #5
 8004a42:	4610      	mov	r0, r2
 8004a44:	4619      	mov	r1, r3
 8004a46:	1b00      	subs	r0, r0, r4
 8004a48:	eb61 0105 	sbc.w	r1, r1, r5
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	018b      	lsls	r3, r1, #6
 8004a56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a5a:	0182      	lsls	r2, r0, #6
 8004a5c:	1a12      	subs	r2, r2, r0
 8004a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	00d9      	lsls	r1, r3, #3
 8004a6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a70:	00d0      	lsls	r0, r2, #3
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	1912      	adds	r2, r2, r4
 8004a78:	eb45 0303 	adc.w	r3, r5, r3
 8004a7c:	f04f 0000 	mov.w	r0, #0
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	0299      	lsls	r1, r3, #10
 8004a86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a8a:	0290      	lsls	r0, r2, #10
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	f7fb ffa2 	bl	80009e4 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	60bb      	str	r3, [r7, #8]
      break;
 8004ac2:	e002      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ac6:	60bb      	str	r3, [r7, #8]
      break;
 8004ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aca:	68bb      	ldr	r3, [r7, #8]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	007a1200 	.word	0x007a1200

08004ae4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000000 	.word	0x20000000

08004afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b00:	f7ff fff0 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0a9b      	lsrs	r3, r3, #10
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	08007860 	.word	0x08007860

08004b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b28:	f7ff ffdc 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	0b5b      	lsrs	r3, r3, #13
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40023800 	.word	0x40023800
 8004b48:	08007860 	.word	0x08007860

08004b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d012      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b74:	4b69      	ldr	r3, [pc, #420]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a68      	ldr	r2, [pc, #416]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b7e:	6093      	str	r3, [r2, #8]
 8004b80:	4b66      	ldr	r3, [pc, #408]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	4964      	ldr	r1, [pc, #400]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d017      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ba6:	4b5d      	ldr	r3, [pc, #372]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	4959      	ldr	r1, [pc, #356]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc4:	d101      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d017      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004be2:	4b4e      	ldr	r3, [pc, #312]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	494a      	ldr	r1, [pc, #296]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c00:	d101      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c02:	2301      	movs	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 808b 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c30:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3c:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a34      	ldr	r2, [pc, #208]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c54:	f7fd f90e 	bl	8001e74 <HAL_GetTick>
 8004c58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5c:	f7fd f90a 	bl	8001e74 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	; 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e357      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c7a:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d035      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d02e      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	4a1a      	ldr	r2, [pc, #104]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cba:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cc0:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d114      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd f8d2 	bl	8001e74 <HAL_GetTick>
 8004cd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fd f8ce 	bl	8001e74 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e319      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0ee      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d02:	d111      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d12:	400b      	ands	r3, r1
 8004d14:	4901      	ldr	r1, [pc, #4]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40007000 	.word	0x40007000
 8004d24:	0ffffcff 	.word	0x0ffffcff
 8004d28:	4bb1      	ldr	r3, [pc, #708]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4ab0      	ldr	r2, [pc, #704]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d32:	6093      	str	r3, [r2, #8]
 8004d34:	4bae      	ldr	r3, [pc, #696]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d40:	49ab      	ldr	r1, [pc, #684]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d010      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d52:	4ba7      	ldr	r3, [pc, #668]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d58:	4aa5      	ldr	r2, [pc, #660]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d62:	4ba3      	ldr	r3, [pc, #652]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	49a0      	ldr	r1, [pc, #640]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d80:	4b9b      	ldr	r3, [pc, #620]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d8e:	4998      	ldr	r1, [pc, #608]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004da2:	4b93      	ldr	r3, [pc, #588]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004db0:	498f      	ldr	r1, [pc, #572]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dc4:	4b8a      	ldr	r3, [pc, #552]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd2:	4987      	ldr	r1, [pc, #540]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004de6:	4b82      	ldr	r3, [pc, #520]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	497e      	ldr	r1, [pc, #504]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e08:	4b79      	ldr	r3, [pc, #484]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	4976      	ldr	r1, [pc, #472]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e2a:	4b71      	ldr	r3, [pc, #452]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	f023 020c 	bic.w	r2, r3, #12
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e38:	496d      	ldr	r1, [pc, #436]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e4c:	4b68      	ldr	r3, [pc, #416]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	4965      	ldr	r1, [pc, #404]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e6e:	4b60      	ldr	r3, [pc, #384]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	495c      	ldr	r1, [pc, #368]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e90:	4b57      	ldr	r3, [pc, #348]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9e:	4954      	ldr	r1, [pc, #336]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004eb2:	4b4f      	ldr	r3, [pc, #316]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec0:	494b      	ldr	r1, [pc, #300]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ed4:	4b46      	ldr	r3, [pc, #280]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	4943      	ldr	r1, [pc, #268]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ef6:	4b3e      	ldr	r3, [pc, #248]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	493a      	ldr	r1, [pc, #232]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f18:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f26:	4932      	ldr	r1, [pc, #200]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d011      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f48:	4929      	ldr	r1, [pc, #164]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f58:	d101      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f88:	4919      	ldr	r1, [pc, #100]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00b      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fac:	4910      	ldr	r1, [pc, #64]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d006      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80d9 	beq.w	800517a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fc8:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a08      	ldr	r2, [pc, #32]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd4:	f7fc ff4e 	bl	8001e74 <HAL_GetTick>
 8004fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fda:	e00b      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fdc:	f7fc ff4a 	bl	8001e74 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d904      	bls.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e197      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff4:	4b6c      	ldr	r3, [pc, #432]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1ed      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d021      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11d      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005014:	4b64      	ldr	r3, [pc, #400]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005022:	4b61      	ldr	r3, [pc, #388]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005028:	0e1b      	lsrs	r3, r3, #24
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	019a      	lsls	r2, r3, #6
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	431a      	orrs	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	061b      	lsls	r3, r3, #24
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	071b      	lsls	r3, r3, #28
 8005048:	4957      	ldr	r1, [pc, #348]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d004      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800506e:	2b00      	cmp	r3, #0
 8005070:	d02e      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507a:	d129      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800507c:	4b4a      	ldr	r3, [pc, #296]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800507e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005082:	0c1b      	lsrs	r3, r3, #16
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800508a:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800508c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005090:	0f1b      	lsrs	r3, r3, #28
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	019a      	lsls	r2, r3, #6
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	041b      	lsls	r3, r3, #16
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	431a      	orrs	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	071b      	lsls	r3, r3, #28
 80050b0:	493d      	ldr	r1, [pc, #244]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050b8:	4b3b      	ldr	r3, [pc, #236]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050be:	f023 021f 	bic.w	r2, r3, #31
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4937      	ldr	r1, [pc, #220]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01d      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050dc:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e2:	0e1b      	lsrs	r3, r3, #24
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f0:	0f1b      	lsrs	r3, r3, #28
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	019a      	lsls	r2, r3, #6
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	431a      	orrs	r2, r3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	061b      	lsls	r3, r3, #24
 800510a:	431a      	orrs	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	071b      	lsls	r3, r3, #28
 8005110:	4925      	ldr	r1, [pc, #148]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d011      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	019a      	lsls	r2, r3, #6
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	071b      	lsls	r3, r3, #28
 8005140:	4919      	ldr	r1, [pc, #100]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005154:	f7fc fe8e 	bl	8001e74 <HAL_GetTick>
 8005158:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800515a:	e008      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800515c:	f7fc fe8a 	bl	8001e74 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e0d7      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b01      	cmp	r3, #1
 800517e:	f040 80cd 	bne.w	800531c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518e:	f7fc fe71 	bl	8001e74 <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005194:	e00a      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005196:	f7fc fe6d 	bl	8001e74 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b64      	cmp	r3, #100	; 0x64
 80051a2:	d903      	bls.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e0ba      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80051a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051ac:	4b5e      	ldr	r3, [pc, #376]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b8:	d0ed      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x682>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d02e      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d12a      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051e2:	4b51      	ldr	r3, [pc, #324]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051f0:	4b4d      	ldr	r3, [pc, #308]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	0f1b      	lsrs	r3, r3, #28
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	019a      	lsls	r2, r3, #6
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	431a      	orrs	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	071b      	lsls	r3, r3, #28
 8005216:	4944      	ldr	r1, [pc, #272]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800521e:	4b42      	ldr	r3, [pc, #264]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005224:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	3b01      	subs	r3, #1
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	493d      	ldr	r1, [pc, #244]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d022      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800524c:	d11d      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800524e:	4b36      	ldr	r3, [pc, #216]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	0e1b      	lsrs	r3, r3, #24
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800525c:	4b32      	ldr	r3, [pc, #200]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	0f1b      	lsrs	r3, r3, #28
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	019a      	lsls	r2, r3, #6
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	431a      	orrs	r2, r3
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	061b      	lsls	r3, r3, #24
 800527c:	431a      	orrs	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	071b      	lsls	r3, r3, #28
 8005282:	4929      	ldr	r1, [pc, #164]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d028      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	0e1b      	lsrs	r3, r3, #24
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052a4:	4b20      	ldr	r3, [pc, #128]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	019a      	lsls	r2, r3, #6
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	431a      	orrs	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	4917      	ldr	r1, [pc, #92]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052d2:	4b15      	ldr	r3, [pc, #84]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	4911      	ldr	r1, [pc, #68]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a0e      	ldr	r2, [pc, #56]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f4:	f7fc fdbe 	bl	8001e74 <HAL_GetTick>
 80052f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052fc:	f7fc fdba 	bl	8001e74 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	; 0x64
 8005308:	d901      	bls.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e007      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531a:	d1ef      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800

0800532c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e09d      	b.n	800547a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d108      	bne.n	8005358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534e:	d009      	beq.n	8005364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	61da      	str	r2, [r3, #28]
 8005356:	e005      	b.n	8005364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc f96a 	bl	8001658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a4:	d902      	bls.n	80053ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e002      	b.n	80053b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053ba:	d007      	beq.n	80053cc <HAL_SPI_Init+0xa0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	ea42 0103 	orr.w	r1, r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	f003 0204 	and.w	r2, r3, #4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005448:	ea42 0103 	orr.w	r1, r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10f      	bne.n	80054c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	099b      	lsrs	r3, r3, #6
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	4798      	blx	r3
    return;
 80054c6:	e0d7      	b.n	8005678 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_SPI_IRQHandler+0x66>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	09db      	lsrs	r3, r3, #7
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	4798      	blx	r3
    return;
 80054e8:	e0c6      	b.n	8005678 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10c      	bne.n	8005510 <HAL_SPI_IRQHandler+0x8c>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	099b      	lsrs	r3, r3, #6
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80b4 	beq.w	8005678 <HAL_SPI_IRQHandler+0x1f4>
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80ad 	beq.w	8005678 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d023      	beq.n	8005572 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d011      	beq.n	800555a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	f043 0204 	orr.w	r2, r3, #4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	e00b      	b.n	8005572 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800555a:	2300      	movs	r3, #0
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	693b      	ldr	r3, [r7, #16]
        return;
 8005570:	e082      	b.n	8005678 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d014      	beq.n	80055a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005582:	f043 0201 	orr.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	0a1b      	lsrs	r3, r3, #8
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00c      	beq.n	80055ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b8:	f043 0208 	orr.w	r2, r3, #8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055c0:	2300      	movs	r3, #0
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d04f      	beq.n	8005676 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <HAL_SPI_IRQHandler+0x17e>
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d034      	beq.n	800566c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0203 	bic.w	r2, r2, #3
 8005610:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	2b00      	cmp	r3, #0
 8005618:	d011      	beq.n	800563e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	4a18      	ldr	r2, [pc, #96]	; (8005680 <HAL_SPI_IRQHandler+0x1fc>)
 8005620:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	4618      	mov	r0, r3
 8005628:	f7fd fa76 	bl	8002b18 <HAL_DMA_Abort_IT>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	4a0d      	ldr	r2, [pc, #52]	; (8005680 <HAL_SPI_IRQHandler+0x1fc>)
 800564c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	4618      	mov	r0, r3
 8005654:	f7fd fa60 	bl	8002b18 <HAL_DMA_Abort_IT>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800566a:	e003      	b.n	8005674 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f809 	bl	8005684 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005672:	e000      	b.n	8005676 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005674:	bf00      	nop
    return;
 8005676:	bf00      	nop
  }
}
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	08005699 	.word	0x08005699

08005684 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff ffe5 	bl	8005684 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e049      	b.n	8005768 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fc f9d7 	bl	8001a9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f000 fd07 	bl	8006114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e049      	b.n	8005816 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fc f9a4 	bl	8001ae4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f000 fcb0 	bl	8006114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <HAL_TIM_IC_Start_IT+0x1a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005836:	b2db      	uxtb	r3, r3
 8005838:	e023      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x62>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d104      	bne.n	800584a <HAL_TIM_IC_Start_IT+0x2a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e01b      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x62>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d104      	bne.n	800585a <HAL_TIM_IC_Start_IT+0x3a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e013      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x62>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b0c      	cmp	r3, #12
 800585e:	d104      	bne.n	800586a <HAL_TIM_IC_Start_IT+0x4a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e00b      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x62>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b10      	cmp	r3, #16
 800586e:	d104      	bne.n	800587a <HAL_TIM_IC_Start_IT+0x5a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e003      	b.n	8005882 <HAL_TIM_IC_Start_IT+0x62>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005880:	b2db      	uxtb	r3, r3
 8005882:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <HAL_TIM_IC_Start_IT+0x74>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e013      	b.n	80058bc <HAL_TIM_IC_Start_IT+0x9c>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b04      	cmp	r3, #4
 8005898:	d104      	bne.n	80058a4 <HAL_TIM_IC_Start_IT+0x84>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e00b      	b.n	80058bc <HAL_TIM_IC_Start_IT+0x9c>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d104      	bne.n	80058b4 <HAL_TIM_IC_Start_IT+0x94>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e003      	b.n	80058bc <HAL_TIM_IC_Start_IT+0x9c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d102      	bne.n	80058ca <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d001      	beq.n	80058ce <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0dd      	b.n	8005a8a <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <HAL_TIM_IC_Start_IT+0xbe>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058dc:	e023      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x106>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_IC_Start_IT+0xce>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	e01b      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x106>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_IC_Start_IT+0xde>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fc:	e013      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x106>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d104      	bne.n	800590e <HAL_TIM_IC_Start_IT+0xee>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800590c:	e00b      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x106>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b10      	cmp	r3, #16
 8005912:	d104      	bne.n	800591e <HAL_TIM_IC_Start_IT+0xfe>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800591c:	e003      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x106>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_TIM_IC_Start_IT+0x116>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005934:	e013      	b.n	800595e <HAL_TIM_IC_Start_IT+0x13e>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d104      	bne.n	8005946 <HAL_TIM_IC_Start_IT+0x126>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005944:	e00b      	b.n	800595e <HAL_TIM_IC_Start_IT+0x13e>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d104      	bne.n	8005956 <HAL_TIM_IC_Start_IT+0x136>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005954:	e003      	b.n	800595e <HAL_TIM_IC_Start_IT+0x13e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	d841      	bhi.n	80059e8 <HAL_TIM_IC_Start_IT+0x1c8>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <HAL_TIM_IC_Start_IT+0x14c>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059e9 	.word	0x080059e9
 8005974:	080059e9 	.word	0x080059e9
 8005978:	080059e9 	.word	0x080059e9
 800597c:	080059b3 	.word	0x080059b3
 8005980:	080059e9 	.word	0x080059e9
 8005984:	080059e9 	.word	0x080059e9
 8005988:	080059e9 	.word	0x080059e9
 800598c:	080059c5 	.word	0x080059c5
 8005990:	080059e9 	.word	0x080059e9
 8005994:	080059e9 	.word	0x080059e9
 8005998:	080059e9 	.word	0x080059e9
 800599c:	080059d7 	.word	0x080059d7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0202 	orr.w	r2, r2, #2
 80059ae:	60da      	str	r2, [r3, #12]
      break;
 80059b0:	e01b      	b.n	80059ea <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0204 	orr.w	r2, r2, #4
 80059c0:	60da      	str	r2, [r3, #12]
      break;
 80059c2:	e012      	b.n	80059ea <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0208 	orr.w	r2, r2, #8
 80059d2:	60da      	str	r2, [r3, #12]
      break;
 80059d4:	e009      	b.n	80059ea <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0210 	orr.w	r2, r2, #16
 80059e4:	60da      	str	r2, [r3, #12]
      break;
 80059e6:	e000      	b.n	80059ea <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80059e8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 ffb6 	bl	8006964 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a25      	ldr	r2, [pc, #148]	; (8005a94 <HAL_TIM_IC_Start_IT+0x274>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d022      	beq.n	8005a48 <HAL_TIM_IC_Start_IT+0x228>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d01d      	beq.n	8005a48 <HAL_TIM_IC_Start_IT+0x228>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a21      	ldr	r2, [pc, #132]	; (8005a98 <HAL_TIM_IC_Start_IT+0x278>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_TIM_IC_Start_IT+0x228>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <HAL_TIM_IC_Start_IT+0x27c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <HAL_TIM_IC_Start_IT+0x228>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <HAL_TIM_IC_Start_IT+0x280>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_TIM_IC_Start_IT+0x228>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <HAL_TIM_IC_Start_IT+0x284>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_TIM_IC_Start_IT+0x228>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <HAL_TIM_IC_Start_IT+0x288>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_IC_Start_IT+0x228>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <HAL_TIM_IC_Start_IT+0x28c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d115      	bne.n	8005a74 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <HAL_TIM_IC_Start_IT+0x290>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d015      	beq.n	8005a86 <HAL_TIM_IC_Start_IT+0x266>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d011      	beq.n	8005a86 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0201 	orr.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a72:	e008      	b.n	8005a86 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e000      	b.n	8005a88 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40001800 	.word	0x40001800
 8005ab0:	00010007 	.word	0x00010007

08005ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0202 	mvn.w	r2, #2
 8005ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fb fb5e 	bl	80011b8 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 faea 	bl	80060d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 faf1 	bl	80060ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d122      	bne.n	8005b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0204 	mvn.w	r2, #4
 8005b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fb fb34 	bl	80011b8 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fac0 	bl	80060d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fac7 	bl	80060ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0208 	mvn.w	r2, #8
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fb0a 	bl	80011b8 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa96 	bl	80060d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fa9d 	bl	80060ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0210 	mvn.w	r2, #16
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2208      	movs	r2, #8
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fb fae0 	bl	80011b8 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa6c 	bl	80060d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fa73 	bl	80060ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d10e      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0201 	mvn.w	r2, #1
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa46 	bl	80060c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b80      	cmp	r3, #128	; 0x80
 8005c44:	d10e      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d107      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 ff3e 	bl	8006ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c72:	d10e      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	d107      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 ff31 	bl	8006af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d10e      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d107      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fa21 	bl	8006100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d10e      	bne.n	8005cea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d107      	bne.n	8005cea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0220 	mvn.w	r2, #32
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fef1 	bl	8006acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_TIM_IC_ConfigChannel+0x1a>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e082      	b.n	8005e12 <HAL_TIM_IC_ConfigChannel+0x120>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d11b      	bne.n	8005d52 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6819      	ldr	r1, [r3, #0]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f000 fcf1 	bl	8006710 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699a      	ldr	r2, [r3, #24]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 020c 	bic.w	r2, r2, #12
 8005d3c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6999      	ldr	r1, [r3, #24]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	619a      	str	r2, [r3, #24]
 8005d50:	e05a      	b.n	8005e08 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d11c      	bne.n	8005d92 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f000 fd46 	bl	80067f8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d7a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]
 8005d90:	e03a      	b.n	8005e08 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d11b      	bne.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f000 fd63 	bl	8006872 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 020c 	bic.w	r2, r2, #12
 8005dba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69d9      	ldr	r1, [r3, #28]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	61da      	str	r2, [r3, #28]
 8005dce:	e01b      	b.n	8005e08 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	6819      	ldr	r1, [r3, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f000 fd83 	bl	80068ea <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69da      	ldr	r2, [r3, #28]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005df2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69d9      	ldr	r1, [r3, #28]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	021a      	lsls	r2, r3, #8
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e0fd      	b.n	8006032 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b14      	cmp	r3, #20
 8005e42:	f200 80f0 	bhi.w	8006026 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08006027 	.word	0x08006027
 8005e54:	08006027 	.word	0x08006027
 8005e58:	08006027 	.word	0x08006027
 8005e5c:	08005ee1 	.word	0x08005ee1
 8005e60:	08006027 	.word	0x08006027
 8005e64:	08006027 	.word	0x08006027
 8005e68:	08006027 	.word	0x08006027
 8005e6c:	08005f23 	.word	0x08005f23
 8005e70:	08006027 	.word	0x08006027
 8005e74:	08006027 	.word	0x08006027
 8005e78:	08006027 	.word	0x08006027
 8005e7c:	08005f63 	.word	0x08005f63
 8005e80:	08006027 	.word	0x08006027
 8005e84:	08006027 	.word	0x08006027
 8005e88:	08006027 	.word	0x08006027
 8005e8c:	08005fa5 	.word	0x08005fa5
 8005e90:	08006027 	.word	0x08006027
 8005e94:	08006027 	.word	0x08006027
 8005e98:	08006027 	.word	0x08006027
 8005e9c:	08005fe5 	.word	0x08005fe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f9d4 	bl	8006254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0208 	orr.w	r2, r2, #8
 8005eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0204 	bic.w	r2, r2, #4
 8005eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6999      	ldr	r1, [r3, #24]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	619a      	str	r2, [r3, #24]
      break;
 8005ede:	e0a3      	b.n	8006028 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fa26 	bl	8006338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6999      	ldr	r1, [r3, #24]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	021a      	lsls	r2, r3, #8
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	619a      	str	r2, [r3, #24]
      break;
 8005f20:	e082      	b.n	8006028 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fa7d 	bl	8006428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0208 	orr.w	r2, r2, #8
 8005f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0204 	bic.w	r2, r2, #4
 8005f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69d9      	ldr	r1, [r3, #28]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	61da      	str	r2, [r3, #28]
      break;
 8005f60:	e062      	b.n	8006028 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fad3 	bl	8006514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	021a      	lsls	r2, r3, #8
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	61da      	str	r2, [r3, #28]
      break;
 8005fa2:	e041      	b.n	8006028 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fb0a 	bl	80065c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0208 	orr.w	r2, r2, #8
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0204 	bic.w	r2, r2, #4
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fe2:	e021      	b.n	8006028 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fb3c 	bl	8006668 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006024:	e000      	b.n	8006028 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006026:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop

0800603c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d831      	bhi.n	80060b4 <HAL_TIM_ReadCapturedValue+0x78>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	0800608d 	.word	0x0800608d
 800605c:	080060b5 	.word	0x080060b5
 8006060:	080060b5 	.word	0x080060b5
 8006064:	080060b5 	.word	0x080060b5
 8006068:	08006097 	.word	0x08006097
 800606c:	080060b5 	.word	0x080060b5
 8006070:	080060b5 	.word	0x080060b5
 8006074:	080060b5 	.word	0x080060b5
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060b5 	.word	0x080060b5
 8006080:	080060b5 	.word	0x080060b5
 8006084:	080060b5 	.word	0x080060b5
 8006088:	080060ab 	.word	0x080060ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006092:	60fb      	str	r3, [r7, #12]

      break;
 8006094:	e00f      	b.n	80060b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	60fb      	str	r3, [r7, #12]

      break;
 800609e:	e00a      	b.n	80060b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	60fb      	str	r3, [r7, #12]

      break;
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	60fb      	str	r3, [r7, #12]

      break;
 80060b2:	e000      	b.n	80060b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060b4:	bf00      	nop
  }

  return tmpreg;
 80060b6:	68fb      	ldr	r3, [r7, #12]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a40      	ldr	r2, [pc, #256]	; (8006228 <TIM_Base_SetConfig+0x114>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d013      	beq.n	8006154 <TIM_Base_SetConfig+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006132:	d00f      	beq.n	8006154 <TIM_Base_SetConfig+0x40>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a3d      	ldr	r2, [pc, #244]	; (800622c <TIM_Base_SetConfig+0x118>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00b      	beq.n	8006154 <TIM_Base_SetConfig+0x40>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a3c      	ldr	r2, [pc, #240]	; (8006230 <TIM_Base_SetConfig+0x11c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_Base_SetConfig+0x40>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a3b      	ldr	r2, [pc, #236]	; (8006234 <TIM_Base_SetConfig+0x120>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0x40>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a3a      	ldr	r2, [pc, #232]	; (8006238 <TIM_Base_SetConfig+0x124>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d108      	bne.n	8006166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2f      	ldr	r2, [pc, #188]	; (8006228 <TIM_Base_SetConfig+0x114>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d02b      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006174:	d027      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2c      	ldr	r2, [pc, #176]	; (800622c <TIM_Base_SetConfig+0x118>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d023      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2b      	ldr	r2, [pc, #172]	; (8006230 <TIM_Base_SetConfig+0x11c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d01f      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2a      	ldr	r2, [pc, #168]	; (8006234 <TIM_Base_SetConfig+0x120>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01b      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a29      	ldr	r2, [pc, #164]	; (8006238 <TIM_Base_SetConfig+0x124>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d017      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a28      	ldr	r2, [pc, #160]	; (800623c <TIM_Base_SetConfig+0x128>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a27      	ldr	r2, [pc, #156]	; (8006240 <TIM_Base_SetConfig+0x12c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00f      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a26      	ldr	r2, [pc, #152]	; (8006244 <TIM_Base_SetConfig+0x130>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00b      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a25      	ldr	r2, [pc, #148]	; (8006248 <TIM_Base_SetConfig+0x134>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d007      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a24      	ldr	r2, [pc, #144]	; (800624c <TIM_Base_SetConfig+0x138>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d003      	beq.n	80061c6 <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a23      	ldr	r2, [pc, #140]	; (8006250 <TIM_Base_SetConfig+0x13c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d108      	bne.n	80061d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <TIM_Base_SetConfig+0x114>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_Base_SetConfig+0xf8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a0c      	ldr	r2, [pc, #48]	; (8006238 <TIM_Base_SetConfig+0x124>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d103      	bne.n	8006214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	615a      	str	r2, [r3, #20]
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40010000 	.word	0x40010000
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40010400 	.word	0x40010400
 800623c:	40014000 	.word	0x40014000
 8006240:	40014400 	.word	0x40014400
 8006244:	40014800 	.word	0x40014800
 8006248:	40001800 	.word	0x40001800
 800624c:	40001c00 	.word	0x40001c00
 8006250:	40002000 	.word	0x40002000

08006254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4b2b      	ldr	r3, [pc, #172]	; (800632c <TIM_OC1_SetConfig+0xd8>)
 8006280:	4013      	ands	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0303 	bic.w	r3, r3, #3
 800628a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f023 0302 	bic.w	r3, r3, #2
 800629c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a21      	ldr	r2, [pc, #132]	; (8006330 <TIM_OC1_SetConfig+0xdc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_OC1_SetConfig+0x64>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a20      	ldr	r2, [pc, #128]	; (8006334 <TIM_OC1_SetConfig+0xe0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d10c      	bne.n	80062d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f023 0308 	bic.w	r3, r3, #8
 80062be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 0304 	bic.w	r3, r3, #4
 80062d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a16      	ldr	r2, [pc, #88]	; (8006330 <TIM_OC1_SetConfig+0xdc>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d003      	beq.n	80062e2 <TIM_OC1_SetConfig+0x8e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a15      	ldr	r2, [pc, #84]	; (8006334 <TIM_OC1_SetConfig+0xe0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d111      	bne.n	8006306 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	621a      	str	r2, [r3, #32]
}
 8006320:	bf00      	nop
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	fffeff8f 	.word	0xfffeff8f
 8006330:	40010000 	.word	0x40010000
 8006334:	40010400 	.word	0x40010400

08006338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f023 0210 	bic.w	r2, r3, #16
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4b2e      	ldr	r3, [pc, #184]	; (800641c <TIM_OC2_SetConfig+0xe4>)
 8006364:	4013      	ands	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f023 0320 	bic.w	r3, r3, #32
 8006382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a23      	ldr	r2, [pc, #140]	; (8006420 <TIM_OC2_SetConfig+0xe8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_OC2_SetConfig+0x68>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a22      	ldr	r2, [pc, #136]	; (8006424 <TIM_OC2_SetConfig+0xec>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10d      	bne.n	80063bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a18      	ldr	r2, [pc, #96]	; (8006420 <TIM_OC2_SetConfig+0xe8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_OC2_SetConfig+0x94>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a17      	ldr	r2, [pc, #92]	; (8006424 <TIM_OC2_SetConfig+0xec>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d113      	bne.n	80063f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	feff8fff 	.word	0xfeff8fff
 8006420:	40010000 	.word	0x40010000
 8006424:	40010400 	.word	0x40010400

08006428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <TIM_OC3_SetConfig+0xe0>)
 8006454:	4013      	ands	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a22      	ldr	r2, [pc, #136]	; (800650c <TIM_OC3_SetConfig+0xe4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_OC3_SetConfig+0x66>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a21      	ldr	r2, [pc, #132]	; (8006510 <TIM_OC3_SetConfig+0xe8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d10d      	bne.n	80064aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a17      	ldr	r2, [pc, #92]	; (800650c <TIM_OC3_SetConfig+0xe4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d003      	beq.n	80064ba <TIM_OC3_SetConfig+0x92>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a16      	ldr	r2, [pc, #88]	; (8006510 <TIM_OC3_SetConfig+0xe8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d113      	bne.n	80064e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	621a      	str	r2, [r3, #32]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	fffeff8f 	.word	0xfffeff8f
 800650c:	40010000 	.word	0x40010000
 8006510:	40010400 	.word	0x40010400

08006514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <TIM_OC4_SetConfig+0xa4>)
 8006540:	4013      	ands	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800655e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	031b      	lsls	r3, r3, #12
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <TIM_OC4_SetConfig+0xa8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC4_SetConfig+0x68>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <TIM_OC4_SetConfig+0xac>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d109      	bne.n	8006590 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	019b      	lsls	r3, r3, #6
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	feff8fff 	.word	0xfeff8fff
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40010400 	.word	0x40010400

080065c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4b1b      	ldr	r3, [pc, #108]	; (800665c <TIM_OC5_SetConfig+0x98>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006604:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	041b      	lsls	r3, r3, #16
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a12      	ldr	r2, [pc, #72]	; (8006660 <TIM_OC5_SetConfig+0x9c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC5_SetConfig+0x5e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a11      	ldr	r2, [pc, #68]	; (8006664 <TIM_OC5_SetConfig+0xa0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d109      	bne.n	8006636 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006628:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	621a      	str	r2, [r3, #32]
}
 8006650:	bf00      	nop
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	fffeff8f 	.word	0xfffeff8f
 8006660:	40010000 	.word	0x40010000
 8006664:	40010400 	.word	0x40010400

08006668 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <TIM_OC6_SetConfig+0x9c>)
 8006694:	4013      	ands	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	051b      	lsls	r3, r3, #20
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a13      	ldr	r2, [pc, #76]	; (8006708 <TIM_OC6_SetConfig+0xa0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_OC6_SetConfig+0x60>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a12      	ldr	r2, [pc, #72]	; (800670c <TIM_OC6_SetConfig+0xa4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d109      	bne.n	80066dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	feff8fff 	.word	0xfeff8fff
 8006708:	40010000 	.word	0x40010000
 800670c:	40010400 	.word	0x40010400

08006710 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0201 	bic.w	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a28      	ldr	r2, [pc, #160]	; (80067dc <TIM_TI1_SetConfig+0xcc>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01b      	beq.n	8006776 <TIM_TI1_SetConfig+0x66>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006744:	d017      	beq.n	8006776 <TIM_TI1_SetConfig+0x66>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <TIM_TI1_SetConfig+0xd0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d013      	beq.n	8006776 <TIM_TI1_SetConfig+0x66>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <TIM_TI1_SetConfig+0xd4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00f      	beq.n	8006776 <TIM_TI1_SetConfig+0x66>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4a23      	ldr	r2, [pc, #140]	; (80067e8 <TIM_TI1_SetConfig+0xd8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00b      	beq.n	8006776 <TIM_TI1_SetConfig+0x66>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a22      	ldr	r2, [pc, #136]	; (80067ec <TIM_TI1_SetConfig+0xdc>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d007      	beq.n	8006776 <TIM_TI1_SetConfig+0x66>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <TIM_TI1_SetConfig+0xe0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_TI1_SetConfig+0x66>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <TIM_TI1_SetConfig+0xe4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d101      	bne.n	800677a <TIM_TI1_SetConfig+0x6a>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <TIM_TI1_SetConfig+0x6c>
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	e003      	b.n	800679a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f023 030a 	bic.w	r3, r3, #10
 80067b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f003 030a 	and.w	r3, r3, #10
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40010400 	.word	0x40010400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40001800 	.word	0x40001800

080067f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0210 	bic.w	r2, r3, #16
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006836:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	031b      	lsls	r3, r3, #12
 800683c:	b29b      	uxth	r3, r3
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800684a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006872:	b480      	push	{r7}
 8006874:	b087      	sub	sp, #28
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
 80068f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006916:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006928:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	031b      	lsls	r3, r3, #12
 800692e:	b29b      	uxth	r3, r3
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800693c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	031b      	lsls	r3, r3, #12
 8006942:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	4313      	orrs	r3, r2
 800694a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	621a      	str	r2, [r3, #32]
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	2201      	movs	r2, #1
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	43db      	mvns	r3, r3
 8006986:	401a      	ands	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	fa01 f303 	lsl.w	r3, r1, r3
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e06d      	b.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a30      	ldr	r2, [pc, #192]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2f      	ldr	r2, [pc, #188]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d022      	beq.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3a:	d01d      	beq.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d018      	beq.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a1c      	ldr	r2, [pc, #112]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d013      	beq.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00e      	beq.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d009      	beq.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d004      	beq.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10c      	bne.n	8006a92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40010400 	.word	0x40010400
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40000c00 	.word	0x40000c00
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40001800 	.word	0x40001800

08006acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e040      	b.n	8006b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fb f8dc 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2224      	movs	r2, #36	; 0x24
 8006b34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa38 	bl	8006fbc <UART_SetConfig>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e022      	b.n	8006b9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fc8e 	bl	8007480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fd15 	bl	80075c4 <UART_CheckIdleState>
 8006b9a:	4603      	mov	r3, r0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bca:	4013      	ands	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d113      	bne.n	8006bfc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00e      	beq.n	8006bfc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 81b9 	beq.w	8006f64 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
      }
      return;
 8006bfa:	e1b3      	b.n	8006f64 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80e3 	beq.w	8006dca <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d105      	bne.n	8006c1a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	4ba5      	ldr	r3, [pc, #660]	; (8006ea8 <HAL_UART_IRQHandler+0x304>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80d8 	beq.w	8006dca <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d010      	beq.n	8006c46 <HAL_UART_IRQHandler+0xa2>
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2201      	movs	r2, #1
 8006c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c3c:	f043 0201 	orr.w	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <HAL_UART_IRQHandler+0xce>
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c68:	f043 0204 	orr.w	r2, r3, #4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d010      	beq.n	8006c9e <HAL_UART_IRQHandler+0xfa>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00b      	beq.n	8006c9e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c94:	f043 0202 	orr.w	r2, r3, #2
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d015      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cca:	f043 0208 	orr.w	r2, r3, #8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <HAL_UART_IRQHandler+0x15e>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00c      	beq.n	8006d02 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf8:	f043 0220 	orr.w	r2, r3, #32
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 812d 	beq.w	8006f68 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00c      	beq.n	8006d32 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d004      	beq.n	8006d52 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d031      	beq.n	8006db6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fce5 	bl	8007722 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d123      	bne.n	8006dae <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d74:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d013      	beq.n	8006da6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	4a4a      	ldr	r2, [pc, #296]	; (8006eac <HAL_UART_IRQHandler+0x308>)
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fb fec4 	bl	8002b18 <HAL_DMA_Abort_IT>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006da0:	4610      	mov	r0, r2
 8006da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da4:	e00f      	b.n	8006dc6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f8f2 	bl	8006f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	e00b      	b.n	8006dc6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f8ee 	bl	8006f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	e007      	b.n	8006dc6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8ea 	bl	8006f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006dc4:	e0d0      	b.n	8006f68 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc6:	bf00      	nop
    return;
 8006dc8:	e0ce      	b.n	8006f68 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	f040 80a7 	bne.w	8006f22 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80a1 	beq.w	8006f22 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 809b 	beq.w	8006f22 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2210      	movs	r2, #16
 8006df2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b40      	cmp	r3, #64	; 0x40
 8006e00:	d156      	bne.n	8006eb0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006e0c:	893b      	ldrh	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 80ac 	beq.w	8006f6c <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e1a:	893a      	ldrh	r2, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	f080 80a5 	bcs.w	8006f6c <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	893a      	ldrh	r2, [r7, #8]
 8006e26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e34:	d02a      	beq.n	8006e8c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e64:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0210 	bic.w	r2, r2, #16
 8006e80:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fb fdd6 	bl	8002a38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f87f 	bl	8006fa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ea6:	e061      	b.n	8006f6c <HAL_UART_IRQHandler+0x3c8>
 8006ea8:	04000120 	.word	0x04000120
 8006eac:	08007781 	.word	0x08007781
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d050      	beq.n	8006f70 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8006ece:	897b      	ldrh	r3, [r7, #10]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d04d      	beq.n	8006f70 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ee2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0201 	bic.w	r2, r2, #1
 8006ef2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0210 	bic.w	r2, r2, #16
 8006f14:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f16:	897b      	ldrh	r3, [r7, #10]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f842 	bl	8006fa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f20:	e026      	b.n	8006f70 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00d      	beq.n	8006f48 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01a      	beq.n	8006f74 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
    }
    return;
 8006f46:	e015      	b.n	8006f74 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d011      	beq.n	8006f76 <HAL_UART_IRQHandler+0x3d2>
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00c      	beq.n	8006f76 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fc25 	bl	80077ac <UART_EndTransmit_IT>
    return;
 8006f62:	e008      	b.n	8006f76 <HAL_UART_IRQHandler+0x3d2>
      return;
 8006f64:	bf00      	nop
 8006f66:	e006      	b.n	8006f76 <HAL_UART_IRQHandler+0x3d2>
    return;
 8006f68:	bf00      	nop
 8006f6a:	e004      	b.n	8006f76 <HAL_UART_IRQHandler+0x3d2>
      return;
 8006f6c:	bf00      	nop
 8006f6e:	e002      	b.n	8006f76 <HAL_UART_IRQHandler+0x3d2>
      return;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <HAL_UART_IRQHandler+0x3d2>
    return;
 8006f74:	bf00      	nop
  }

}
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4ba7      	ldr	r3, [pc, #668]	; (8007284 <UART_SetConfig+0x2c8>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	6979      	ldr	r1, [r7, #20]
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	430a      	orrs	r2, r1
 800702c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a95      	ldr	r2, [pc, #596]	; (8007288 <UART_SetConfig+0x2cc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d120      	bne.n	800707a <UART_SetConfig+0xbe>
 8007038:	4b94      	ldr	r3, [pc, #592]	; (800728c <UART_SetConfig+0x2d0>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	2b03      	cmp	r3, #3
 8007044:	d816      	bhi.n	8007074 <UART_SetConfig+0xb8>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x90>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	0800705d 	.word	0x0800705d
 8007050:	08007069 	.word	0x08007069
 8007054:	08007063 	.word	0x08007063
 8007058:	0800706f 	.word	0x0800706f
 800705c:	2301      	movs	r3, #1
 800705e:	77fb      	strb	r3, [r7, #31]
 8007060:	e14f      	b.n	8007302 <UART_SetConfig+0x346>
 8007062:	2302      	movs	r3, #2
 8007064:	77fb      	strb	r3, [r7, #31]
 8007066:	e14c      	b.n	8007302 <UART_SetConfig+0x346>
 8007068:	2304      	movs	r3, #4
 800706a:	77fb      	strb	r3, [r7, #31]
 800706c:	e149      	b.n	8007302 <UART_SetConfig+0x346>
 800706e:	2308      	movs	r3, #8
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e146      	b.n	8007302 <UART_SetConfig+0x346>
 8007074:	2310      	movs	r3, #16
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	e143      	b.n	8007302 <UART_SetConfig+0x346>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a84      	ldr	r2, [pc, #528]	; (8007290 <UART_SetConfig+0x2d4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d132      	bne.n	80070ea <UART_SetConfig+0x12e>
 8007084:	4b81      	ldr	r3, [pc, #516]	; (800728c <UART_SetConfig+0x2d0>)
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	2b0c      	cmp	r3, #12
 8007090:	d828      	bhi.n	80070e4 <UART_SetConfig+0x128>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <UART_SetConfig+0xdc>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070cd 	.word	0x080070cd
 800709c:	080070e5 	.word	0x080070e5
 80070a0:	080070e5 	.word	0x080070e5
 80070a4:	080070e5 	.word	0x080070e5
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	080070e5 	.word	0x080070e5
 80070b0:	080070e5 	.word	0x080070e5
 80070b4:	080070e5 	.word	0x080070e5
 80070b8:	080070d3 	.word	0x080070d3
 80070bc:	080070e5 	.word	0x080070e5
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070e5 	.word	0x080070e5
 80070c8:	080070df 	.word	0x080070df
 80070cc:	2300      	movs	r3, #0
 80070ce:	77fb      	strb	r3, [r7, #31]
 80070d0:	e117      	b.n	8007302 <UART_SetConfig+0x346>
 80070d2:	2302      	movs	r3, #2
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e114      	b.n	8007302 <UART_SetConfig+0x346>
 80070d8:	2304      	movs	r3, #4
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e111      	b.n	8007302 <UART_SetConfig+0x346>
 80070de:	2308      	movs	r3, #8
 80070e0:	77fb      	strb	r3, [r7, #31]
 80070e2:	e10e      	b.n	8007302 <UART_SetConfig+0x346>
 80070e4:	2310      	movs	r3, #16
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	e10b      	b.n	8007302 <UART_SetConfig+0x346>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a69      	ldr	r2, [pc, #420]	; (8007294 <UART_SetConfig+0x2d8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d120      	bne.n	8007136 <UART_SetConfig+0x17a>
 80070f4:	4b65      	ldr	r3, [pc, #404]	; (800728c <UART_SetConfig+0x2d0>)
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070fe:	2b30      	cmp	r3, #48	; 0x30
 8007100:	d013      	beq.n	800712a <UART_SetConfig+0x16e>
 8007102:	2b30      	cmp	r3, #48	; 0x30
 8007104:	d814      	bhi.n	8007130 <UART_SetConfig+0x174>
 8007106:	2b20      	cmp	r3, #32
 8007108:	d009      	beq.n	800711e <UART_SetConfig+0x162>
 800710a:	2b20      	cmp	r3, #32
 800710c:	d810      	bhi.n	8007130 <UART_SetConfig+0x174>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <UART_SetConfig+0x15c>
 8007112:	2b10      	cmp	r3, #16
 8007114:	d006      	beq.n	8007124 <UART_SetConfig+0x168>
 8007116:	e00b      	b.n	8007130 <UART_SetConfig+0x174>
 8007118:	2300      	movs	r3, #0
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e0f1      	b.n	8007302 <UART_SetConfig+0x346>
 800711e:	2302      	movs	r3, #2
 8007120:	77fb      	strb	r3, [r7, #31]
 8007122:	e0ee      	b.n	8007302 <UART_SetConfig+0x346>
 8007124:	2304      	movs	r3, #4
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e0eb      	b.n	8007302 <UART_SetConfig+0x346>
 800712a:	2308      	movs	r3, #8
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e0e8      	b.n	8007302 <UART_SetConfig+0x346>
 8007130:	2310      	movs	r3, #16
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e0e5      	b.n	8007302 <UART_SetConfig+0x346>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a57      	ldr	r2, [pc, #348]	; (8007298 <UART_SetConfig+0x2dc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d120      	bne.n	8007182 <UART_SetConfig+0x1c6>
 8007140:	4b52      	ldr	r3, [pc, #328]	; (800728c <UART_SetConfig+0x2d0>)
 8007142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714a:	2bc0      	cmp	r3, #192	; 0xc0
 800714c:	d013      	beq.n	8007176 <UART_SetConfig+0x1ba>
 800714e:	2bc0      	cmp	r3, #192	; 0xc0
 8007150:	d814      	bhi.n	800717c <UART_SetConfig+0x1c0>
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d009      	beq.n	800716a <UART_SetConfig+0x1ae>
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d810      	bhi.n	800717c <UART_SetConfig+0x1c0>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <UART_SetConfig+0x1a8>
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d006      	beq.n	8007170 <UART_SetConfig+0x1b4>
 8007162:	e00b      	b.n	800717c <UART_SetConfig+0x1c0>
 8007164:	2300      	movs	r3, #0
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e0cb      	b.n	8007302 <UART_SetConfig+0x346>
 800716a:	2302      	movs	r3, #2
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e0c8      	b.n	8007302 <UART_SetConfig+0x346>
 8007170:	2304      	movs	r3, #4
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e0c5      	b.n	8007302 <UART_SetConfig+0x346>
 8007176:	2308      	movs	r3, #8
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e0c2      	b.n	8007302 <UART_SetConfig+0x346>
 800717c:	2310      	movs	r3, #16
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e0bf      	b.n	8007302 <UART_SetConfig+0x346>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a45      	ldr	r2, [pc, #276]	; (800729c <UART_SetConfig+0x2e0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d125      	bne.n	80071d8 <UART_SetConfig+0x21c>
 800718c:	4b3f      	ldr	r3, [pc, #252]	; (800728c <UART_SetConfig+0x2d0>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719a:	d017      	beq.n	80071cc <UART_SetConfig+0x210>
 800719c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a0:	d817      	bhi.n	80071d2 <UART_SetConfig+0x216>
 80071a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a6:	d00b      	beq.n	80071c0 <UART_SetConfig+0x204>
 80071a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ac:	d811      	bhi.n	80071d2 <UART_SetConfig+0x216>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <UART_SetConfig+0x1fe>
 80071b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b6:	d006      	beq.n	80071c6 <UART_SetConfig+0x20a>
 80071b8:	e00b      	b.n	80071d2 <UART_SetConfig+0x216>
 80071ba:	2300      	movs	r3, #0
 80071bc:	77fb      	strb	r3, [r7, #31]
 80071be:	e0a0      	b.n	8007302 <UART_SetConfig+0x346>
 80071c0:	2302      	movs	r3, #2
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	e09d      	b.n	8007302 <UART_SetConfig+0x346>
 80071c6:	2304      	movs	r3, #4
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e09a      	b.n	8007302 <UART_SetConfig+0x346>
 80071cc:	2308      	movs	r3, #8
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e097      	b.n	8007302 <UART_SetConfig+0x346>
 80071d2:	2310      	movs	r3, #16
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e094      	b.n	8007302 <UART_SetConfig+0x346>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a30      	ldr	r2, [pc, #192]	; (80072a0 <UART_SetConfig+0x2e4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d125      	bne.n	800722e <UART_SetConfig+0x272>
 80071e2:	4b2a      	ldr	r3, [pc, #168]	; (800728c <UART_SetConfig+0x2d0>)
 80071e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f0:	d017      	beq.n	8007222 <UART_SetConfig+0x266>
 80071f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f6:	d817      	bhi.n	8007228 <UART_SetConfig+0x26c>
 80071f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fc:	d00b      	beq.n	8007216 <UART_SetConfig+0x25a>
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d811      	bhi.n	8007228 <UART_SetConfig+0x26c>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <UART_SetConfig+0x254>
 8007208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720c:	d006      	beq.n	800721c <UART_SetConfig+0x260>
 800720e:	e00b      	b.n	8007228 <UART_SetConfig+0x26c>
 8007210:	2301      	movs	r3, #1
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e075      	b.n	8007302 <UART_SetConfig+0x346>
 8007216:	2302      	movs	r3, #2
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	e072      	b.n	8007302 <UART_SetConfig+0x346>
 800721c:	2304      	movs	r3, #4
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e06f      	b.n	8007302 <UART_SetConfig+0x346>
 8007222:	2308      	movs	r3, #8
 8007224:	77fb      	strb	r3, [r7, #31]
 8007226:	e06c      	b.n	8007302 <UART_SetConfig+0x346>
 8007228:	2310      	movs	r3, #16
 800722a:	77fb      	strb	r3, [r7, #31]
 800722c:	e069      	b.n	8007302 <UART_SetConfig+0x346>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <UART_SetConfig+0x2e8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d137      	bne.n	80072a8 <UART_SetConfig+0x2ec>
 8007238:	4b14      	ldr	r3, [pc, #80]	; (800728c <UART_SetConfig+0x2d0>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007242:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007246:	d017      	beq.n	8007278 <UART_SetConfig+0x2bc>
 8007248:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800724c:	d817      	bhi.n	800727e <UART_SetConfig+0x2c2>
 800724e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007252:	d00b      	beq.n	800726c <UART_SetConfig+0x2b0>
 8007254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007258:	d811      	bhi.n	800727e <UART_SetConfig+0x2c2>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <UART_SetConfig+0x2aa>
 800725e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007262:	d006      	beq.n	8007272 <UART_SetConfig+0x2b6>
 8007264:	e00b      	b.n	800727e <UART_SetConfig+0x2c2>
 8007266:	2300      	movs	r3, #0
 8007268:	77fb      	strb	r3, [r7, #31]
 800726a:	e04a      	b.n	8007302 <UART_SetConfig+0x346>
 800726c:	2302      	movs	r3, #2
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e047      	b.n	8007302 <UART_SetConfig+0x346>
 8007272:	2304      	movs	r3, #4
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e044      	b.n	8007302 <UART_SetConfig+0x346>
 8007278:	2308      	movs	r3, #8
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e041      	b.n	8007302 <UART_SetConfig+0x346>
 800727e:	2310      	movs	r3, #16
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e03e      	b.n	8007302 <UART_SetConfig+0x346>
 8007284:	efff69f3 	.word	0xefff69f3
 8007288:	40011000 	.word	0x40011000
 800728c:	40023800 	.word	0x40023800
 8007290:	40004400 	.word	0x40004400
 8007294:	40004800 	.word	0x40004800
 8007298:	40004c00 	.word	0x40004c00
 800729c:	40005000 	.word	0x40005000
 80072a0:	40011400 	.word	0x40011400
 80072a4:	40007800 	.word	0x40007800
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a71      	ldr	r2, [pc, #452]	; (8007474 <UART_SetConfig+0x4b8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d125      	bne.n	80072fe <UART_SetConfig+0x342>
 80072b2:	4b71      	ldr	r3, [pc, #452]	; (8007478 <UART_SetConfig+0x4bc>)
 80072b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072c0:	d017      	beq.n	80072f2 <UART_SetConfig+0x336>
 80072c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072c6:	d817      	bhi.n	80072f8 <UART_SetConfig+0x33c>
 80072c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072cc:	d00b      	beq.n	80072e6 <UART_SetConfig+0x32a>
 80072ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d2:	d811      	bhi.n	80072f8 <UART_SetConfig+0x33c>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <UART_SetConfig+0x324>
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072dc:	d006      	beq.n	80072ec <UART_SetConfig+0x330>
 80072de:	e00b      	b.n	80072f8 <UART_SetConfig+0x33c>
 80072e0:	2300      	movs	r3, #0
 80072e2:	77fb      	strb	r3, [r7, #31]
 80072e4:	e00d      	b.n	8007302 <UART_SetConfig+0x346>
 80072e6:	2302      	movs	r3, #2
 80072e8:	77fb      	strb	r3, [r7, #31]
 80072ea:	e00a      	b.n	8007302 <UART_SetConfig+0x346>
 80072ec:	2304      	movs	r3, #4
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e007      	b.n	8007302 <UART_SetConfig+0x346>
 80072f2:	2308      	movs	r3, #8
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e004      	b.n	8007302 <UART_SetConfig+0x346>
 80072f8:	2310      	movs	r3, #16
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e001      	b.n	8007302 <UART_SetConfig+0x346>
 80072fe:	2310      	movs	r3, #16
 8007300:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800730a:	d15b      	bne.n	80073c4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800730c:	7ffb      	ldrb	r3, [r7, #31]
 800730e:	2b08      	cmp	r3, #8
 8007310:	d827      	bhi.n	8007362 <UART_SetConfig+0x3a6>
 8007312:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <UART_SetConfig+0x35c>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	0800733d 	.word	0x0800733d
 800731c:	08007345 	.word	0x08007345
 8007320:	0800734d 	.word	0x0800734d
 8007324:	08007363 	.word	0x08007363
 8007328:	08007353 	.word	0x08007353
 800732c:	08007363 	.word	0x08007363
 8007330:	08007363 	.word	0x08007363
 8007334:	08007363 	.word	0x08007363
 8007338:	0800735b 	.word	0x0800735b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800733c:	f7fd fbde 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8007340:	61b8      	str	r0, [r7, #24]
        break;
 8007342:	e013      	b.n	800736c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007344:	f7fd fbee 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8007348:	61b8      	str	r0, [r7, #24]
        break;
 800734a:	e00f      	b.n	800736c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800734c:	4b4b      	ldr	r3, [pc, #300]	; (800747c <UART_SetConfig+0x4c0>)
 800734e:	61bb      	str	r3, [r7, #24]
        break;
 8007350:	e00c      	b.n	800736c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007352:	f7fd fae5 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8007356:	61b8      	str	r0, [r7, #24]
        break;
 8007358:	e008      	b.n	800736c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800735e:	61bb      	str	r3, [r7, #24]
        break;
 8007360:	e004      	b.n	800736c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	77bb      	strb	r3, [r7, #30]
        break;
 800736a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d074      	beq.n	800745c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	005a      	lsls	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	441a      	add	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	fbb2 f3f3 	udiv	r3, r2, r3
 8007386:	b29b      	uxth	r3, r3
 8007388:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b0f      	cmp	r3, #15
 800738e:	d916      	bls.n	80073be <UART_SetConfig+0x402>
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007396:	d212      	bcs.n	80073be <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f023 030f 	bic.w	r3, r3, #15
 80073a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	085b      	lsrs	r3, r3, #1
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	89fb      	ldrh	r3, [r7, #14]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	89fa      	ldrh	r2, [r7, #14]
 80073ba:	60da      	str	r2, [r3, #12]
 80073bc:	e04e      	b.n	800745c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	77bb      	strb	r3, [r7, #30]
 80073c2:	e04b      	b.n	800745c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073c4:	7ffb      	ldrb	r3, [r7, #31]
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d827      	bhi.n	800741a <UART_SetConfig+0x45e>
 80073ca:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <UART_SetConfig+0x414>)
 80073cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d0:	080073f5 	.word	0x080073f5
 80073d4:	080073fd 	.word	0x080073fd
 80073d8:	08007405 	.word	0x08007405
 80073dc:	0800741b 	.word	0x0800741b
 80073e0:	0800740b 	.word	0x0800740b
 80073e4:	0800741b 	.word	0x0800741b
 80073e8:	0800741b 	.word	0x0800741b
 80073ec:	0800741b 	.word	0x0800741b
 80073f0:	08007413 	.word	0x08007413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f4:	f7fd fb82 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 80073f8:	61b8      	str	r0, [r7, #24]
        break;
 80073fa:	e013      	b.n	8007424 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073fc:	f7fd fb92 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8007400:	61b8      	str	r0, [r7, #24]
        break;
 8007402:	e00f      	b.n	8007424 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <UART_SetConfig+0x4c0>)
 8007406:	61bb      	str	r3, [r7, #24]
        break;
 8007408:	e00c      	b.n	8007424 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800740a:	f7fd fa89 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 800740e:	61b8      	str	r0, [r7, #24]
        break;
 8007410:	e008      	b.n	8007424 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007416:	61bb      	str	r3, [r7, #24]
        break;
 8007418:	e004      	b.n	8007424 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	77bb      	strb	r3, [r7, #30]
        break;
 8007422:	bf00      	nop
    }

    if (pclk != 0U)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d018      	beq.n	800745c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	085a      	lsrs	r2, r3, #1
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	441a      	add	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	fbb2 f3f3 	udiv	r3, r2, r3
 800743c:	b29b      	uxth	r3, r3
 800743e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b0f      	cmp	r3, #15
 8007444:	d908      	bls.n	8007458 <UART_SetConfig+0x49c>
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744c:	d204      	bcs.n	8007458 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	e001      	b.n	800745c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007468:	7fbb      	ldrb	r3, [r7, #30]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40007c00 	.word	0x40007c00
 8007478:	40023800 	.word	0x40023800
 800747c:	00f42400 	.word	0x00f42400

08007480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01a      	beq.n	8007596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800757e:	d10a      	bne.n	8007596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	605a      	str	r2, [r3, #4]
  }
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d4:	f7fa fc4e 	bl	8001e74 <HAL_GetTick>
 80075d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d10e      	bne.n	8007606 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f817 	bl	800762a <UART_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e00d      	b.n	8007622 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	4613      	mov	r3, r2
 8007638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763a:	e05e      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d05a      	beq.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007644:	f7fa fc16 	bl	8001e74 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	429a      	cmp	r2, r3
 8007652:	d302      	bcc.n	800765a <UART_WaitOnFlagUntilTimeout+0x30>
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d11b      	bne.n	8007692 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007668:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0201 	bic.w	r2, r2, #1
 8007678:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e043      	b.n	800771a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d02c      	beq.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ae:	d124      	bne.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0201 	bic.w	r2, r2, #1
 80076d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e00f      	b.n	800771a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4013      	ands	r3, r2
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	429a      	cmp	r2, r3
 8007708:	bf0c      	ite	eq
 800770a:	2301      	moveq	r3, #1
 800770c:	2300      	movne	r3, #0
 800770e:	b2db      	uxtb	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	429a      	cmp	r2, r3
 8007716:	d091      	beq.n	800763c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007738:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0201 	bic.w	r2, r2, #1
 8007748:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774e:	2b01      	cmp	r3, #1
 8007750:	d107      	bne.n	8007762 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0210 	bic.w	r2, r2, #16
 8007760:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff fbf6 	bl	8006f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff fbd3 	bl	8006f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <__libc_init_array>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4d0d      	ldr	r5, [pc, #52]	; (8007818 <__libc_init_array+0x38>)
 80077e4:	4c0d      	ldr	r4, [pc, #52]	; (800781c <__libc_init_array+0x3c>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	2600      	movs	r6, #0
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	d109      	bne.n	8007804 <__libc_init_array+0x24>
 80077f0:	4d0b      	ldr	r5, [pc, #44]	; (8007820 <__libc_init_array+0x40>)
 80077f2:	4c0c      	ldr	r4, [pc, #48]	; (8007824 <__libc_init_array+0x44>)
 80077f4:	f000 f820 	bl	8007838 <_init>
 80077f8:	1b64      	subs	r4, r4, r5
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	2600      	movs	r6, #0
 80077fe:	42a6      	cmp	r6, r4
 8007800:	d105      	bne.n	800780e <__libc_init_array+0x2e>
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	f855 3b04 	ldr.w	r3, [r5], #4
 8007808:	4798      	blx	r3
 800780a:	3601      	adds	r6, #1
 800780c:	e7ee      	b.n	80077ec <__libc_init_array+0xc>
 800780e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007812:	4798      	blx	r3
 8007814:	3601      	adds	r6, #1
 8007816:	e7f2      	b.n	80077fe <__libc_init_array+0x1e>
 8007818:	08007878 	.word	0x08007878
 800781c:	08007878 	.word	0x08007878
 8007820:	08007878 	.word	0x08007878
 8007824:	0800787c 	.word	0x0800787c

08007828 <memset>:
 8007828:	4402      	add	r2, r0
 800782a:	4603      	mov	r3, r0
 800782c:	4293      	cmp	r3, r2
 800782e:	d100      	bne.n	8007832 <memset+0xa>
 8007830:	4770      	bx	lr
 8007832:	f803 1b01 	strb.w	r1, [r3], #1
 8007836:	e7f9      	b.n	800782c <memset+0x4>

08007838 <_init>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr

08007844 <_fini>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr
